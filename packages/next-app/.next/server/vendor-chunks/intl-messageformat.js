"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/intl-messageformat";
exports.ids = ["vendor-chunks/intl-messageformat"];
exports.modules = {

/***/ "(rsc)/../../node_modules/intl-messageformat/lib/src/core.js":
/*!*************************************************************!*\
  !*** ../../node_modules/intl-messageformat/lib/src/core.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlMessageFormat: () => (/* binding */ IntlMessageFormat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(rsc)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(rsc)/../../node_modules/@formatjs/fast-memoize/lib/index.js\");\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatters */ \"(rsc)/../../node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n\n\n\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n  return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n  return {\n    create: function () {\n      return {\n        get: function (key) {\n          return store[key];\n        },\n        set: function (key, value) {\n          store[key] = value;\n        }\n      };\n    }\n  };\n}\nfunction createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n  return {\n    getNumberFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.number),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    }),\n    getDateTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.dateTime),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    }),\n    getPluralRules: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.pluralRules),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    })\n  };\n}\nvar IntlMessageFormat = /** @class */function () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n    var _this = this;\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n    this.format = function (values) {\n      var parts = _this.formatToParts(values);\n      // Hot path for straight simple msg translations\n      if (parts.length === 1) {\n        return parts[0].value;\n      }\n      var result = parts.reduce(function (all, part) {\n        if (!all.length || part.type !== _formatters__WEBPACK_IMPORTED_MODULE_3__.PART_TYPE.literal || typeof all[all.length - 1] !== 'string') {\n          all.push(part.value);\n        } else {\n          all[all.length - 1] += part.value;\n        }\n        return all;\n      }, []);\n      if (result.length <= 1) {\n        return result[0] || '';\n      }\n      return result;\n    };\n    this.formatToParts = function (values) {\n      return (0,_formatters__WEBPACK_IMPORTED_MODULE_3__.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n    this.resolvedOptions = function () {\n      var _a;\n      return {\n        locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n    this.getAst = function () {\n      return _this.ast;\n    };\n    // Defined first because it's used to build the format pattern.\n    this.locales = locales;\n    this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n    if (typeof message === 'string') {\n      this.message = message;\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      }\n      var _a = opts || {},\n        formatters = _a.formatters,\n        parseOpts = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\"formatters\"]);\n      // Parse string messages into an AST.\n      this.ast = IntlMessageFormat.__parse(message, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parseOpts), {\n        locale: this.resolvedLocale\n      }));\n    } else {\n      this.ast = message;\n    }\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    }\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n  Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n    get: function () {\n      if (!IntlMessageFormat.memoizedDefaultLocale) {\n        IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n      }\n      return IntlMessageFormat.memoizedDefaultLocale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IntlMessageFormat.memoizedDefaultLocale = null;\n  IntlMessageFormat.resolveLocale = function (locales) {\n    if (typeof Intl.Locale === 'undefined') {\n      return;\n    }\n    var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n    if (supportedLocales.length > 0) {\n      return new Intl.Locale(supportedLocales[0]);\n    }\n    return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);\n  };\n  IntlMessageFormat.__parse = _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__.parse;\n  // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n  IntlMessageFormat.formats = {\n    number: {\n      integer: {\n        maximumFractionDigits: 0\n      },\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/intl-messageformat/lib/src/core.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/intl-messageformat/lib/src/error.js":
/*!**************************************************************!*\
  !*** ../../node_modules/intl-messageformat/lib/src/error.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\n/* harmony export */   InvalidValueError: () => (/* binding */ InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* binding */ InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* binding */ MissingValueError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/../../node_modules/tslib/tslib.es6.mjs\");\n\nvar ErrorCode;\n(function (ErrorCode) {\n  // When we have a placeholder but no value to format\n  ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\";\n  // When value supplied is invalid\n  ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\";\n  // When we need specific Intl API but it's not available\n  ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FormatError, _super);\n  function FormatError(msg, code, originalMessage) {\n    var _this = _super.call(this, msg) || this;\n    _this.code = code;\n    _this.originalMessage = originalMessage;\n    return _this;\n  }\n  FormatError.prototype.toString = function () {\n    return \"[formatjs Error: \".concat(this.code, \"] \").concat(this.message);\n  };\n  return FormatError;\n}(Error);\n\nvar InvalidValueError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueError, _super);\n  function InvalidValueError(variableId, value, options, originalMessage) {\n    return _super.call(this, \"Invalid values for \\\"\".concat(variableId, \"\\\": \\\"\").concat(value, \"\\\". Options are \\\"\").concat(Object.keys(options).join('\", \"'), \"\\\"\"), ErrorCode.INVALID_VALUE, originalMessage) || this;\n  }\n  return InvalidValueError;\n}(FormatError);\n\nvar InvalidValueTypeError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueTypeError, _super);\n  function InvalidValueTypeError(value, type, originalMessage) {\n    return _super.call(this, \"Value for \\\"\".concat(value, \"\\\" must be of type \").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;\n  }\n  return InvalidValueTypeError;\n}(FormatError);\n\nvar MissingValueError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingValueError, _super);\n  function MissingValueError(variableId, originalMessage) {\n    return _super.call(this, \"The intl string context variable \\\"\".concat(variableId, \"\\\" was not provided to the string \\\"\").concat(originalMessage, \"\\\"\"), ErrorCode.MISSING_VALUE, originalMessage) || this;\n  }\n  return MissingValueError;\n}(FormatError);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvc3JjL2Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFrQztBQUMzQixJQUFJQyxTQUFTO0FBQ3BCLENBQUMsVUFBVUEsU0FBUyxFQUFFO0VBQ2xCO0VBQ0FBLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxlQUFlO0VBQzVDO0VBQ0FBLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxlQUFlO0VBQzVDO0VBQ0FBLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLGtCQUFrQjtBQUN0RCxDQUFDLEVBQUVBLFNBQVMsS0FBS0EsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsSUFBSUMsV0FBVyxHQUFHLGFBQWUsVUFBVUMsTUFBTSxFQUFFO0VBQy9DSCxnREFBUyxDQUFDRSxXQUFXLEVBQUVDLE1BQU0sQ0FBQztFQUM5QixTQUFTRCxXQUFXQSxDQUFDRSxHQUFHLEVBQUVDLElBQUksRUFBRUMsZUFBZSxFQUFFO0lBQzdDLElBQUlDLEtBQUssR0FBR0osTUFBTSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFSixHQUFHLENBQUMsSUFBSSxJQUFJO0lBQzFDRyxLQUFLLENBQUNGLElBQUksR0FBR0EsSUFBSTtJQUNqQkUsS0FBSyxDQUFDRCxlQUFlLEdBQUdBLGVBQWU7SUFDdkMsT0FBT0MsS0FBSztFQUNoQjtFQUNBTCxXQUFXLENBQUNPLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHLFlBQVk7SUFDekMsT0FBTyxtQkFBbUIsQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDTSxNQUFNLENBQUMsSUFBSSxDQUFDQyxPQUFPLENBQUM7RUFDM0UsQ0FBQztFQUNELE9BQU9WLFdBQVc7QUFDdEIsQ0FBQyxDQUFDVyxLQUFLLENBQUU7QUFDYztBQUN2QixJQUFJQyxpQkFBaUIsR0FBRyxhQUFlLFVBQVVYLE1BQU0sRUFBRTtFQUNyREgsZ0RBQVMsQ0FBQ2MsaUJBQWlCLEVBQUVYLE1BQU0sQ0FBQztFQUNwQyxTQUFTVyxpQkFBaUJBLENBQUNDLFVBQVUsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVYLGVBQWUsRUFBRTtJQUNwRSxPQUFPSCxNQUFNLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUNHLE1BQU0sQ0FBQ0ksVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDSixNQUFNLENBQUNLLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxDQUFDTCxNQUFNLENBQUNPLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDRixPQUFPLENBQUMsQ0FBQ0csSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFbkIsU0FBUyxDQUFDb0IsYUFBYSxFQUFFZixlQUFlLENBQUMsSUFBSSxJQUFJO0VBQ3hOO0VBQ0EsT0FBT1EsaUJBQWlCO0FBQzVCLENBQUMsQ0FBQ1osV0FBVyxDQUFFO0FBQ2M7QUFDN0IsSUFBSW9CLHFCQUFxQixHQUFHLGFBQWUsVUFBVW5CLE1BQU0sRUFBRTtFQUN6REgsZ0RBQVMsQ0FBQ3NCLHFCQUFxQixFQUFFbkIsTUFBTSxDQUFDO0VBQ3hDLFNBQVNtQixxQkFBcUJBLENBQUNOLEtBQUssRUFBRU8sSUFBSSxFQUFFakIsZUFBZSxFQUFFO0lBQ3pELE9BQU9ILE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUNHLE1BQU0sQ0FBQ0ssS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUNMLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDLEVBQUV0QixTQUFTLENBQUNvQixhQUFhLEVBQUVmLGVBQWUsQ0FBQyxJQUFJLElBQUk7RUFDaEo7RUFDQSxPQUFPZ0IscUJBQXFCO0FBQ2hDLENBQUMsQ0FBQ3BCLFdBQVcsQ0FBRTtBQUNrQjtBQUNqQyxJQUFJc0IsaUJBQWlCLEdBQUcsYUFBZSxVQUFVckIsTUFBTSxFQUFFO0VBQ3JESCxnREFBUyxDQUFDd0IsaUJBQWlCLEVBQUVyQixNQUFNLENBQUM7RUFDcEMsU0FBU3FCLGlCQUFpQkEsQ0FBQ1QsVUFBVSxFQUFFVCxlQUFlLEVBQUU7SUFDcEQsT0FBT0gsTUFBTSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFLHFDQUFxQyxDQUFDRyxNQUFNLENBQUNJLFVBQVUsRUFBRSxzQ0FBc0MsQ0FBQyxDQUFDSixNQUFNLENBQUNMLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRUwsU0FBUyxDQUFDd0IsYUFBYSxFQUFFbkIsZUFBZSxDQUFDLElBQUksSUFBSTtFQUM5TTtFQUNBLE9BQU9rQixpQkFBaUI7QUFDNUIsQ0FBQyxDQUFDdEIsV0FBVyxDQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFETUlOXFxPbmVEcml2ZVxcRGVza3RvcFxcSW0gYSBiaXJkZGRkZGRkXFxub2RlX21vZHVsZXNcXGludGwtbWVzc2FnZWZvcm1hdFxcbGliXFxzcmNcXGVycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciBFcnJvckNvZGU7XG4oZnVuY3Rpb24gKEVycm9yQ29kZSkge1xuICAgIC8vIFdoZW4gd2UgaGF2ZSBhIHBsYWNlaG9sZGVyIGJ1dCBubyB2YWx1ZSB0byBmb3JtYXRcbiAgICBFcnJvckNvZGVbXCJNSVNTSU5HX1ZBTFVFXCJdID0gXCJNSVNTSU5HX1ZBTFVFXCI7XG4gICAgLy8gV2hlbiB2YWx1ZSBzdXBwbGllZCBpcyBpbnZhbGlkXG4gICAgRXJyb3JDb2RlW1wiSU5WQUxJRF9WQUxVRVwiXSA9IFwiSU5WQUxJRF9WQUxVRVwiO1xuICAgIC8vIFdoZW4gd2UgbmVlZCBzcGVjaWZpYyBJbnRsIEFQSSBidXQgaXQncyBub3QgYXZhaWxhYmxlXG4gICAgRXJyb3JDb2RlW1wiTUlTU0lOR19JTlRMX0FQSVwiXSA9IFwiTUlTU0lOR19JTlRMX0FQSVwiO1xufSkoRXJyb3JDb2RlIHx8IChFcnJvckNvZGUgPSB7fSkpO1xudmFyIEZvcm1hdEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGb3JtYXRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb3JtYXRFcnJvcihtc2csIGNvZGUsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICBfdGhpcy5vcmlnaW5hbE1lc3NhZ2UgPSBvcmlnaW5hbE1lc3NhZ2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRm9ybWF0RXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJbZm9ybWF0anMgRXJyb3I6IFwiLmNvbmNhdCh0aGlzLmNvZGUsIFwiXSBcIikuY29uY2F0KHRoaXMubWVzc2FnZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRm9ybWF0RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBGb3JtYXRFcnJvciB9O1xudmFyIEludmFsaWRWYWx1ZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnZhbGlkVmFsdWVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnZhbGlkVmFsdWVFcnJvcih2YXJpYWJsZUlkLCB2YWx1ZSwgb3B0aW9ucywgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIkludmFsaWQgdmFsdWVzIGZvciBcXFwiXCIuY29uY2F0KHZhcmlhYmxlSWQsIFwiXFxcIjogXFxcIlwiKS5jb25jYXQodmFsdWUsIFwiXFxcIi4gT3B0aW9ucyBhcmUgXFxcIlwiKS5jb25jYXQoT2JqZWN0LmtleXMob3B0aW9ucykuam9pbignXCIsIFwiJyksIFwiXFxcIlwiKSwgRXJyb3JDb2RlLklOVkFMSURfVkFMVUUsIG9yaWdpbmFsTWVzc2FnZSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEludmFsaWRWYWx1ZUVycm9yO1xufShGb3JtYXRFcnJvcikpO1xuZXhwb3J0IHsgSW52YWxpZFZhbHVlRXJyb3IgfTtcbnZhciBJbnZhbGlkVmFsdWVUeXBlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludmFsaWRWYWx1ZVR5cGVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnZhbGlkVmFsdWVUeXBlRXJyb3IodmFsdWUsIHR5cGUsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJWYWx1ZSBmb3IgXFxcIlwiLmNvbmNhdCh2YWx1ZSwgXCJcXFwiIG11c3QgYmUgb2YgdHlwZSBcIikuY29uY2F0KHR5cGUpLCBFcnJvckNvZGUuSU5WQUxJRF9WQUxVRSwgb3JpZ2luYWxNZXNzYWdlKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZFZhbHVlVHlwZUVycm9yO1xufShGb3JtYXRFcnJvcikpO1xuZXhwb3J0IHsgSW52YWxpZFZhbHVlVHlwZUVycm9yIH07XG52YXIgTWlzc2luZ1ZhbHVlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1pc3NpbmdWYWx1ZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1pc3NpbmdWYWx1ZUVycm9yKHZhcmlhYmxlSWQsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJUaGUgaW50bCBzdHJpbmcgY29udGV4dCB2YXJpYWJsZSBcXFwiXCIuY29uY2F0KHZhcmlhYmxlSWQsIFwiXFxcIiB3YXMgbm90IHByb3ZpZGVkIHRvIHRoZSBzdHJpbmcgXFxcIlwiKS5jb25jYXQob3JpZ2luYWxNZXNzYWdlLCBcIlxcXCJcIiksIEVycm9yQ29kZS5NSVNTSU5HX1ZBTFVFLCBvcmlnaW5hbE1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBNaXNzaW5nVmFsdWVFcnJvcjtcbn0oRm9ybWF0RXJyb3IpKTtcbmV4cG9ydCB7IE1pc3NpbmdWYWx1ZUVycm9yIH07XG4iXSwibmFtZXMiOlsiX19leHRlbmRzIiwiRXJyb3JDb2RlIiwiRm9ybWF0RXJyb3IiLCJfc3VwZXIiLCJtc2ciLCJjb2RlIiwib3JpZ2luYWxNZXNzYWdlIiwiX3RoaXMiLCJjYWxsIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjb25jYXQiLCJtZXNzYWdlIiwiRXJyb3IiLCJJbnZhbGlkVmFsdWVFcnJvciIsInZhcmlhYmxlSWQiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJPYmplY3QiLCJrZXlzIiwiam9pbiIsIklOVkFMSURfVkFMVUUiLCJJbnZhbGlkVmFsdWVUeXBlRXJyb3IiLCJ0eXBlIiwiTWlzc2luZ1ZhbHVlRXJyb3IiLCJNSVNTSU5HX1ZBTFVFIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/intl-messageformat/lib/src/error.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/intl-messageformat/lib/src/formatters.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/intl-messageformat/lib/src/formatters.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PART_TYPE: () => (/* binding */ PART_TYPE),\n/* harmony export */   formatToParts: () => (/* binding */ formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* binding */ isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/intl-messageformat/lib/src/error.js\");\n\n\nvar PART_TYPE;\n(function (PART_TYPE) {\n  PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n  PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n  if (parts.length < 2) {\n    return parts;\n  }\n  return parts.reduce(function (all, part) {\n    var lastPart = all[all.length - 1];\n    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {\n      all.push(part);\n    } else {\n      lastPart.value += part.value;\n    }\n    return all;\n  }, []);\n}\nfunction isFormatXMLElementFn(el) {\n  return typeof el === 'function';\n}\n// TODO(skeleton): add skeleton support\nfunction formatToParts(els, locales, formatters, formats, values, currentPluralValue,\n// For debugging\noriginalMessage) {\n  // Hot path for straight simple msg translations\n  if (els.length === 1 && (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(els[0])) {\n    return [{\n      type: PART_TYPE.literal,\n      value: els[0].value\n    }];\n  }\n  var result = [];\n  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n    var el = els_1[_i];\n    // Exit early for string parts.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(el)) {\n      result.push({\n        type: PART_TYPE.literal,\n        value: el.value\n      });\n      continue;\n    }\n    // TODO: should this part be literal type?\n    // Replace `#` in plural rules with the actual numeric value.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPoundElement)(el)) {\n      if (typeof currentPluralValue === 'number') {\n        result.push({\n          type: PART_TYPE.literal,\n          value: formatters.getNumberFormat(locales).format(currentPluralValue)\n        });\n      }\n      continue;\n    }\n    var varName = el.value;\n    // Enforce that all required values are provided by the caller.\n    if (!(values && varName in values)) {\n      throw new _error__WEBPACK_IMPORTED_MODULE_1__.MissingValueError(varName, originalMessage);\n    }\n    var value = values[varName];\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el)) {\n      if (!value || typeof value === 'string' || typeof value === 'number') {\n        value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';\n      }\n      result.push({\n        type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n        value: value\n      });\n      continue;\n    }\n    // Recursively format plural and select parts' option — which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.date[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.time[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.number[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n      if (style && style.scale) {\n        value = value * (style.scale || 1);\n      }\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getNumberFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      var children = el.children,\n        value_1 = el.value;\n      var formatFn = values[value_1];\n      if (!isFormatXMLElementFn(formatFn)) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueTypeError(value_1, 'function', originalMessage);\n      }\n      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n      var chunks = formatFn(parts.map(function (p) {\n        return p.value;\n      }));\n      if (!Array.isArray(chunks)) {\n        chunks = [chunks];\n      }\n      result.push.apply(result, chunks.map(function (c) {\n        return {\n          type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n          value: c\n        };\n      }));\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n      var opt = el.options[value] || el.options.other;\n      if (!opt) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n      }\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el)) {\n      var opt = el.options[\"=\".concat(value)];\n      if (!opt) {\n        if (!Intl.PluralRules) {\n          throw new _error__WEBPACK_IMPORTED_MODULE_1__.FormatError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\", _error__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API, originalMessage);\n        }\n        var rule = formatters.getPluralRules(locales, {\n          type: el.pluralType\n        }).select(value - (el.offset || 0));\n        opt = el.options[rule] || el.options.other;\n      }\n      if (!opt) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n      }\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n      continue;\n    }\n  }\n  return mergeLiteral(result);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/intl-messageformat/lib/src/formatters.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/intl-messageformat/lib/src/core.js":
/*!*************************************************************!*\
  !*** ../../node_modules/intl-messageformat/lib/src/core.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlMessageFormat: () => (/* binding */ IntlMessageFormat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(ssr)/../../node_modules/@formatjs/fast-memoize/lib/index.js\");\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatters */ \"(ssr)/../../node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n\n\n\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n  return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n  return {\n    create: function () {\n      return {\n        get: function (key) {\n          return store[key];\n        },\n        set: function (key, value) {\n          store[key] = value;\n        }\n      };\n    }\n  };\n}\nfunction createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n  return {\n    getNumberFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.number),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    }),\n    getDateTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.dateTime),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    }),\n    getPluralRules: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.pluralRules),\n      strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n    })\n  };\n}\nvar IntlMessageFormat = /** @class */function () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n    var _this = this;\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n    this.format = function (values) {\n      var parts = _this.formatToParts(values);\n      // Hot path for straight simple msg translations\n      if (parts.length === 1) {\n        return parts[0].value;\n      }\n      var result = parts.reduce(function (all, part) {\n        if (!all.length || part.type !== _formatters__WEBPACK_IMPORTED_MODULE_3__.PART_TYPE.literal || typeof all[all.length - 1] !== 'string') {\n          all.push(part.value);\n        } else {\n          all[all.length - 1] += part.value;\n        }\n        return all;\n      }, []);\n      if (result.length <= 1) {\n        return result[0] || '';\n      }\n      return result;\n    };\n    this.formatToParts = function (values) {\n      return (0,_formatters__WEBPACK_IMPORTED_MODULE_3__.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n    this.resolvedOptions = function () {\n      var _a;\n      return {\n        locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n    this.getAst = function () {\n      return _this.ast;\n    };\n    // Defined first because it's used to build the format pattern.\n    this.locales = locales;\n    this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n    if (typeof message === 'string') {\n      this.message = message;\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      }\n      var _a = opts || {},\n        formatters = _a.formatters,\n        parseOpts = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\"formatters\"]);\n      // Parse string messages into an AST.\n      this.ast = IntlMessageFormat.__parse(message, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parseOpts), {\n        locale: this.resolvedLocale\n      }));\n    } else {\n      this.ast = message;\n    }\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    }\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n  Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n    get: function () {\n      if (!IntlMessageFormat.memoizedDefaultLocale) {\n        IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n      }\n      return IntlMessageFormat.memoizedDefaultLocale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IntlMessageFormat.memoizedDefaultLocale = null;\n  IntlMessageFormat.resolveLocale = function (locales) {\n    if (typeof Intl.Locale === 'undefined') {\n      return;\n    }\n    var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n    if (supportedLocales.length > 0) {\n      return new Intl.Locale(supportedLocales[0]);\n    }\n    return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);\n  };\n  IntlMessageFormat.__parse = _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__.parse;\n  // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n  IntlMessageFormat.formats = {\n    number: {\n      integer: {\n        maximumFractionDigits: 0\n      },\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/intl-messageformat/lib/src/core.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/intl-messageformat/lib/src/error.js":
/*!**************************************************************!*\
  !*** ../../node_modules/intl-messageformat/lib/src/error.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\n/* harmony export */   InvalidValueError: () => (/* binding */ InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* binding */ InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* binding */ MissingValueError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/../../node_modules/tslib/tslib.es6.mjs\");\n\nvar ErrorCode;\n(function (ErrorCode) {\n  // When we have a placeholder but no value to format\n  ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\";\n  // When value supplied is invalid\n  ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\";\n  // When we need specific Intl API but it's not available\n  ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FormatError, _super);\n  function FormatError(msg, code, originalMessage) {\n    var _this = _super.call(this, msg) || this;\n    _this.code = code;\n    _this.originalMessage = originalMessage;\n    return _this;\n  }\n  FormatError.prototype.toString = function () {\n    return \"[formatjs Error: \".concat(this.code, \"] \").concat(this.message);\n  };\n  return FormatError;\n}(Error);\n\nvar InvalidValueError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueError, _super);\n  function InvalidValueError(variableId, value, options, originalMessage) {\n    return _super.call(this, \"Invalid values for \\\"\".concat(variableId, \"\\\": \\\"\").concat(value, \"\\\". Options are \\\"\").concat(Object.keys(options).join('\", \"'), \"\\\"\"), ErrorCode.INVALID_VALUE, originalMessage) || this;\n  }\n  return InvalidValueError;\n}(FormatError);\n\nvar InvalidValueTypeError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueTypeError, _super);\n  function InvalidValueTypeError(value, type, originalMessage) {\n    return _super.call(this, \"Value for \\\"\".concat(value, \"\\\" must be of type \").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;\n  }\n  return InvalidValueTypeError;\n}(FormatError);\n\nvar MissingValueError = /** @class */function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingValueError, _super);\n  function MissingValueError(variableId, originalMessage) {\n    return _super.call(this, \"The intl string context variable \\\"\".concat(variableId, \"\\\" was not provided to the string \\\"\").concat(originalMessage, \"\\\"\"), ErrorCode.MISSING_VALUE, originalMessage) || this;\n  }\n  return MissingValueError;\n}(FormatError);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvc3JjL2Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFrQztBQUMzQixJQUFJQyxTQUFTO0FBQ3BCLENBQUMsVUFBVUEsU0FBUyxFQUFFO0VBQ2xCO0VBQ0FBLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxlQUFlO0VBQzVDO0VBQ0FBLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxlQUFlO0VBQzVDO0VBQ0FBLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLGtCQUFrQjtBQUN0RCxDQUFDLEVBQUVBLFNBQVMsS0FBS0EsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsSUFBSUMsV0FBVyxHQUFHLGFBQWUsVUFBVUMsTUFBTSxFQUFFO0VBQy9DSCxnREFBUyxDQUFDRSxXQUFXLEVBQUVDLE1BQU0sQ0FBQztFQUM5QixTQUFTRCxXQUFXQSxDQUFDRSxHQUFHLEVBQUVDLElBQUksRUFBRUMsZUFBZSxFQUFFO0lBQzdDLElBQUlDLEtBQUssR0FBR0osTUFBTSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFSixHQUFHLENBQUMsSUFBSSxJQUFJO0lBQzFDRyxLQUFLLENBQUNGLElBQUksR0FBR0EsSUFBSTtJQUNqQkUsS0FBSyxDQUFDRCxlQUFlLEdBQUdBLGVBQWU7SUFDdkMsT0FBT0MsS0FBSztFQUNoQjtFQUNBTCxXQUFXLENBQUNPLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHLFlBQVk7SUFDekMsT0FBTyxtQkFBbUIsQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDTSxNQUFNLENBQUMsSUFBSSxDQUFDQyxPQUFPLENBQUM7RUFDM0UsQ0FBQztFQUNELE9BQU9WLFdBQVc7QUFDdEIsQ0FBQyxDQUFDVyxLQUFLLENBQUU7QUFDYztBQUN2QixJQUFJQyxpQkFBaUIsR0FBRyxhQUFlLFVBQVVYLE1BQU0sRUFBRTtFQUNyREgsZ0RBQVMsQ0FBQ2MsaUJBQWlCLEVBQUVYLE1BQU0sQ0FBQztFQUNwQyxTQUFTVyxpQkFBaUJBLENBQUNDLFVBQVUsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVYLGVBQWUsRUFBRTtJQUNwRSxPQUFPSCxNQUFNLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUNHLE1BQU0sQ0FBQ0ksVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDSixNQUFNLENBQUNLLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxDQUFDTCxNQUFNLENBQUNPLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDRixPQUFPLENBQUMsQ0FBQ0csSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFbkIsU0FBUyxDQUFDb0IsYUFBYSxFQUFFZixlQUFlLENBQUMsSUFBSSxJQUFJO0VBQ3hOO0VBQ0EsT0FBT1EsaUJBQWlCO0FBQzVCLENBQUMsQ0FBQ1osV0FBVyxDQUFFO0FBQ2M7QUFDN0IsSUFBSW9CLHFCQUFxQixHQUFHLGFBQWUsVUFBVW5CLE1BQU0sRUFBRTtFQUN6REgsZ0RBQVMsQ0FBQ3NCLHFCQUFxQixFQUFFbkIsTUFBTSxDQUFDO0VBQ3hDLFNBQVNtQixxQkFBcUJBLENBQUNOLEtBQUssRUFBRU8sSUFBSSxFQUFFakIsZUFBZSxFQUFFO0lBQ3pELE9BQU9ILE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUNHLE1BQU0sQ0FBQ0ssS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUNMLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDLEVBQUV0QixTQUFTLENBQUNvQixhQUFhLEVBQUVmLGVBQWUsQ0FBQyxJQUFJLElBQUk7RUFDaEo7RUFDQSxPQUFPZ0IscUJBQXFCO0FBQ2hDLENBQUMsQ0FBQ3BCLFdBQVcsQ0FBRTtBQUNrQjtBQUNqQyxJQUFJc0IsaUJBQWlCLEdBQUcsYUFBZSxVQUFVckIsTUFBTSxFQUFFO0VBQ3JESCxnREFBUyxDQUFDd0IsaUJBQWlCLEVBQUVyQixNQUFNLENBQUM7RUFDcEMsU0FBU3FCLGlCQUFpQkEsQ0FBQ1QsVUFBVSxFQUFFVCxlQUFlLEVBQUU7SUFDcEQsT0FBT0gsTUFBTSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFLHFDQUFxQyxDQUFDRyxNQUFNLENBQUNJLFVBQVUsRUFBRSxzQ0FBc0MsQ0FBQyxDQUFDSixNQUFNLENBQUNMLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRUwsU0FBUyxDQUFDd0IsYUFBYSxFQUFFbkIsZUFBZSxDQUFDLElBQUksSUFBSTtFQUM5TTtFQUNBLE9BQU9rQixpQkFBaUI7QUFDNUIsQ0FBQyxDQUFDdEIsV0FBVyxDQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFETUlOXFxPbmVEcml2ZVxcRGVza3RvcFxcSW0gYSBiaXJkZGRkZGRkXFxub2RlX21vZHVsZXNcXGludGwtbWVzc2FnZWZvcm1hdFxcbGliXFxzcmNcXGVycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciBFcnJvckNvZGU7XG4oZnVuY3Rpb24gKEVycm9yQ29kZSkge1xuICAgIC8vIFdoZW4gd2UgaGF2ZSBhIHBsYWNlaG9sZGVyIGJ1dCBubyB2YWx1ZSB0byBmb3JtYXRcbiAgICBFcnJvckNvZGVbXCJNSVNTSU5HX1ZBTFVFXCJdID0gXCJNSVNTSU5HX1ZBTFVFXCI7XG4gICAgLy8gV2hlbiB2YWx1ZSBzdXBwbGllZCBpcyBpbnZhbGlkXG4gICAgRXJyb3JDb2RlW1wiSU5WQUxJRF9WQUxVRVwiXSA9IFwiSU5WQUxJRF9WQUxVRVwiO1xuICAgIC8vIFdoZW4gd2UgbmVlZCBzcGVjaWZpYyBJbnRsIEFQSSBidXQgaXQncyBub3QgYXZhaWxhYmxlXG4gICAgRXJyb3JDb2RlW1wiTUlTU0lOR19JTlRMX0FQSVwiXSA9IFwiTUlTU0lOR19JTlRMX0FQSVwiO1xufSkoRXJyb3JDb2RlIHx8IChFcnJvckNvZGUgPSB7fSkpO1xudmFyIEZvcm1hdEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGb3JtYXRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb3JtYXRFcnJvcihtc2csIGNvZGUsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICBfdGhpcy5vcmlnaW5hbE1lc3NhZ2UgPSBvcmlnaW5hbE1lc3NhZ2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRm9ybWF0RXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJbZm9ybWF0anMgRXJyb3I6IFwiLmNvbmNhdCh0aGlzLmNvZGUsIFwiXSBcIikuY29uY2F0KHRoaXMubWVzc2FnZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRm9ybWF0RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBGb3JtYXRFcnJvciB9O1xudmFyIEludmFsaWRWYWx1ZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnZhbGlkVmFsdWVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnZhbGlkVmFsdWVFcnJvcih2YXJpYWJsZUlkLCB2YWx1ZSwgb3B0aW9ucywgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIkludmFsaWQgdmFsdWVzIGZvciBcXFwiXCIuY29uY2F0KHZhcmlhYmxlSWQsIFwiXFxcIjogXFxcIlwiKS5jb25jYXQodmFsdWUsIFwiXFxcIi4gT3B0aW9ucyBhcmUgXFxcIlwiKS5jb25jYXQoT2JqZWN0LmtleXMob3B0aW9ucykuam9pbignXCIsIFwiJyksIFwiXFxcIlwiKSwgRXJyb3JDb2RlLklOVkFMSURfVkFMVUUsIG9yaWdpbmFsTWVzc2FnZSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEludmFsaWRWYWx1ZUVycm9yO1xufShGb3JtYXRFcnJvcikpO1xuZXhwb3J0IHsgSW52YWxpZFZhbHVlRXJyb3IgfTtcbnZhciBJbnZhbGlkVmFsdWVUeXBlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludmFsaWRWYWx1ZVR5cGVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnZhbGlkVmFsdWVUeXBlRXJyb3IodmFsdWUsIHR5cGUsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJWYWx1ZSBmb3IgXFxcIlwiLmNvbmNhdCh2YWx1ZSwgXCJcXFwiIG11c3QgYmUgb2YgdHlwZSBcIikuY29uY2F0KHR5cGUpLCBFcnJvckNvZGUuSU5WQUxJRF9WQUxVRSwgb3JpZ2luYWxNZXNzYWdlKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZFZhbHVlVHlwZUVycm9yO1xufShGb3JtYXRFcnJvcikpO1xuZXhwb3J0IHsgSW52YWxpZFZhbHVlVHlwZUVycm9yIH07XG52YXIgTWlzc2luZ1ZhbHVlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1pc3NpbmdWYWx1ZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1pc3NpbmdWYWx1ZUVycm9yKHZhcmlhYmxlSWQsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJUaGUgaW50bCBzdHJpbmcgY29udGV4dCB2YXJpYWJsZSBcXFwiXCIuY29uY2F0KHZhcmlhYmxlSWQsIFwiXFxcIiB3YXMgbm90IHByb3ZpZGVkIHRvIHRoZSBzdHJpbmcgXFxcIlwiKS5jb25jYXQob3JpZ2luYWxNZXNzYWdlLCBcIlxcXCJcIiksIEVycm9yQ29kZS5NSVNTSU5HX1ZBTFVFLCBvcmlnaW5hbE1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBNaXNzaW5nVmFsdWVFcnJvcjtcbn0oRm9ybWF0RXJyb3IpKTtcbmV4cG9ydCB7IE1pc3NpbmdWYWx1ZUVycm9yIH07XG4iXSwibmFtZXMiOlsiX19leHRlbmRzIiwiRXJyb3JDb2RlIiwiRm9ybWF0RXJyb3IiLCJfc3VwZXIiLCJtc2ciLCJjb2RlIiwib3JpZ2luYWxNZXNzYWdlIiwiX3RoaXMiLCJjYWxsIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjb25jYXQiLCJtZXNzYWdlIiwiRXJyb3IiLCJJbnZhbGlkVmFsdWVFcnJvciIsInZhcmlhYmxlSWQiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJPYmplY3QiLCJrZXlzIiwiam9pbiIsIklOVkFMSURfVkFMVUUiLCJJbnZhbGlkVmFsdWVUeXBlRXJyb3IiLCJ0eXBlIiwiTWlzc2luZ1ZhbHVlRXJyb3IiLCJNSVNTSU5HX1ZBTFVFIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/intl-messageformat/lib/src/error.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/intl-messageformat/lib/src/formatters.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/intl-messageformat/lib/src/formatters.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PART_TYPE: () => (/* binding */ PART_TYPE),\n/* harmony export */   formatToParts: () => (/* binding */ formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* binding */ isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(ssr)/../../node_modules/intl-messageformat/lib/src/error.js\");\n\n\nvar PART_TYPE;\n(function (PART_TYPE) {\n  PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n  PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n  if (parts.length < 2) {\n    return parts;\n  }\n  return parts.reduce(function (all, part) {\n    var lastPart = all[all.length - 1];\n    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {\n      all.push(part);\n    } else {\n      lastPart.value += part.value;\n    }\n    return all;\n  }, []);\n}\nfunction isFormatXMLElementFn(el) {\n  return typeof el === 'function';\n}\n// TODO(skeleton): add skeleton support\nfunction formatToParts(els, locales, formatters, formats, values, currentPluralValue,\n// For debugging\noriginalMessage) {\n  // Hot path for straight simple msg translations\n  if (els.length === 1 && (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(els[0])) {\n    return [{\n      type: PART_TYPE.literal,\n      value: els[0].value\n    }];\n  }\n  var result = [];\n  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n    var el = els_1[_i];\n    // Exit early for string parts.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(el)) {\n      result.push({\n        type: PART_TYPE.literal,\n        value: el.value\n      });\n      continue;\n    }\n    // TODO: should this part be literal type?\n    // Replace `#` in plural rules with the actual numeric value.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPoundElement)(el)) {\n      if (typeof currentPluralValue === 'number') {\n        result.push({\n          type: PART_TYPE.literal,\n          value: formatters.getNumberFormat(locales).format(currentPluralValue)\n        });\n      }\n      continue;\n    }\n    var varName = el.value;\n    // Enforce that all required values are provided by the caller.\n    if (!(values && varName in values)) {\n      throw new _error__WEBPACK_IMPORTED_MODULE_1__.MissingValueError(varName, originalMessage);\n    }\n    var value = values[varName];\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el)) {\n      if (!value || typeof value === 'string' || typeof value === 'number') {\n        value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';\n      }\n      result.push({\n        type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n        value: value\n      });\n      continue;\n    }\n    // Recursively format plural and select parts' option — which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.date[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.time[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n      var style = typeof el.style === 'string' ? formats.number[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n      if (style && style.scale) {\n        value = value * (style.scale || 1);\n      }\n      result.push({\n        type: PART_TYPE.literal,\n        value: formatters.getNumberFormat(locales, style).format(value)\n      });\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      var children = el.children,\n        value_1 = el.value;\n      var formatFn = values[value_1];\n      if (!isFormatXMLElementFn(formatFn)) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueTypeError(value_1, 'function', originalMessage);\n      }\n      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n      var chunks = formatFn(parts.map(function (p) {\n        return p.value;\n      }));\n      if (!Array.isArray(chunks)) {\n        chunks = [chunks];\n      }\n      result.push.apply(result, chunks.map(function (c) {\n        return {\n          type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,\n          value: c\n        };\n      }));\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n      var opt = el.options[value] || el.options.other;\n      if (!opt) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n      }\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n      continue;\n    }\n    if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el)) {\n      var opt = el.options[\"=\".concat(value)];\n      if (!opt) {\n        if (!Intl.PluralRules) {\n          throw new _error__WEBPACK_IMPORTED_MODULE_1__.FormatError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\", _error__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API, originalMessage);\n        }\n        var rule = formatters.getPluralRules(locales, {\n          type: el.pluralType\n        }).select(value - (el.offset || 0));\n        opt = el.options[rule] || el.options.other;\n      }\n      if (!opt) {\n        throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n      }\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n      continue;\n    }\n  }\n  return mergeLiteral(result);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/intl-messageformat/lib/src/formatters.js\n");

/***/ })

};
;