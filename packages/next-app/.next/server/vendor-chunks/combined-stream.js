/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/combined-stream";
exports.ids = ["vendor-chunks/combined-stream"];
exports.modules = {

/***/ "(ssr)/../../node_modules/combined-stream/lib/combined_stream.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/combined-stream/lib/combined_stream.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var util = __webpack_require__(/*! util */ \"util\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar DelayedStream = __webpack_require__(/*! delayed-stream */ \"(ssr)/../../node_modules/delayed-stream/lib/delayed_stream.js\");\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n  this._insideLoop = false;\n  this._pendingNext = false;\n}\nutil.inherits(CombinedStream, Stream);\nCombinedStream.create = function (options) {\n  var combinedStream = new this();\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n  return combinedStream;\n};\nCombinedStream.isStreamLike = function (stream) {\n  return typeof stream !== 'function' && typeof stream !== 'string' && typeof stream !== 'boolean' && typeof stream !== 'number' && !Buffer.isBuffer(stream);\n};\nCombinedStream.prototype.append = function (stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n    this._handleErrors(stream);\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n  this._streams.push(stream);\n  return this;\n};\nCombinedStream.prototype.pipe = function (dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\nCombinedStream.prototype._getNext = function () {\n  this._currentStream = null;\n  if (this._insideLoop) {\n    this._pendingNext = true;\n    return; // defer call\n  }\n\n  this._insideLoop = true;\n  try {\n    do {\n      this._pendingNext = false;\n      this._realGetNext();\n    } while (this._pendingNext);\n  } finally {\n    this._insideLoop = false;\n  }\n};\nCombinedStream.prototype._realGetNext = function () {\n  var stream = this._streams.shift();\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n  var getStream = stream;\n  getStream(function (stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n    this._pipeNext(stream);\n  }.bind(this));\n};\nCombinedStream.prototype._pipeNext = function (stream) {\n  this._currentStream = stream;\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {\n      end: false\n    });\n    return;\n  }\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\nCombinedStream.prototype._handleErrors = function (stream) {\n  var self = this;\n  stream.on('error', function (err) {\n    self._emitError(err);\n  });\n};\nCombinedStream.prototype.write = function (data) {\n  this.emit('data', data);\n};\nCombinedStream.prototype.pause = function () {\n  if (!this.pauseStreams) {\n    return;\n  }\n  if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\nCombinedStream.prototype.resume = function () {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n  if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\nCombinedStream.prototype.end = function () {\n  this._reset();\n  this.emit('end');\n};\nCombinedStream.prototype.destroy = function () {\n  this._reset();\n  this.emit('close');\n};\nCombinedStream.prototype._reset = function () {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\nCombinedStream.prototype._checkDataSize = function () {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\nCombinedStream.prototype._updateDataSize = function () {\n  this.dataSize = 0;\n  var self = this;\n  this._streams.forEach(function (stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n    self.dataSize += stream.dataSize;\n  });\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\nCombinedStream.prototype._emitError = function (err) {\n  this._reset();\n  this.emit('error', err);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/combined-stream/lib/combined_stream.js\n");

/***/ })

};
;