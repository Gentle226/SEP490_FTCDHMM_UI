"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@formatjs";
exports.ids = ["vendor-chunks/@formatjs"];
exports.modules = {

/***/ "(rsc)/../../node_modules/@formatjs/fast-memoize/lib/index.js":
/*!**************************************************************!*\
  !*** ../../node_modules/@formatjs/fast-memoize/lib/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoize: () => (/* binding */ memoize),\n/* harmony export */   strategies: () => (/* binding */ strategies)\n/* harmony export */ });\n//\n// Main\n//\nfunction memoize(fn, options) {\n  var cache = options && options.cache ? options.cache : cacheDefault;\n  var serializer = options && options.serializer ? options.serializer : serializerDefault;\n  var strategy = options && options.strategy ? options.strategy : strategyDefault;\n  return strategy(fn, {\n    cache: cache,\n    serializer: serializer\n  });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n  return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\n\nfunction monadic(fn, cache, serializer, arg) {\n  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n  var computedValue = cache.get(cacheKey);\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.call(this, arg);\n    cache.set(cacheKey, computedValue);\n  }\n  return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n  var args = Array.prototype.slice.call(arguments, 3);\n  var cacheKey = serializer(args);\n  var computedValue = cache.get(cacheKey);\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.apply(this, args);\n    cache.set(cacheKey, computedValue);\n  }\n  return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n  return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n  var strategy = fn.length === 1 ? monadic : variadic;\n  return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n  return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n  return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function () {\n  return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nvar ObjectWithoutPrototypeCache = /** @class */function () {\n  function ObjectWithoutPrototypeCache() {\n    this.cache = Object.create(null);\n  }\n  ObjectWithoutPrototypeCache.prototype.get = function (key) {\n    return this.cache[key];\n  };\n  ObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n    this.cache[key] = value;\n  };\n  return ObjectWithoutPrototypeCache;\n}();\nvar cacheDefault = {\n  create: function create() {\n    return new ObjectWithoutPrototypeCache();\n  }\n};\nvar strategies = {\n  variadic: strategyVariadic,\n  monadic: strategyMonadic\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/fast-memoize/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBestPattern: () => (/* binding */ getBestPattern)\n/* harmony export */ });\n/* harmony import */ var _time_data_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time-data.generated */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\");\n\n/**\n * Returns the best matching date time pattern if a date time skeleton\n * pattern is provided with a locale. Follows the Unicode specification:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns\n * @param skeleton date time skeleton pattern that possibly includes j, J or C\n * @param locale\n */\nfunction getBestPattern(skeleton, locale) {\n  var skeletonCopy = '';\n  for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {\n    var patternChar = skeleton.charAt(patternPos);\n    if (patternChar === 'j') {\n      var extraLength = 0;\n      while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {\n        extraLength++;\n        patternPos++;\n      }\n      var hourLen = 1 + (extraLength & 1);\n      var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);\n      var dayPeriodChar = 'a';\n      var hourChar = getDefaultHourSymbolFromLocale(locale);\n      if (hourChar == 'H' || hourChar == 'k') {\n        dayPeriodLen = 0;\n      }\n      while (dayPeriodLen-- > 0) {\n        skeletonCopy += dayPeriodChar;\n      }\n      while (hourLen-- > 0) {\n        skeletonCopy = hourChar + skeletonCopy;\n      }\n    } else if (patternChar === 'J') {\n      skeletonCopy += 'H';\n    } else {\n      skeletonCopy += patternChar;\n    }\n  }\n  return skeletonCopy;\n}\n/**\n * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n * of the given `locale` to the corresponding time pattern.\n * @param locale\n */\nfunction getDefaultHourSymbolFromLocale(locale) {\n  var hourCycle = locale.hourCycle;\n  if (hourCycle === undefined &&\n  // @ts-ignore hourCycle(s) is not identified yet\n  locale.hourCycles &&\n  // @ts-ignore\n  locale.hourCycles.length) {\n    // @ts-ignore\n    hourCycle = locale.hourCycles[0];\n  }\n  if (hourCycle) {\n    switch (hourCycle) {\n      case 'h24':\n        return 'k';\n      case 'h23':\n        return 'H';\n      case 'h12':\n        return 'h';\n      case 'h11':\n        return 'K';\n      default:\n        throw new Error('Invalid hourCycle');\n    }\n  }\n  // TODO: Once hourCycle is fully supported remove the following with data generation\n  var languageTag = locale.language;\n  var regionTag;\n  if (languageTag !== 'root') {\n    regionTag = locale.maximize().region;\n  }\n  var hourCycles = _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[regionTag || ''] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[languageTag || ''] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[\"\".concat(languageTag, \"-001\")] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData['001'];\n  return hourCycles[0];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2RhdGUtdGltZS1wYXR0ZXJuLWdlbmVyYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGNBQWNBLENBQUNDLFFBQVEsRUFBRUMsTUFBTSxFQUFFO0VBQzdDLElBQUlDLFlBQVksR0FBRyxFQUFFO0VBQ3JCLEtBQUssSUFBSUMsVUFBVSxHQUFHLENBQUMsRUFBRUEsVUFBVSxHQUFHSCxRQUFRLENBQUNJLE1BQU0sRUFBRUQsVUFBVSxFQUFFLEVBQUU7SUFDakUsSUFBSUUsV0FBVyxHQUFHTCxRQUFRLENBQUNNLE1BQU0sQ0FBQ0gsVUFBVSxDQUFDO0lBQzdDLElBQUlFLFdBQVcsS0FBSyxHQUFHLEVBQUU7TUFDckIsSUFBSUUsV0FBVyxHQUFHLENBQUM7TUFDbkIsT0FBT0osVUFBVSxHQUFHLENBQUMsR0FBR0gsUUFBUSxDQUFDSSxNQUFNLElBQ25DSixRQUFRLENBQUNNLE1BQU0sQ0FBQ0gsVUFBVSxHQUFHLENBQUMsQ0FBQyxLQUFLRSxXQUFXLEVBQUU7UUFDakRFLFdBQVcsRUFBRTtRQUNiSixVQUFVLEVBQUU7TUFDaEI7TUFDQSxJQUFJSyxPQUFPLEdBQUcsQ0FBQyxJQUFJRCxXQUFXLEdBQUcsQ0FBQyxDQUFDO01BQ25DLElBQUlFLFlBQVksR0FBR0YsV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJQSxXQUFXLElBQUksQ0FBQyxDQUFDO01BQy9ELElBQUlHLGFBQWEsR0FBRyxHQUFHO01BQ3ZCLElBQUlDLFFBQVEsR0FBR0MsOEJBQThCLENBQUNYLE1BQU0sQ0FBQztNQUNyRCxJQUFJVSxRQUFRLElBQUksR0FBRyxJQUFJQSxRQUFRLElBQUksR0FBRyxFQUFFO1FBQ3BDRixZQUFZLEdBQUcsQ0FBQztNQUNwQjtNQUNBLE9BQU9BLFlBQVksRUFBRSxHQUFHLENBQUMsRUFBRTtRQUN2QlAsWUFBWSxJQUFJUSxhQUFhO01BQ2pDO01BQ0EsT0FBT0YsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ2xCTixZQUFZLEdBQUdTLFFBQVEsR0FBR1QsWUFBWTtNQUMxQztJQUNKLENBQUMsTUFDSSxJQUFJRyxXQUFXLEtBQUssR0FBRyxFQUFFO01BQzFCSCxZQUFZLElBQUksR0FBRztJQUN2QixDQUFDLE1BQ0k7TUFDREEsWUFBWSxJQUFJRyxXQUFXO0lBQy9CO0VBQ0o7RUFDQSxPQUFPSCxZQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNVLDhCQUE4QkEsQ0FBQ1gsTUFBTSxFQUFFO0VBQzVDLElBQUlZLFNBQVMsR0FBR1osTUFBTSxDQUFDWSxTQUFTO0VBQ2hDLElBQUlBLFNBQVMsS0FBS0MsU0FBUztFQUN2QjtFQUNBYixNQUFNLENBQUNjLFVBQVU7RUFDakI7RUFDQWQsTUFBTSxDQUFDYyxVQUFVLENBQUNYLE1BQU0sRUFBRTtJQUMxQjtJQUNBUyxTQUFTLEdBQUdaLE1BQU0sQ0FBQ2MsVUFBVSxDQUFDLENBQUMsQ0FBQztFQUNwQztFQUNBLElBQUlGLFNBQVMsRUFBRTtJQUNYLFFBQVFBLFNBQVM7TUFDYixLQUFLLEtBQUs7UUFDTixPQUFPLEdBQUc7TUFDZCxLQUFLLEtBQUs7UUFDTixPQUFPLEdBQUc7TUFDZCxLQUFLLEtBQUs7UUFDTixPQUFPLEdBQUc7TUFDZCxLQUFLLEtBQUs7UUFDTixPQUFPLEdBQUc7TUFDZDtRQUNJLE1BQU0sSUFBSUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDO0lBQzVDO0VBQ0o7RUFDQTtFQUNBLElBQUlDLFdBQVcsR0FBR2hCLE1BQU0sQ0FBQ2lCLFFBQVE7RUFDakMsSUFBSUMsU0FBUztFQUNiLElBQUlGLFdBQVcsS0FBSyxNQUFNLEVBQUU7SUFDeEJFLFNBQVMsR0FBR2xCLE1BQU0sQ0FBQ21CLFFBQVEsQ0FBQyxDQUFDLENBQUNDLE1BQU07RUFDeEM7RUFDQSxJQUFJTixVQUFVLEdBQUdqQiwwREFBUSxDQUFDcUIsU0FBUyxJQUFJLEVBQUUsQ0FBQyxJQUN0Q3JCLDBEQUFRLENBQUNtQixXQUFXLElBQUksRUFBRSxDQUFDLElBQzNCbkIsMERBQVEsQ0FBQyxFQUFFLENBQUN3QixNQUFNLENBQUNMLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUN4Q25CLDBEQUFRLENBQUMsS0FBSyxDQUFDO0VBQ25CLE9BQU9pQixVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3hCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFETUlOXFxPbmVEcml2ZVxcRGVza3RvcFxcSW0gYSBiaXJkZGRkZGRkXFxub2RlX21vZHVsZXNcXEBmb3JtYXRqc1xcaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyXFxsaWJcXGRhdGUtdGltZS1wYXR0ZXJuLWdlbmVyYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0aW1lRGF0YSB9IGZyb20gJy4vdGltZS1kYXRhLmdlbmVyYXRlZCc7XG4vKipcbiAqIFJldHVybnMgdGhlIGJlc3QgbWF0Y2hpbmcgZGF0ZSB0aW1lIHBhdHRlcm4gaWYgYSBkYXRlIHRpbWUgc2tlbGV0b25cbiAqIHBhdHRlcm4gaXMgcHJvdmlkZWQgd2l0aCBhIGxvY2FsZS4gRm9sbG93cyB0aGUgVW5pY29kZSBzcGVjaWZpY2F0aW9uOlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCN0YWJsZS1tYXBwaW5nLXJlcXVlc3RlZC10aW1lLXNrZWxldG9ucy10by1wYXR0ZXJuc1xuICogQHBhcmFtIHNrZWxldG9uIGRhdGUgdGltZSBza2VsZXRvbiBwYXR0ZXJuIHRoYXQgcG9zc2libHkgaW5jbHVkZXMgaiwgSiBvciBDXG4gKiBAcGFyYW0gbG9jYWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0UGF0dGVybihza2VsZXRvbiwgbG9jYWxlKSB7XG4gICAgdmFyIHNrZWxldG9uQ29weSA9ICcnO1xuICAgIGZvciAodmFyIHBhdHRlcm5Qb3MgPSAwOyBwYXR0ZXJuUG9zIDwgc2tlbGV0b24ubGVuZ3RoOyBwYXR0ZXJuUG9zKyspIHtcbiAgICAgICAgdmFyIHBhdHRlcm5DaGFyID0gc2tlbGV0b24uY2hhckF0KHBhdHRlcm5Qb3MpO1xuICAgICAgICBpZiAocGF0dGVybkNoYXIgPT09ICdqJykge1xuICAgICAgICAgICAgdmFyIGV4dHJhTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChwYXR0ZXJuUG9zICsgMSA8IHNrZWxldG9uLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIHNrZWxldG9uLmNoYXJBdChwYXR0ZXJuUG9zICsgMSkgPT09IHBhdHRlcm5DaGFyKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFMZW5ndGgrKztcbiAgICAgICAgICAgICAgICBwYXR0ZXJuUG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaG91ckxlbiA9IDEgKyAoZXh0cmFMZW5ndGggJiAxKTtcbiAgICAgICAgICAgIHZhciBkYXlQZXJpb2RMZW4gPSBleHRyYUxlbmd0aCA8IDIgPyAxIDogMyArIChleHRyYUxlbmd0aCA+PiAxKTtcbiAgICAgICAgICAgIHZhciBkYXlQZXJpb2RDaGFyID0gJ2EnO1xuICAgICAgICAgICAgdmFyIGhvdXJDaGFyID0gZ2V0RGVmYXVsdEhvdXJTeW1ib2xGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgICAgICAgICBpZiAoaG91ckNoYXIgPT0gJ0gnIHx8IGhvdXJDaGFyID09ICdrJykge1xuICAgICAgICAgICAgICAgIGRheVBlcmlvZExlbiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoZGF5UGVyaW9kTGVuLS0gPiAwKSB7XG4gICAgICAgICAgICAgICAgc2tlbGV0b25Db3B5ICs9IGRheVBlcmlvZENoYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoaG91ckxlbi0tID4gMCkge1xuICAgICAgICAgICAgICAgIHNrZWxldG9uQ29weSA9IGhvdXJDaGFyICsgc2tlbGV0b25Db3B5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhdHRlcm5DaGFyID09PSAnSicpIHtcbiAgICAgICAgICAgIHNrZWxldG9uQ29weSArPSAnSCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBza2VsZXRvbkNvcHkgKz0gcGF0dGVybkNoYXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNrZWxldG9uQ29weTtcbn1cbi8qKlxuICogTWFwcyB0aGUgW2hvdXIgY3ljbGUgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bC9Mb2NhbGUvaG91ckN5Y2xlKVxuICogb2YgdGhlIGdpdmVuIGBsb2NhbGVgIHRvIHRoZSBjb3JyZXNwb25kaW5nIHRpbWUgcGF0dGVybi5cbiAqIEBwYXJhbSBsb2NhbGVcbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEhvdXJTeW1ib2xGcm9tTG9jYWxlKGxvY2FsZSkge1xuICAgIHZhciBob3VyQ3ljbGUgPSBsb2NhbGUuaG91ckN5Y2xlO1xuICAgIGlmIChob3VyQ3ljbGUgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAvLyBAdHMtaWdub3JlIGhvdXJDeWNsZShzKSBpcyBub3QgaWRlbnRpZmllZCB5ZXRcbiAgICAgICAgbG9jYWxlLmhvdXJDeWNsZXMgJiZcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBsb2NhbGUuaG91ckN5Y2xlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBob3VyQ3ljbGUgPSBsb2NhbGUuaG91ckN5Y2xlc1swXTtcbiAgICB9XG4gICAgaWYgKGhvdXJDeWNsZSkge1xuICAgICAgICBzd2l0Y2ggKGhvdXJDeWNsZSkge1xuICAgICAgICAgICAgY2FzZSAnaDI0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2snO1xuICAgICAgICAgICAgY2FzZSAnaDIzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0gnO1xuICAgICAgICAgICAgY2FzZSAnaDEyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2gnO1xuICAgICAgICAgICAgY2FzZSAnaDExJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0snO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaG91ckN5Y2xlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVE9ETzogT25jZSBob3VyQ3ljbGUgaXMgZnVsbHkgc3VwcG9ydGVkIHJlbW92ZSB0aGUgZm9sbG93aW5nIHdpdGggZGF0YSBnZW5lcmF0aW9uXG4gICAgdmFyIGxhbmd1YWdlVGFnID0gbG9jYWxlLmxhbmd1YWdlO1xuICAgIHZhciByZWdpb25UYWc7XG4gICAgaWYgKGxhbmd1YWdlVGFnICE9PSAncm9vdCcpIHtcbiAgICAgICAgcmVnaW9uVGFnID0gbG9jYWxlLm1heGltaXplKCkucmVnaW9uO1xuICAgIH1cbiAgICB2YXIgaG91ckN5Y2xlcyA9IHRpbWVEYXRhW3JlZ2lvblRhZyB8fCAnJ10gfHxcbiAgICAgICAgdGltZURhdGFbbGFuZ3VhZ2VUYWcgfHwgJyddIHx8XG4gICAgICAgIHRpbWVEYXRhW1wiXCIuY29uY2F0KGxhbmd1YWdlVGFnLCBcIi0wMDFcIildIHx8XG4gICAgICAgIHRpbWVEYXRhWycwMDEnXTtcbiAgICByZXR1cm4gaG91ckN5Y2xlc1swXTtcbn1cbiJdLCJuYW1lcyI6WyJ0aW1lRGF0YSIsImdldEJlc3RQYXR0ZXJuIiwic2tlbGV0b24iLCJsb2NhbGUiLCJza2VsZXRvbkNvcHkiLCJwYXR0ZXJuUG9zIiwibGVuZ3RoIiwicGF0dGVybkNoYXIiLCJjaGFyQXQiLCJleHRyYUxlbmd0aCIsImhvdXJMZW4iLCJkYXlQZXJpb2RMZW4iLCJkYXlQZXJpb2RDaGFyIiwiaG91ckNoYXIiLCJnZXREZWZhdWx0SG91clN5bWJvbEZyb21Mb2NhbGUiLCJob3VyQ3ljbGUiLCJ1bmRlZmluZWQiLCJob3VyQ3ljbGVzIiwiRXJyb3IiLCJsYW5ndWFnZVRhZyIsImxhbmd1YWdlIiwicmVnaW9uVGFnIiwibWF4aW1pemUiLCJyZWdpb24iLCJjb25jYXQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorKind: () => (/* binding */ ErrorKind)\n/* harmony export */ });\nvar ErrorKind;\n(function (ErrorKind) {\n  /** Argument is unclosed (e.g. `{0`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n  /** Argument is empty (e.g. `{}`). */\n  ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n  /** Argument is malformed (e.g. `{foo!}``) */\n  ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n  /** Expect an argument type (e.g. `{foo,}`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n  /** Unsupported argument type (e.g. `{foo,foo}`) */\n  ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n  /** Expect an argument style (e.g. `{foo, number, }`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n  /** The number skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n  /** The date time skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n  /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n  /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n  /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n  /** Missing select argument options (e.g. `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n  /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n  /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n  /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n  /**\n   * Expecting a message fragment after the `plural` or `selectordinal` selector\n   * (e.g. `{foo, plural, one}`)\n   */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n  /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n  /**\n   * Duplicate selectors in `plural` or `selectordinal` argument.\n   * (e.g. {foo, plural, one {#} one {#}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n  /** Duplicate selectors in `select` argument.\n   * (e.g. {foo, select, apple {apple} apple {apple}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n  /** Plural or select argument option must have `other` clause. */\n  ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n  /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n  ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n  /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n  ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n  /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n  ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n  /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.TYPE),\n/* harmony export */   _Parser: () => (/* binding */ _Parser),\n/* harmony export */   createLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isArgumentElement),\n/* harmony export */   isDateElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement),\n/* harmony export */   isPoundElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPoundElement),\n/* harmony export */   isSelectElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement),\n/* harmony export */   isStructurallySame: () => (/* reexport safe */ _manipulator__WEBPACK_IMPORTED_MODULE_4__.isStructurallySame),\n/* harmony export */   isTagElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTagElement),\n/* harmony export */   isTimeElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _manipulator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./manipulator */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js\");\n\n\n\n\nfunction pruneLocation(els) {\n  els.forEach(function (el) {\n    delete el.location;\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement)(el)) {\n      for (var k in el.options) {\n        delete el.options[k].location;\n        pruneLocation(el.options[k].value);\n      }\n    } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement)(el) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton)(el.style)) {\n      delete el.style.location;\n    } else if (((0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement)(el)) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton)(el.style)) {\n      delete el.style.location;\n    } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isTagElement)(el)) {\n      pruneLocation(el.children);\n    }\n  });\n}\nfunction parse(message, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  opts = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n    shouldParseSkeletons: true,\n    requiresOtherClause: true\n  }, opts);\n  var result = new _parser__WEBPACK_IMPORTED_MODULE_1__.Parser(message, opts).parse();\n  if (result.err) {\n    var error = SyntaxError(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind[result.err.kind]);\n    // @ts-expect-error Assign to error object\n    error.location = result.err.location;\n    // @ts-expect-error Assign to error object\n    error.originalMessage = result.err.message;\n    throw error;\n  }\n  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n    pruneLocation(result.val);\n  }\n  return result.val;\n}\n\n// only for testing\nvar _Parser = _parser__WEBPACK_IMPORTED_MODULE_1__.Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ0c7QUFDRjtBQUM2SDtBQUMvSixTQUFTVyxhQUFhQSxDQUFDQyxHQUFHLEVBQUU7RUFDeEJBLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLFVBQVVDLEVBQUUsRUFBRTtJQUN0QixPQUFPQSxFQUFFLENBQUNDLFFBQVE7SUFDbEIsSUFBSVAsdURBQWUsQ0FBQ00sRUFBRSxDQUFDLElBQUlQLHVEQUFlLENBQUNPLEVBQUUsQ0FBQyxFQUFFO01BQzVDLEtBQUssSUFBSUUsQ0FBQyxJQUFJRixFQUFFLENBQUNHLE9BQU8sRUFBRTtRQUN0QixPQUFPSCxFQUFFLENBQUNHLE9BQU8sQ0FBQ0QsQ0FBQyxDQUFDLENBQUNELFFBQVE7UUFDN0JKLGFBQWEsQ0FBQ0csRUFBRSxDQUFDRyxPQUFPLENBQUNELENBQUMsQ0FBQyxDQUFDRSxLQUFLLENBQUM7TUFDdEM7SUFDSixDQUFDLE1BQ0ksSUFBSWIsdURBQWUsQ0FBQ1MsRUFBRSxDQUFDLElBQUlSLHdEQUFnQixDQUFDUSxFQUFFLENBQUNLLEtBQUssQ0FBQyxFQUFFO01BQ3hELE9BQU9MLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDSixRQUFRO0lBQzVCLENBQUMsTUFDSSxJQUFJLENBQUNaLHFEQUFhLENBQUNXLEVBQUUsQ0FBQyxJQUFJSixxREFBYSxDQUFDSSxFQUFFLENBQUMsS0FDNUNWLDBEQUFrQixDQUFDVSxFQUFFLENBQUNLLEtBQUssQ0FBQyxFQUFFO01BQzlCLE9BQU9MLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDSixRQUFRO0lBQzVCLENBQUMsTUFDSSxJQUFJTixvREFBWSxDQUFDSyxFQUFFLENBQUMsRUFBRTtNQUN2QkgsYUFBYSxDQUFDRyxFQUFFLENBQUNNLFFBQVEsQ0FBQztJQUM5QjtFQUNKLENBQUMsQ0FBQztBQUNOO0FBQ08sU0FBU0MsS0FBS0EsQ0FBQ0MsT0FBTyxFQUFFQyxJQUFJLEVBQUU7RUFDakMsSUFBSUEsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0lBQUVBLElBQUksR0FBRyxDQUFDLENBQUM7RUFBRTtFQUNsQ0EsSUFBSSxHQUFHdkIsK0NBQVEsQ0FBQztJQUFFd0Isb0JBQW9CLEVBQUUsSUFBSTtJQUFFQyxtQkFBbUIsRUFBRTtFQUFLLENBQUMsRUFBRUYsSUFBSSxDQUFDO0VBQ2hGLElBQUlHLE1BQU0sR0FBRyxJQUFJeEIsMkNBQU0sQ0FBQ29CLE9BQU8sRUFBRUMsSUFBSSxDQUFDLENBQUNGLEtBQUssQ0FBQyxDQUFDO0VBQzlDLElBQUlLLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFO0lBQ1osSUFBSUMsS0FBSyxHQUFHQyxXQUFXLENBQUM1Qiw2Q0FBUyxDQUFDeUIsTUFBTSxDQUFDQyxHQUFHLENBQUNHLElBQUksQ0FBQyxDQUFDO0lBQ25EO0lBQ0FGLEtBQUssQ0FBQ2IsUUFBUSxHQUFHVyxNQUFNLENBQUNDLEdBQUcsQ0FBQ1osUUFBUTtJQUNwQztJQUNBYSxLQUFLLENBQUNHLGVBQWUsR0FBR0wsTUFBTSxDQUFDQyxHQUFHLENBQUNMLE9BQU87SUFDMUMsTUFBTU0sS0FBSztFQUNmO0VBQ0EsSUFBSSxFQUFFTCxJQUFJLEtBQUssSUFBSSxJQUFJQSxJQUFJLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLElBQUksQ0FBQ1MsZUFBZSxDQUFDLEVBQUU7SUFDckVyQixhQUFhLENBQUNlLE1BQU0sQ0FBQ08sR0FBRyxDQUFDO0VBQzdCO0VBQ0EsT0FBT1AsTUFBTSxDQUFDTyxHQUFHO0FBQ3JCO0FBQ3dCO0FBQ3hCO0FBQ08sSUFBSUMsT0FBTyxHQUFHaEMsMkNBQU0iLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQURNSU5cXE9uZURyaXZlXFxEZXNrdG9wXFxJbSBhIGJpcmRkZGRkZGRcXG5vZGVfbW9kdWxlc1xcQGZvcm1hdGpzXFxpY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXJcXGxpYlxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEVycm9yS2luZCB9IGZyb20gJy4vZXJyb3InO1xuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnLi9wYXJzZXInO1xuaW1wb3J0IHsgaXNEYXRlRWxlbWVudCwgaXNEYXRlVGltZVNrZWxldG9uLCBpc051bWJlckVsZW1lbnQsIGlzTnVtYmVyU2tlbGV0b24sIGlzUGx1cmFsRWxlbWVudCwgaXNTZWxlY3RFbGVtZW50LCBpc1RhZ0VsZW1lbnQsIGlzVGltZUVsZW1lbnQsIH0gZnJvbSAnLi90eXBlcyc7XG5mdW5jdGlvbiBwcnVuZUxvY2F0aW9uKGVscykge1xuICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBkZWxldGUgZWwubG9jYXRpb247XG4gICAgICAgIGlmIChpc1NlbGVjdEVsZW1lbnQoZWwpIHx8IGlzUGx1cmFsRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gZWwub3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbC5vcHRpb25zW2tdLmxvY2F0aW9uO1xuICAgICAgICAgICAgICAgIHBydW5lTG9jYXRpb24oZWwub3B0aW9uc1trXS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNOdW1iZXJFbGVtZW50KGVsKSAmJiBpc051bWJlclNrZWxldG9uKGVsLnN0eWxlKSkge1xuICAgICAgICAgICAgZGVsZXRlIGVsLnN0eWxlLmxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChpc0RhdGVFbGVtZW50KGVsKSB8fCBpc1RpbWVFbGVtZW50KGVsKSkgJiZcbiAgICAgICAgICAgIGlzRGF0ZVRpbWVTa2VsZXRvbihlbC5zdHlsZSkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBlbC5zdHlsZS5sb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1RhZ0VsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICBwcnVuZUxvY2F0aW9uKGVsLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKG1lc3NhZ2UsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSB7fTsgfVxuICAgIG9wdHMgPSBfX2Fzc2lnbih7IHNob3VsZFBhcnNlU2tlbGV0b25zOiB0cnVlLCByZXF1aXJlc090aGVyQ2xhdXNlOiB0cnVlIH0sIG9wdHMpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgUGFyc2VyKG1lc3NhZ2UsIG9wdHMpLnBhcnNlKCk7XG4gICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgdmFyIGVycm9yID0gU3ludGF4RXJyb3IoRXJyb3JLaW5kW3Jlc3VsdC5lcnIua2luZF0pO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEFzc2lnbiB0byBlcnJvciBvYmplY3RcbiAgICAgICAgZXJyb3IubG9jYXRpb24gPSByZXN1bHQuZXJyLmxvY2F0aW9uO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEFzc2lnbiB0byBlcnJvciBvYmplY3RcbiAgICAgICAgZXJyb3Iub3JpZ2luYWxNZXNzYWdlID0gcmVzdWx0LmVyci5tZXNzYWdlO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgaWYgKCEob3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLmNhcHR1cmVMb2NhdGlvbikpIHtcbiAgICAgICAgcHJ1bmVMb2NhdGlvbihyZXN1bHQudmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC52YWw7XG59XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJztcbi8vIG9ubHkgZm9yIHRlc3RpbmdcbmV4cG9ydCB2YXIgX1BhcnNlciA9IFBhcnNlcjtcbmV4cG9ydCB7IGlzU3RydWN0dXJhbGx5U2FtZSB9IGZyb20gJy4vbWFuaXB1bGF0b3InO1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiRXJyb3JLaW5kIiwiUGFyc2VyIiwiaXNEYXRlRWxlbWVudCIsImlzRGF0ZVRpbWVTa2VsZXRvbiIsImlzTnVtYmVyRWxlbWVudCIsImlzTnVtYmVyU2tlbGV0b24iLCJpc1BsdXJhbEVsZW1lbnQiLCJpc1NlbGVjdEVsZW1lbnQiLCJpc1RhZ0VsZW1lbnQiLCJpc1RpbWVFbGVtZW50IiwicHJ1bmVMb2NhdGlvbiIsImVscyIsImZvckVhY2giLCJlbCIsImxvY2F0aW9uIiwiayIsIm9wdGlvbnMiLCJ2YWx1ZSIsInN0eWxlIiwiY2hpbGRyZW4iLCJwYXJzZSIsIm1lc3NhZ2UiLCJvcHRzIiwic2hvdWxkUGFyc2VTa2VsZXRvbnMiLCJyZXF1aXJlc090aGVyQ2xhdXNlIiwicmVzdWx0IiwiZXJyIiwiZXJyb3IiLCJTeW50YXhFcnJvciIsImtpbmQiLCJvcmlnaW5hbE1lc3NhZ2UiLCJjYXB0dXJlTG9jYXRpb24iLCJ2YWwiLCJfUGFyc2VyIiwiaXNTdHJ1Y3R1cmFsbHlTYW1lIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hoistSelectors: () => (/* binding */ hoistSelectors),\n/* harmony export */   isStructurallySame: () => (/* binding */ isStructurallySame)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n\n\nfunction cloneDeep(obj) {\n  if (Array.isArray(obj)) {\n    // @ts-expect-error meh\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], obj.map(cloneDeep), true);\n  }\n  if (obj !== null && typeof obj === 'object') {\n    // @ts-expect-error meh\n    return Object.keys(obj).reduce(function (cloned, k) {\n      // @ts-expect-error meh\n      cloned[k] = cloneDeep(obj[k]);\n      return cloned;\n    }, {});\n  }\n  return obj;\n}\nfunction hoistPluralOrSelectElement(ast, el, positionToInject) {\n  // pull this out of the ast and move it to the top\n  var cloned = cloneDeep(el);\n  var options = cloned.options;\n  cloned.options = Object.keys(options).reduce(function (all, k) {\n    var newValue = hoistSelectors((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], ast.slice(0, positionToInject), true), options[k].value, true), ast.slice(positionToInject + 1), true));\n    all[k] = {\n      value: newValue\n    };\n    return all;\n  }, {});\n  return cloned;\n}\nfunction isPluralOrSelectElement(el) {\n  return (0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el);\n}\nfunction findPluralOrSelectElement(ast) {\n  return !!ast.find(function (el) {\n    if (isPluralOrSelectElement(el)) {\n      return true;\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      return findPluralOrSelectElement(el.children);\n    }\n    return false;\n  });\n}\n/**\n * Hoist all selectors to the beginning of the AST & flatten the\n * resulting options. E.g:\n * \"I have {count, plural, one{a dog} other{many dogs}}\"\n * becomes \"{count, plural, one{I have a dog} other{I have many dogs}}\".\n * If there are multiple selectors, the order of which one is hoisted 1st\n * is non-deterministic.\n * The goal is to provide as many full sentences as possible since fragmented\n * sentences are not translator-friendly\n * @param ast AST\n */\nfunction hoistSelectors(ast) {\n  for (var i = 0; i < ast.length; i++) {\n    var el = ast[i];\n    if (isPluralOrSelectElement(el)) {\n      return [hoistPluralOrSelectElement(ast, el, i)];\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el) && findPluralOrSelectElement([el])) {\n      throw new Error('Cannot hoist plural/select within a tag element. Please put the tag element inside each plural/select option');\n    }\n  }\n  return ast;\n}\n/**\n * Collect all variables in an AST to Record<string, TYPE>\n * @param ast AST to collect variables from\n * @param vars Record of variable name to variable type\n */\nfunction collectVariables(ast, vars) {\n  if (vars === void 0) {\n    vars = new Map();\n  }\n  ast.forEach(function (el) {\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n      if (el.value in vars && vars.get(el.value) !== el.type) {\n        throw new Error(\"Variable \".concat(el.value, \" has conflicting types\"));\n      }\n      vars.set(el.value, el.type);\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n      vars.set(el.value, el.type);\n      Object.keys(el.options).forEach(function (k) {\n        collectVariables(el.options[k].value, vars);\n      });\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      vars.set(el.value, el.type);\n      collectVariables(el.children, vars);\n    }\n  });\n}\n/**\n * Check if 2 ASTs are structurally the same. This primarily means that\n * they have the same variables with the same type\n * @param a\n * @param b\n * @returns\n */\nfunction isStructurallySame(a, b) {\n  var aVars = new Map();\n  var bVars = new Map();\n  collectVariables(a, aVars);\n  collectVariables(b, bVars);\n  if (aVars.size !== bVars.size) {\n    return {\n      success: false,\n      error: new Error(\"Different number of variables: [\".concat(Array.from(aVars.keys()).join(', '), \"] vs [\").concat(Array.from(bVars.keys()).join(', '), \"]\"))\n    };\n  }\n  return Array.from(aVars.entries()).reduce(function (result, _a) {\n    var key = _a[0],\n      type = _a[1];\n    if (!result.success) {\n      return result;\n    }\n    var bType = bVars.get(key);\n    if (bType == null) {\n      return {\n        success: false,\n        error: new Error(\"Missing variable \".concat(key, \" in message\"))\n      };\n    }\n    if (bType !== type) {\n      return {\n        success: false,\n        error: new Error(\"Variable \".concat(key, \" has conflicting types: \").concat(_types__WEBPACK_IMPORTED_MODULE_0__.TYPE[type], \" vs \").concat(_types__WEBPACK_IMPORTED_MODULE_0__.TYPE[bType]))\n      };\n    }\n    return result;\n  }, {\n    success: true\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(rsc)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regex.generated */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\");\n/* harmony import */ var _formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/icu-skeleton-parser */ \"(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/index.js\");\n/* harmony import */ var _date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-time-pattern-generator */ \"(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\");\nvar _a;\n\n\n\n\n\n\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*\"));\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(\"\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*$\"));\nfunction createLocation(start, end) {\n  return {\n    start: start,\n    end: end\n  };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith && '_a'.startsWith('a', 1);\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function (n) {\n  return typeof n === 'number' && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 0x1fffffffffffff;\n};\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n  var re = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  /**\n   * legacy Edge or Xbox One browser\n   * Unicode flag support: supported\n   * Pattern_Syntax support: not supported\n   * See https://github.com/formatjs/formatjs/issues/2822\n   */\n  REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';\n} catch (_) {\n  REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith ?\n// Native\nfunction startsWith(s, search, position) {\n  return s.startsWith(search, position);\n} :\n// For IE11\nfunction startsWith(s, search, position) {\n  return s.slice(position, position + search.length) === search;\n};\nvar fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint :\n// IE11\nfunction fromCodePoint() {\n  var codePoints = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    codePoints[_i] = arguments[_i];\n  }\n  var elements = '';\n  var length = codePoints.length;\n  var i = 0;\n  var code;\n  while (length > i) {\n    code = codePoints[i++];\n    if (code > 0x10ffff) throw RangeError(code + ' is not a valid code point');\n    elements += code < 0x10000 ? String.fromCharCode(code) : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00);\n  }\n  return elements;\n};\nvar fromEntries =\n// native\nhasNativeFromEntries ? Object.fromEntries :\n// Ponyfill\nfunction fromEntries(entries) {\n  var obj = {};\n  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _a = entries_1[_i],\n      k = _a[0],\n      v = _a[1];\n    obj[k] = v;\n  }\n  return obj;\n};\nvar codePointAt = hasNativeCodePointAt ?\n// Native\nfunction codePointAt(s, index) {\n  return s.codePointAt(index);\n} :\n// IE 11\nfunction codePointAt(s, index) {\n  var size = s.length;\n  if (index < 0 || index >= size) {\n    return undefined;\n  }\n  var first = s.charCodeAt(index);\n  var second;\n  return first < 0xd800 || first > 0xdbff || index + 1 === size || (second = s.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? first : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;\n};\nvar trimStart = hasTrimStart ?\n// Native\nfunction trimStart(s) {\n  return s.trimStart();\n} :\n// Ponyfill\nfunction trimStart(s) {\n  return s.replace(SPACE_SEPARATOR_START_REGEX, '');\n};\nvar trimEnd = hasTrimEnd ?\n// Native\nfunction trimEnd(s) {\n  return s.trimEnd();\n} :\n// Ponyfill\nfunction trimEnd(s) {\n  return s.replace(SPACE_SEPARATOR_END_REGEX, '');\n};\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n  return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n  // Native\n  var IDENTIFIER_PREFIX_RE_1 = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var _a;\n    IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n    var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n    return (_a = match[1]) !== null && _a !== void 0 ? _a : '';\n  };\n} else {\n  // IE11\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var match = [];\n    while (true) {\n      var c = codePointAt(s, index);\n      if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n        break;\n      }\n      match.push(c);\n      index += c >= 0x10000 ? 2 : 1;\n    }\n    return fromCodePoint.apply(void 0, match);\n  };\n}\nvar Parser = /** @class */function () {\n  function Parser(message, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.message = message;\n    this.position = {\n      offset: 0,\n      line: 1,\n      column: 1\n    };\n    this.ignoreTag = !!options.ignoreTag;\n    this.locale = options.locale;\n    this.requiresOtherClause = !!options.requiresOtherClause;\n    this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n  }\n  Parser.prototype.parse = function () {\n    if (this.offset() !== 0) {\n      throw Error('parser can only be used once');\n    }\n    return this.parseMessage(0, '', false);\n  };\n  Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {\n    var elements = [];\n    while (!this.isEOF()) {\n      var char = this.char();\n      if (char === 123 /* `{` */) {\n        var result = this.parseArgument(nestingLevel, expectingCloseTag);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      } else if (char === 125 /* `}` */ && nestingLevel > 0) {\n        break;\n      } else if (char === 35 /* `#` */ && (parentArgType === 'plural' || parentArgType === 'selectordinal')) {\n        var position = this.clonePosition();\n        this.bump();\n        elements.push({\n          type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.pound,\n          location: createLocation(position, this.clonePosition())\n        });\n      } else if (char === 60 /* `<` */ && !this.ignoreTag && this.peek() === 47 // char code for '/'\n      ) {\n        if (expectingCloseTag) {\n          break;\n        } else {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n      } else if (char === 60 /* `<` */ && !this.ignoreTag && _isAlpha(this.peek() || 0)) {\n        var result = this.parseTag(nestingLevel, parentArgType);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      } else {\n        var result = this.parseLiteral(nestingLevel, parentArgType);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      }\n    }\n    return {\n      val: elements,\n      err: null\n    };\n  };\n  /**\n   * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n   * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n   * are accepted:\n   *\n   * ```\n   * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n   * tagName ::= [a-z] (PENChar)*\n   * PENChar ::=\n   *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n   *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n   *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n   * ```\n   *\n   * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n   * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n   * since other tag-based engines like React allow it\n   */\n  Parser.prototype.parseTag = function (nestingLevel, parentArgType) {\n    var startPosition = this.clonePosition();\n    this.bump(); // `<`\n    var tagName = this.parseTagName();\n    this.bumpSpace();\n    if (this.bumpIf('/>')) {\n      // Self closing tag\n      return {\n        val: {\n          type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n          value: \"<\".concat(tagName, \"/>\"),\n          location: createLocation(startPosition, this.clonePosition())\n        },\n        err: null\n      };\n    } else if (this.bumpIf('>')) {\n      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n      if (childrenResult.err) {\n        return childrenResult;\n      }\n      var children = childrenResult.val;\n      // Expecting a close tag\n      var endTagStartPosition = this.clonePosition();\n      if (this.bumpIf('</')) {\n        if (this.isEOF() || !_isAlpha(this.char())) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n        var closingTagNameStartPosition = this.clonePosition();\n        var closingTagName = this.parseTagName();\n        if (tagName !== closingTagName) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (!this.bumpIf('>')) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n        return {\n          val: {\n            type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.tag,\n            value: tagName,\n            children: children,\n            location: createLocation(startPosition, this.clonePosition())\n          },\n          err: null\n        };\n      } else {\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n      }\n    } else {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n    }\n  };\n  /**\n   * This method assumes that the caller has peeked ahead for the first tag character.\n   */\n  Parser.prototype.parseTagName = function () {\n    var startOffset = this.offset();\n    this.bump(); // the first tag name character\n    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {\n      this.bump();\n    }\n    return this.message.slice(startOffset, this.offset());\n  };\n  Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {\n    var start = this.clonePosition();\n    var value = '';\n    while (true) {\n      var parseQuoteResult = this.tryParseQuote(parentArgType);\n      if (parseQuoteResult) {\n        value += parseQuoteResult;\n        continue;\n      }\n      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n      if (parseUnquotedResult) {\n        value += parseUnquotedResult;\n        continue;\n      }\n      var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n      if (parseLeftAngleResult) {\n        value += parseLeftAngleResult;\n        continue;\n      }\n      break;\n    }\n    var location = createLocation(start, this.clonePosition());\n    return {\n      val: {\n        type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n        value: value,\n        location: location\n      },\n      err: null\n    };\n  };\n  Parser.prototype.tryParseLeftAngleBracket = function () {\n    if (!this.isEOF() && this.char() === 60 /* `<` */ && (this.ignoreTag ||\n    // If at the opening tag or closing tag position, bail.\n    !_isAlphaOrSlash(this.peek() || 0))) {\n      this.bump(); // `<`\n      return '<';\n    }\n    return null;\n  };\n  /**\n   * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n   * a character that requires quoting (that is, \"only where needed\"), and works the same in\n   * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n   */\n  Parser.prototype.tryParseQuote = function (parentArgType) {\n    if (this.isEOF() || this.char() !== 39 /* `'` */) {\n      return null;\n    }\n    // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n    // Check if is valid escaped character\n    switch (this.peek()) {\n      case 39 /* `'` */:\n        // double quote, should return as a single quote.\n        this.bump();\n        this.bump();\n        return \"'\";\n      // '{', '<', '>', '}'\n      case 123:\n      case 60:\n      case 62:\n      case 125:\n        break;\n      case 35:\n        // '#'\n        if (parentArgType === 'plural' || parentArgType === 'selectordinal') {\n          break;\n        }\n        return null;\n      default:\n        return null;\n    }\n    this.bump(); // apostrophe\n    var codePoints = [this.char()]; // escaped char\n    this.bump();\n    // read chars until the optional closing apostrophe is found\n    while (!this.isEOF()) {\n      var ch = this.char();\n      if (ch === 39 /* `'` */) {\n        if (this.peek() === 39 /* `'` */) {\n          codePoints.push(39);\n          // Bump one more time because we need to skip 2 characters.\n          this.bump();\n        } else {\n          // Optional closing apostrophe.\n          this.bump();\n          break;\n        }\n      } else {\n        codePoints.push(ch);\n      }\n      this.bump();\n    }\n    return fromCodePoint.apply(void 0, codePoints);\n  };\n  Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {\n    if (this.isEOF()) {\n      return null;\n    }\n    var ch = this.char();\n    if (ch === 60 /* `<` */ || ch === 123 /* `{` */ || ch === 35 /* `#` */ && (parentArgType === 'plural' || parentArgType === 'selectordinal') || ch === 125 /* `}` */ && nestingLevel > 0) {\n      return null;\n    } else {\n      this.bump();\n      return fromCodePoint(ch);\n    }\n  };\n  Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {\n    var openingBracePosition = this.clonePosition();\n    this.bump(); // `{`\n    this.bumpSpace();\n    if (this.isEOF()) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    if (this.char() === 125 /* `}` */) {\n      this.bump();\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    // argument name\n    var value = this.parseIdentifierIfPossible().value;\n    if (!value) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    this.bumpSpace();\n    if (this.isEOF()) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    switch (this.char()) {\n      // Simple argument: `{name}`\n      case 125 /* `}` */:\n        {\n          this.bump(); // `}`\n          return {\n            val: {\n              type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.argument,\n              // value does not include the opening and closing braces.\n              value: value,\n              location: createLocation(openingBracePosition, this.clonePosition())\n            },\n            err: null\n          };\n        }\n      // Argument with options: `{name, format, ...}`\n      case 44 /* `,` */:\n        {\n          this.bump(); // `,`\n          this.bumpSpace();\n          if (this.isEOF()) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n          }\n          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n        }\n      default:\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n  };\n  /**\n   * Advance the parser until the end of the identifier, if it is currently on\n   * an identifier character. Return an empty string otherwise.\n   */\n  Parser.prototype.parseIdentifierIfPossible = function () {\n    var startingPosition = this.clonePosition();\n    var startOffset = this.offset();\n    var value = matchIdentifierAtIndex(this.message, startOffset);\n    var endOffset = startOffset + value.length;\n    this.bumpTo(endOffset);\n    var endPosition = this.clonePosition();\n    var location = createLocation(startingPosition, endPosition);\n    return {\n      value: value,\n      location: location\n    };\n  };\n  Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {\n    var _a;\n    // Parse this range:\n    // {name, type, style}\n    //        ^---^\n    var typeStartPosition = this.clonePosition();\n    var argType = this.parseIdentifierIfPossible().value;\n    var typeEndPosition = this.clonePosition();\n    switch (argType) {\n      case '':\n        // Expecting a style string number, date, time, plural, selectordinal, or select.\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n      case 'number':\n      case 'date':\n      case 'time':\n        {\n          // Parse this range:\n          // {name, number, style}\n          //              ^-------^\n          this.bumpSpace();\n          var styleAndLocation = null;\n          if (this.bumpIf(',')) {\n            this.bumpSpace();\n            var styleStartPosition = this.clonePosition();\n            var result = this.parseSimpleArgStyleIfPossible();\n            if (result.err) {\n              return result;\n            }\n            var style = trimEnd(result.val);\n            if (style.length === 0) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n            styleAndLocation = {\n              style: style,\n              styleLocation: styleLocation\n            };\n          }\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n          var location_1 = createLocation(openingBracePosition, this.clonePosition());\n          // Extract style or skeleton\n          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {\n            // Skeleton starts with `::`.\n            var skeleton = trimStart(styleAndLocation.style.slice(2));\n            if (argType === 'number') {\n              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n              if (result.err) {\n                return result;\n              }\n              return {\n                val: {\n                  type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number,\n                  value: value,\n                  location: location_1,\n                  style: result.val\n                },\n                err: null\n              };\n            } else {\n              if (skeleton.length === 0) {\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n              }\n              var dateTimePattern = skeleton;\n              // Get \"best match\" pattern only if locale is passed, if not, let it\n              // pass as-is where `parseDateTimeSkeleton()` will throw an error\n              // for unsupported patterns.\n              if (this.locale) {\n                dateTimePattern = (0,_date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__.getBestPattern)(skeleton, this.locale);\n              }\n              var style = {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.dateTime,\n                pattern: dateTimePattern,\n                location: styleAndLocation.styleLocation,\n                parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseDateTimeSkeleton)(dateTimePattern) : {}\n              };\n              var type = argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time;\n              return {\n                val: {\n                  type: type,\n                  value: value,\n                  location: location_1,\n                  style: style\n                },\n                err: null\n              };\n            }\n          }\n          // Regular style or no style.\n          return {\n            val: {\n              type: argType === 'number' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number : argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time,\n              value: value,\n              location: location_1,\n              style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null\n            },\n            err: null\n          };\n        }\n      case 'plural':\n      case 'selectordinal':\n      case 'select':\n        {\n          // Parse this range:\n          // {name, plural, options}\n          //              ^---------^\n          var typeEndPosition_1 = this.clonePosition();\n          this.bumpSpace();\n          if (!this.bumpIf(',')) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, typeEndPosition_1)));\n          }\n          this.bumpSpace();\n          // Parse offset:\n          // {name, plural, offset:1, options}\n          //                ^-----^\n          //\n          // or the first option:\n          //\n          // {name, plural, one {...} other {...}}\n          //                ^--^\n          var identifierAndLocation = this.parseIdentifierIfPossible();\n          var pluralOffset = 0;\n          if (argType !== 'select' && identifierAndLocation.value === 'offset') {\n            if (!this.bumpIf(':')) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            this.bumpSpace();\n            var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n            if (result.err) {\n              return result;\n            }\n            // Parse another identifier for option parsing\n            this.bumpSpace();\n            identifierAndLocation = this.parseIdentifierIfPossible();\n            pluralOffset = result.val;\n          }\n          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n          if (optionsResult.err) {\n            return optionsResult;\n          }\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n          var location_2 = createLocation(openingBracePosition, this.clonePosition());\n          if (argType === 'select') {\n            return {\n              val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.select,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                location: location_2\n              },\n              err: null\n            };\n          } else {\n            return {\n              val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.plural,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                offset: pluralOffset,\n                pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',\n                location: location_2\n              },\n              err: null\n            };\n          }\n        }\n      default:\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n    }\n  };\n  Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {\n    // Parse: {value, number, ::currency/GBP }\n    //\n    if (this.isEOF() || this.char() !== 125 /* `}` */) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    this.bump(); // `}`\n    return {\n      val: true,\n      err: null\n    };\n  };\n  /**\n   * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n   */\n  Parser.prototype.parseSimpleArgStyleIfPossible = function () {\n    var nestedBraces = 0;\n    var startPosition = this.clonePosition();\n    while (!this.isEOF()) {\n      var ch = this.char();\n      switch (ch) {\n        case 39 /* `'` */:\n          {\n            // Treat apostrophe as quoting but include it in the style part.\n            // Find the end of the quoted literal text.\n            this.bump();\n            var apostrophePosition = this.clonePosition();\n            if (!this.bumpUntil(\"'\")) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n            }\n            this.bump();\n            break;\n          }\n        case 123 /* `{` */:\n          {\n            nestedBraces += 1;\n            this.bump();\n            break;\n          }\n        case 125 /* `}` */:\n          {\n            if (nestedBraces > 0) {\n              nestedBraces -= 1;\n            } else {\n              return {\n                val: this.message.slice(startPosition.offset, this.offset()),\n                err: null\n              };\n            }\n            break;\n          }\n        default:\n          this.bump();\n          break;\n      }\n    }\n    return {\n      val: this.message.slice(startPosition.offset, this.offset()),\n      err: null\n    };\n  };\n  Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {\n    var tokens = [];\n    try {\n      tokens = (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeletonFromString)(skeleton);\n    } catch (e) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_NUMBER_SKELETON, location);\n    }\n    return {\n      val: {\n        type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.number,\n        tokens: tokens,\n        location: location,\n        parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeleton)(tokens) : {}\n      },\n      err: null\n    };\n  };\n  /**\n   * @param nesting_level The current nesting level of messages.\n   *     This can be positive when parsing message fragment in select or plural argument options.\n   * @param parent_arg_type The parent argument's type.\n   * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n   *     the argument. It is a by-product of a previous parsing attempt.\n   * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n   *     between a pair of opening and closing tags. The nested message will not parse beyond\n   *     the closing tag boundary.\n   */\n  Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n    var _a;\n    var hasOtherClause = false;\n    var options = [];\n    var parsedSelectors = new Set();\n    var selector = parsedFirstIdentifier.value,\n      selectorLocation = parsedFirstIdentifier.location;\n    // Parse:\n    // one {one apple}\n    // ^--^\n    while (true) {\n      if (selector.length === 0) {\n        var startPosition = this.clonePosition();\n        if (parentArgType !== 'select' && this.bumpIf('=')) {\n          // Try parse `={number}` selector\n          var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n          if (result.err) {\n            return result;\n          }\n          selectorLocation = createLocation(startPosition, this.clonePosition());\n          selector = this.message.slice(startPosition.offset, this.offset());\n        } else {\n          break;\n        }\n      }\n      // Duplicate selector clauses\n      if (parsedSelectors.has(selector)) {\n        return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n      }\n      if (selector === 'other') {\n        hasOtherClause = true;\n      }\n      // Parse:\n      // one {one apple}\n      //     ^----------^\n      this.bumpSpace();\n      var openingBracePosition = this.clonePosition();\n      if (!this.bumpIf('{')) {\n        return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n      }\n      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n      if (fragmentResult.err) {\n        return fragmentResult;\n      }\n      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n      if (argCloseResult.err) {\n        return argCloseResult;\n      }\n      options.push([selector, {\n        value: fragmentResult.val,\n        location: createLocation(openingBracePosition, this.clonePosition())\n      }]);\n      // Keep track of the existing selectors\n      parsedSelectors.add(selector);\n      // Prep next selector clause.\n      this.bumpSpace();\n      _a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location;\n    }\n    if (options.length === 0) {\n      return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n    if (this.requiresOtherClause && !hasOtherClause) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n    return {\n      val: options,\n      err: null\n    };\n  };\n  Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {\n    var sign = 1;\n    var startingPosition = this.clonePosition();\n    if (this.bumpIf('+')) {} else if (this.bumpIf('-')) {\n      sign = -1;\n    }\n    var hasDigits = false;\n    var decimal = 0;\n    while (!this.isEOF()) {\n      var ch = this.char();\n      if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {\n        hasDigits = true;\n        decimal = decimal * 10 + (ch - 48);\n        this.bump();\n      } else {\n        break;\n      }\n    }\n    var location = createLocation(startingPosition, this.clonePosition());\n    if (!hasDigits) {\n      return this.error(expectNumberError, location);\n    }\n    decimal *= sign;\n    if (!isSafeInteger(decimal)) {\n      return this.error(invalidNumberError, location);\n    }\n    return {\n      val: decimal,\n      err: null\n    };\n  };\n  Parser.prototype.offset = function () {\n    return this.position.offset;\n  };\n  Parser.prototype.isEOF = function () {\n    return this.offset() === this.message.length;\n  };\n  Parser.prototype.clonePosition = function () {\n    // This is much faster than `Object.assign` or spread.\n    return {\n      offset: this.position.offset,\n      line: this.position.line,\n      column: this.position.column\n    };\n  };\n  /**\n   * Return the code point at the current position of the parser.\n   * Throws if the index is out of bound.\n   */\n  Parser.prototype.char = function () {\n    var offset = this.position.offset;\n    if (offset >= this.message.length) {\n      throw Error('out of bound');\n    }\n    var code = codePointAt(this.message, offset);\n    if (code === undefined) {\n      throw Error(\"Offset \".concat(offset, \" is at invalid UTF-16 code unit boundary\"));\n    }\n    return code;\n  };\n  Parser.prototype.error = function (kind, location) {\n    return {\n      val: null,\n      err: {\n        kind: kind,\n        message: this.message,\n        location: location\n      }\n    };\n  };\n  /** Bump the parser to the next UTF-16 code unit. */\n  Parser.prototype.bump = function () {\n    if (this.isEOF()) {\n      return;\n    }\n    var code = this.char();\n    if (code === 10 /* '\\n' */) {\n      this.position.line += 1;\n      this.position.column = 1;\n      this.position.offset += 1;\n    } else {\n      this.position.column += 1;\n      // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n      this.position.offset += code < 0x10000 ? 1 : 2;\n    }\n  };\n  /**\n   * If the substring starting at the current position of the parser has\n   * the given prefix, then bump the parser to the character immediately\n   * following the prefix and return true. Otherwise, don't bump the parser\n   * and return false.\n   */\n  Parser.prototype.bumpIf = function (prefix) {\n    if (startsWith(this.message, prefix, this.offset())) {\n      for (var i = 0; i < prefix.length; i++) {\n        this.bump();\n      }\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Bump the parser until the pattern character is found and return `true`.\n   * Otherwise bump to the end of the file and return `false`.\n   */\n  Parser.prototype.bumpUntil = function (pattern) {\n    var currentOffset = this.offset();\n    var index = this.message.indexOf(pattern, currentOffset);\n    if (index >= 0) {\n      this.bumpTo(index);\n      return true;\n    } else {\n      this.bumpTo(this.message.length);\n      return false;\n    }\n  };\n  /**\n   * Bump the parser to the target offset.\n   * If target offset is beyond the end of the input, bump the parser to the end of the input.\n   */\n  Parser.prototype.bumpTo = function (targetOffset) {\n    if (this.offset() > targetOffset) {\n      throw Error(\"targetOffset \".concat(targetOffset, \" must be greater than or equal to the current offset \").concat(this.offset()));\n    }\n    targetOffset = Math.min(targetOffset, this.message.length);\n    while (true) {\n      var offset = this.offset();\n      if (offset === targetOffset) {\n        break;\n      }\n      if (offset > targetOffset) {\n        throw Error(\"targetOffset \".concat(targetOffset, \" is at invalid UTF-16 code unit boundary\"));\n      }\n      this.bump();\n      if (this.isEOF()) {\n        break;\n      }\n    }\n  };\n  /** advance the parser through all whitespace to the next non-whitespace code unit. */\n  Parser.prototype.bumpSpace = function () {\n    while (!this.isEOF() && _isWhiteSpace(this.char())) {\n      this.bump();\n    }\n  };\n  /**\n   * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n   * If the input has been exhausted, then this returns null.\n   */\n  Parser.prototype.peek = function () {\n    if (this.isEOF()) {\n      return null;\n    }\n    var code = this.char();\n    var offset = this.offset();\n    var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n    return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n  };\n  return Parser;\n}();\n\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */\nfunction _isAlpha(codepoint) {\n  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;\n}\nfunction _isAlphaOrSlash(codepoint) {\n  return _isAlpha(codepoint) || codepoint === 47; /* '/' */\n}\n/** See `parseTag` function docs. */\nfunction _isPotentialElementNameChar(c) {\n  return c === 45 /* '-' */ || c === 46 /* '.' */ || c >= 48 && c <= 57 /* 0..9 */ || c === 95 /* '_' */ || c >= 97 && c <= 122 /** a..z */ || c >= 65 && c <= 90 /* A..Z */ || c == 0xb7 || c >= 0xc0 && c <= 0xd6 || c >= 0xd8 && c <= 0xf6 || c >= 0xf8 && c <= 0x37d || c >= 0x37f && c <= 0x1fff || c >= 0x200c && c <= 0x200d || c >= 0x203f && c <= 0x2040 || c >= 0x2070 && c <= 0x218f || c >= 0x2c00 && c <= 0x2fef || c >= 0x3001 && c <= 0xd7ff || c >= 0xf900 && c <= 0xfdcf || c >= 0xfdf0 && c <= 0xfffd || c >= 0x10000 && c <= 0xeffff;\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isWhiteSpace(c) {\n  return c >= 0x0009 && c <= 0x000d || c === 0x0020 || c === 0x0085 || c >= 0x200e && c <= 0x200f || c === 0x2028 || c === 0x2029;\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isPatternSyntax(c) {\n  return c >= 0x0021 && c <= 0x0023 || c === 0x0024 || c >= 0x0025 && c <= 0x0027 || c === 0x0028 || c === 0x0029 || c === 0x002a || c === 0x002b || c === 0x002c || c === 0x002d || c >= 0x002e && c <= 0x002f || c >= 0x003a && c <= 0x003b || c >= 0x003c && c <= 0x003e || c >= 0x003f && c <= 0x0040 || c === 0x005b || c === 0x005c || c === 0x005d || c === 0x005e || c === 0x0060 || c === 0x007b || c === 0x007c || c === 0x007d || c === 0x007e || c === 0x00a1 || c >= 0x00a2 && c <= 0x00a5 || c === 0x00a6 || c === 0x00a7 || c === 0x00a9 || c === 0x00ab || c === 0x00ac || c === 0x00ae || c === 0x00b0 || c === 0x00b1 || c === 0x00b6 || c === 0x00bb || c === 0x00bf || c === 0x00d7 || c === 0x00f7 || c >= 0x2010 && c <= 0x2015 || c >= 0x2016 && c <= 0x2017 || c === 0x2018 || c === 0x2019 || c === 0x201a || c >= 0x201b && c <= 0x201c || c === 0x201d || c === 0x201e || c === 0x201f || c >= 0x2020 && c <= 0x2027 || c >= 0x2030 && c <= 0x2038 || c === 0x2039 || c === 0x203a || c >= 0x203b && c <= 0x203e || c >= 0x2041 && c <= 0x2043 || c === 0x2044 || c === 0x2045 || c === 0x2046 || c >= 0x2047 && c <= 0x2051 || c === 0x2052 || c === 0x2053 || c >= 0x2055 && c <= 0x205e || c >= 0x2190 && c <= 0x2194 || c >= 0x2195 && c <= 0x2199 || c >= 0x219a && c <= 0x219b || c >= 0x219c && c <= 0x219f || c === 0x21a0 || c >= 0x21a1 && c <= 0x21a2 || c === 0x21a3 || c >= 0x21a4 && c <= 0x21a5 || c === 0x21a6 || c >= 0x21a7 && c <= 0x21ad || c === 0x21ae || c >= 0x21af && c <= 0x21cd || c >= 0x21ce && c <= 0x21cf || c >= 0x21d0 && c <= 0x21d1 || c === 0x21d2 || c === 0x21d3 || c === 0x21d4 || c >= 0x21d5 && c <= 0x21f3 || c >= 0x21f4 && c <= 0x22ff || c >= 0x2300 && c <= 0x2307 || c === 0x2308 || c === 0x2309 || c === 0x230a || c === 0x230b || c >= 0x230c && c <= 0x231f || c >= 0x2320 && c <= 0x2321 || c >= 0x2322 && c <= 0x2328 || c === 0x2329 || c === 0x232a || c >= 0x232b && c <= 0x237b || c === 0x237c || c >= 0x237d && c <= 0x239a || c >= 0x239b && c <= 0x23b3 || c >= 0x23b4 && c <= 0x23db || c >= 0x23dc && c <= 0x23e1 || c >= 0x23e2 && c <= 0x2426 || c >= 0x2427 && c <= 0x243f || c >= 0x2440 && c <= 0x244a || c >= 0x244b && c <= 0x245f || c >= 0x2500 && c <= 0x25b6 || c === 0x25b7 || c >= 0x25b8 && c <= 0x25c0 || c === 0x25c1 || c >= 0x25c2 && c <= 0x25f7 || c >= 0x25f8 && c <= 0x25ff || c >= 0x2600 && c <= 0x266e || c === 0x266f || c >= 0x2670 && c <= 0x2767 || c === 0x2768 || c === 0x2769 || c === 0x276a || c === 0x276b || c === 0x276c || c === 0x276d || c === 0x276e || c === 0x276f || c === 0x2770 || c === 0x2771 || c === 0x2772 || c === 0x2773 || c === 0x2774 || c === 0x2775 || c >= 0x2794 && c <= 0x27bf || c >= 0x27c0 && c <= 0x27c4 || c === 0x27c5 || c === 0x27c6 || c >= 0x27c7 && c <= 0x27e5 || c === 0x27e6 || c === 0x27e7 || c === 0x27e8 || c === 0x27e9 || c === 0x27ea || c === 0x27eb || c === 0x27ec || c === 0x27ed || c === 0x27ee || c === 0x27ef || c >= 0x27f0 && c <= 0x27ff || c >= 0x2800 && c <= 0x28ff || c >= 0x2900 && c <= 0x2982 || c === 0x2983 || c === 0x2984 || c === 0x2985 || c === 0x2986 || c === 0x2987 || c === 0x2988 || c === 0x2989 || c === 0x298a || c === 0x298b || c === 0x298c || c === 0x298d || c === 0x298e || c === 0x298f || c === 0x2990 || c === 0x2991 || c === 0x2992 || c === 0x2993 || c === 0x2994 || c === 0x2995 || c === 0x2996 || c === 0x2997 || c === 0x2998 || c >= 0x2999 && c <= 0x29d7 || c === 0x29d8 || c === 0x29d9 || c === 0x29da || c === 0x29db || c >= 0x29dc && c <= 0x29fb || c === 0x29fc || c === 0x29fd || c >= 0x29fe && c <= 0x2aff || c >= 0x2b00 && c <= 0x2b2f || c >= 0x2b30 && c <= 0x2b44 || c >= 0x2b45 && c <= 0x2b46 || c >= 0x2b47 && c <= 0x2b4c || c >= 0x2b4d && c <= 0x2b73 || c >= 0x2b74 && c <= 0x2b75 || c >= 0x2b76 && c <= 0x2b95 || c === 0x2b96 || c >= 0x2b97 && c <= 0x2bff || c >= 0x2e00 && c <= 0x2e01 || c === 0x2e02 || c === 0x2e03 || c === 0x2e04 || c === 0x2e05 || c >= 0x2e06 && c <= 0x2e08 || c === 0x2e09 || c === 0x2e0a || c === 0x2e0b || c === 0x2e0c || c === 0x2e0d || c >= 0x2e0e && c <= 0x2e16 || c === 0x2e17 || c >= 0x2e18 && c <= 0x2e19 || c === 0x2e1a || c === 0x2e1b || c === 0x2e1c || c === 0x2e1d || c >= 0x2e1e && c <= 0x2e1f || c === 0x2e20 || c === 0x2e21 || c === 0x2e22 || c === 0x2e23 || c === 0x2e24 || c === 0x2e25 || c === 0x2e26 || c === 0x2e27 || c === 0x2e28 || c === 0x2e29 || c >= 0x2e2a && c <= 0x2e2e || c === 0x2e2f || c >= 0x2e30 && c <= 0x2e39 || c >= 0x2e3a && c <= 0x2e3b || c >= 0x2e3c && c <= 0x2e3f || c === 0x2e40 || c === 0x2e41 || c === 0x2e42 || c >= 0x2e43 && c <= 0x2e4f || c >= 0x2e50 && c <= 0x2e51 || c === 0x2e52 || c >= 0x2e53 && c <= 0x2e7f || c >= 0x3001 && c <= 0x3003 || c === 0x3008 || c === 0x3009 || c === 0x300a || c === 0x300b || c === 0x300c || c === 0x300d || c === 0x300e || c === 0x300f || c === 0x3010 || c === 0x3011 || c >= 0x3012 && c <= 0x3013 || c === 0x3014 || c === 0x3015 || c === 0x3016 || c === 0x3017 || c === 0x3018 || c === 0x3019 || c === 0x301a || c === 0x301b || c === 0x301c || c === 0x301d || c >= 0x301e && c <= 0x301f || c === 0x3020 || c === 0x3030 || c === 0xfd3e || c === 0xfd3f || c >= 0xfe45 && c <= 0xfe46;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL3BhcnNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBSUEsRUFBRTtBQUMyQjtBQUNHO0FBQ1c7QUFDVztBQUNpRTtBQUM1RDtBQUMvRCxJQUFJVSwyQkFBMkIsR0FBRyxJQUFJQyxNQUFNLENBQUMsR0FBRyxDQUFDQyxNQUFNLENBQUNQLG1FQUFxQixDQUFDUSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0YsSUFBSUMseUJBQXlCLEdBQUcsSUFBSUgsTUFBTSxDQUFDLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDUCxtRUFBcUIsQ0FBQ1EsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3pGLFNBQVNFLGNBQWNBLENBQUNDLEtBQUssRUFBRUMsR0FBRyxFQUFFO0VBQ2hDLE9BQU87SUFBRUQsS0FBSyxFQUFFQSxLQUFLO0lBQUVDLEdBQUcsRUFBRUE7RUFBSSxDQUFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLElBQUlDLG1CQUFtQixHQUFHLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNDLFVBQVUsSUFBSSxJQUFJLENBQUNBLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ2xGLElBQUlDLHNCQUFzQixHQUFHLENBQUMsQ0FBQ0gsTUFBTSxDQUFDSSxhQUFhO0FBQ25ELElBQUlDLG9CQUFvQixHQUFHLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXO0FBQy9DLElBQUlDLG9CQUFvQixHQUFHLENBQUMsQ0FBQ1IsTUFBTSxDQUFDQyxTQUFTLENBQUNRLFdBQVc7QUFDekQsSUFBSUMsWUFBWSxHQUFHLENBQUMsQ0FBQ1YsTUFBTSxDQUFDQyxTQUFTLENBQUNVLFNBQVM7QUFDL0MsSUFBSUMsVUFBVSxHQUFHLENBQUMsQ0FBQ1osTUFBTSxDQUFDQyxTQUFTLENBQUNZLE9BQU87QUFDM0MsSUFBSUMsc0JBQXNCLEdB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LE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksT0FBTyxJQUFJQSxDQUFDLElBQUksT0FBUTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsYUFBYUEsQ0FBQ0QsQ0FBQyxFQUFFO0VBQ3RCLE9BQVNBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFNLElBQy9CQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLGdCQUFnQkEsQ0FBQ0YsQ0FBQyxFQUFFO0VBQ3pCLE9BQVNBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFNLElBQy9CQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDM0JBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUMzQkEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzNCQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTyxJQUM1QkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWkEsQ0FBQyxLQUFLLE1BQU0sSUFDWEEsQ0FBQyxJQUFJLE1BQU0sSUFBSUEsQ0FBQyxJQUFJLE1BQU8sSUFDNUJBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1pBLENBQUMsS0FBSyxNQUFNLElBQ1hBLENBQUMsSUFBSSxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFPLElBQzVCQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNaQSxDQUFDLEtBQUssTUFBTSxJQUNYQSxDQUFDLElBQUksTUFBTSxJQUFJQSxDQUFDLElBQUksTUFBTztBQUNwQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBRE1JTlxcT25lRHJpdmVcXERlc2t0b3BcXEltIGEgYmlyZGRkZGRkZFxcbm9kZV9tb2R1bGVzXFxAZm9ybWF0anNcXGljdS1tZXNzYWdlZm9ybWF0LXBhcnNlclxcbGliXFxwYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9hO1xuaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEVycm9yS2luZCB9IGZyb20gJy4vZXJyb3InO1xuaW1wb3J0IHsgU0tFTEVUT05fVFlQRSwgVFlQRSwgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFNQQUNFX1NFUEFSQVRPUl9SRUdFWCB9IGZyb20gJy4vcmVnZXguZ2VuZXJhdGVkJztcbmltcG9ydCB7IHBhcnNlTnVtYmVyU2tlbGV0b24sIHBhcnNlTnVtYmVyU2tlbGV0b25Gcm9tU3RyaW5nLCBwYXJzZURhdGVUaW1lU2tlbGV0b24sIH0gZnJvbSAnQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXInO1xuaW1wb3J0IHsgZ2V0QmVzdFBhdHRlcm4gfSBmcm9tICcuL2RhdGUtdGltZS1wYXR0ZXJuLWdlbmVyYXRvcic7XG52YXIgU1BBQ0VfU0VQQVJBVE9SX1NUQVJUX1JFR0VYID0gbmV3IFJlZ0V4cChcIl5cIi5jb25jYXQoU1BBQ0VfU0VQQVJBVE9SX1JFR0VYLnNvdXJjZSwgXCIqXCIpKTtcbnZhciBTUEFDRV9TRVBBUkFUT1JfRU5EX1JFR0VYID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChTUEFDRV9TRVBBUkFUT1JfUkVHRVguc291cmNlLCBcIiokXCIpKTtcbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG59XG4vLyAjcmVnaW9uIFBvbnlmaWxsc1xuLy8gQ29uc29saWRhdGUgdGhlc2UgdmFyaWFibGVzIHVwIHRvcCBmb3IgZWFzaWVyIHRvZ2dsaW5nIGR1cmluZyBkZWJ1Z2dpbmdcbnZhciBoYXNOYXRpdmVTdGFydHNXaXRoID0gISFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggJiYgJ19hJy5zdGFydHNXaXRoKCdhJywgMSk7XG52YXIgaGFzTmF0aXZlRnJvbUNvZGVQb2ludCA9ICEhU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG52YXIgaGFzTmF0aXZlRnJvbUVudHJpZXMgPSAhIU9iamVjdC5mcm9tRW50cmllcztcbnZhciBoYXNOYXRpdmVDb2RlUG9pbnRBdCA9ICEhU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdDtcbnZhciBoYXNUcmltU3RhcnQgPSAhIVN0cmluZy5wcm90b3R5cGUudHJpbVN0YXJ0O1xudmFyIGhhc1RyaW1FbmQgPSAhIVN0cmluZy5wcm90b3R5cGUudHJpbUVuZDtcbnZhciBoYXNOYXRpdmVJc1NhZmVJbnRlZ2VyID0gISFOdW1iZXIuaXNTYWZlSW50ZWdlcjtcbnZhciBpc1NhZmVJbnRlZ2VyID0gaGFzTmF0aXZlSXNTYWZlSW50ZWdlclxuICAgID8gTnVtYmVyLmlzU2FmZUludGVnZXJcbiAgICA6IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIG4gPT09ICdudW1iZXInICYmXG4gICAgICAgICAgICBpc0Zpbml0ZShuKSAmJlxuICAgICAgICAgICAgTWF0aC5mbG9vcihuKSA9PT0gbiAmJlxuICAgICAgICAgICAgTWF0aC5hYnMobikgPD0gMHgxZmZmZmZmZmZmZmZmZik7XG4gICAgfTtcbi8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCB5IGFuZCB1LlxudmFyIFJFR0VYX1NVUFBPUlRTX1VfQU5EX1kgPSB0cnVlO1xudHJ5IHtcbiAgICB2YXIgcmUgPSBSRSgnKFteXFxcXHB7V2hpdGVfU3BhY2V9XFxcXHB7UGF0dGVybl9TeW50YXh9XSopJywgJ3l1Jyk7XG4gICAgLyoqXG4gICAgICogbGVnYWN5IEVkZ2Ugb3IgWGJveCBPbmUgYnJvd3NlclxuICAgICAqIFVuaWNvZGUgZmxhZyBzdXBwb3J0OiBzdXBwb3J0ZWRcbiAgICAgKiBQYXR0ZXJuX1N5bnRheCBzdXBwb3J0OiBub3Qgc3VwcG9ydGVkXG4gICAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtYXRqcy9mb3JtYXRqcy9pc3N1ZXMvMjgyMlxuICAgICAqL1xuICAgIFJFR0VYX1NVUFBPUlRTX1VfQU5EX1kgPSAoKF9hID0gcmUuZXhlYygnYScpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbMF0pID09PSAnYSc7XG59XG5jYXRjaCAoXykge1xuICAgIFJFR0VYX1NVUFBPUlRTX1VfQU5EX1kgPSBmYWxzZTtcbn1cbnZhciBzdGFydHNXaXRoID0gaGFzTmF0aXZlU3RhcnRzV2l0aFxuICAgID8gLy8gTmF0aXZlXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgocywgc2VhcmNoLCBwb3NpdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHMuc3RhcnRzV2l0aChzZWFyY2gsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIDogLy8gRm9yIElFMTFcbiAgICAgICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzLCBzZWFyY2gsIHBvc2l0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICAgICAgICB9O1xudmFyIGZyb21Db2RlUG9pbnQgPSBoYXNOYXRpdmVGcm9tQ29kZVBvaW50XG4gICAgPyBTdHJpbmcuZnJvbUNvZGVQb2ludFxuICAgIDogLy8gSUUxMVxuICAgICAgICBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KCkge1xuICAgICAgICAgICAgdmFyIGNvZGVQb2ludHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgY29kZVBvaW50c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gJyc7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB2YXIgY29kZTtcbiAgICAgICAgICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICAgICAgICAgICAgY29kZSA9IGNvZGVQb2ludHNbaSsrXTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA+IDB4MTBmZmZmKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50cyArPVxuICAgICAgICAgICAgICAgICAgICBjb2RlIDwgMHgxMDAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgKGNvZGUgJSAweDQwMCkgKyAweGRjMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9O1xudmFyIGZyb21FbnRyaWVzID0gXG4vLyBuYXRpdmVcbmhhc05hdGl2ZUZyb21FbnRyaWVzXG4gICAgPyBPYmplY3QuZnJvbUVudHJpZXNcbiAgICA6IC8vIFBvbnlmaWxsXG4gICAgICAgIGZ1bmN0aW9uIGZyb21FbnRyaWVzKGVudHJpZXMpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZW50cmllc18xID0gZW50cmllczsgX2kgPCBlbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gZW50cmllc18xW19pXSwgayA9IF9hWzBdLCB2ID0gX2FbMV07XG4gICAgICAgICAgICAgICAgb2JqW2tdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH07XG52YXIgY29kZVBvaW50QXQgPSBoYXNOYXRpdmVDb2RlUG9pbnRBdFxuICAgID8gLy8gTmF0aXZlXG4gICAgICAgIGZ1bmN0aW9uIGNvZGVQb2ludEF0KHMsIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gcy5jb2RlUG9pbnRBdChpbmRleCk7XG4gICAgICAgIH1cbiAgICA6IC8vIElFIDExXG4gICAgICAgIGZ1bmN0aW9uIGNvZGVQb2ludEF0KHMsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBzaXplKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmaXJzdCA9IHMuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgICAgICB2YXIgc2Vjb25kO1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0IDwgMHhkODAwIHx8XG4gICAgICAgICAgICAgICAgZmlyc3QgPiAweGRiZmYgfHxcbiAgICAgICAgICAgICAgICBpbmRleCArIDEgPT09IHNpemUgfHxcbiAgICAgICAgICAgICAgICAoc2Vjb25kID0gcy5jaGFyQ29kZUF0KGluZGV4ICsgMSkpIDwgMHhkYzAwIHx8XG4gICAgICAgICAgICAgICAgc2Vjb25kID4gMHhkZmZmXG4gICAgICAgICAgICAgICAgPyBmaXJzdFxuICAgICAgICAgICAgICAgIDogKChmaXJzdCAtIDB4ZDgwMCkgPDwgMTApICsgKHNlY29uZCAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICAgICAgICB9O1xudmFyIHRyaW1TdGFydCA9IGhhc1RyaW1TdGFydFxuICAgID8gLy8gTmF0aXZlXG4gICAgICAgIGZ1bmN0aW9uIHRyaW1TdGFydChzKSB7XG4gICAgICAgICAgICByZXR1cm4gcy50cmltU3RhcnQoKTtcbiAgICAgICAgfVxuICAgIDogLy8gUG9ueWZpbGxcbiAgICAgICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoU1BBQ0VfU0VQQVJBVE9SX1NUQVJUX1JFR0VYLCAnJyk7XG4gICAgICAgIH07XG52YXIgdHJpbUVuZCA9IGhhc1RyaW1FbmRcbiAgICA/IC8vIE5hdGl2ZVxuICAgICAgICBmdW5jdGlvbiB0cmltRW5kKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnRyaW1FbmQoKTtcbiAgICAgICAgfVxuICAgIDogLy8gUG9ueWZpbGxcbiAgICAgICAgZnVuY3Rpb24gdHJpbUVuZChzKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKFNQQUNFX1NFUEFSQVRPUl9FTkRfUkVHRVgsICcnKTtcbiAgICAgICAgfTtcbi8vIFByZXZlbnQgbWluaWZpZXIgdG8gdHJhbnNsYXRlIG5ldyBSZWdFeHAgdG8gbGl0ZXJhbCBmb3JtIHRoYXQgbWlnaHQgY2F1c2Ugc3ludGF4IGVycm9yIG9uIElFMTEuXG5mdW5jdGlvbiBSRShzLCBmbGFnKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocywgZmxhZyk7XG59XG4vLyAjZW5kcmVnaW9uXG52YXIgbWF0Y2hJZGVudGlmaWVyQXRJbmRleDtcbmlmIChSRUdFWF9TVVBQT1JUU19VX0FORF9ZKSB7XG4gICAgLy8gTmF0aXZlXG4gICAgdmFyIElERU5USUZJRVJfUFJFRklYX1JFXzEgPSBSRSgnKFteXFxcXHB7V2hpdGVfU3BhY2V9XFxcXHB7UGF0dGVybl9TeW50YXh9XSopJywgJ3l1Jyk7XG4gICAgbWF0Y2hJZGVudGlmaWVyQXRJbmRleCA9IGZ1bmN0aW9uIG1hdGNoSWRlbnRpZmllckF0SW5kZXgocywgaW5kZXgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBJREVOVElGSUVSX1BSRUZJWF9SRV8xLmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICB2YXIgbWF0Y2ggPSBJREVOVElGSUVSX1BSRUZJWF9SRV8xLmV4ZWMocyk7XG4gICAgICAgIHJldHVybiAoX2EgPSBtYXRjaFsxXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgfTtcbn1cbmVsc2Uge1xuICAgIC8vIElFMTFcbiAgICBtYXRjaElkZW50aWZpZXJBdEluZGV4ID0gZnVuY3Rpb24gbWF0Y2hJZGVudGlmaWVyQXRJbmRleChzLCBpbmRleCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBbXTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBjID0gY29kZVBvaW50QXQocywgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGMgPT09IHVuZGVmaW5lZCB8fCBfaXNXaGl0ZVNwYWNlKGMpIHx8IF9pc1BhdHRlcm5TeW50YXgoYykpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hdGNoLnB1c2goYyk7XG4gICAgICAgICAgICBpbmRleCArPSBjID49IDB4MTAwMDAgPyAyIDogMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJvbUNvZGVQb2ludC5hcHBseSh2b2lkIDAsIG1hdGNoKTtcbiAgICB9O1xufVxudmFyIFBhcnNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXJzZXIobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0geyBvZmZzZXQ6IDAsIGxpbmU6IDEsIGNvbHVtbjogMSB9O1xuICAgICAgICB0aGlzLmlnbm9yZVRhZyA9ICEhb3B0aW9ucy5pZ25vcmVUYWc7XG4gICAgICAgIHRoaXMubG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gICAgICAgIHRoaXMucmVxdWlyZXNPdGhlckNsYXVzZSA9ICEhb3B0aW9ucy5yZXF1aXJlc090aGVyQ2xhdXNlO1xuICAgICAgICB0aGlzLnNob3VsZFBhcnNlU2tlbGV0b25zID0gISFvcHRpb25zLnNob3VsZFBhcnNlU2tlbGV0b25zO1xuICAgIH1cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5vZmZzZXQoKSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ3BhcnNlciBjYW4gb25seSBiZSB1c2VkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU1lc3NhZ2UoMCwgJycsIGZhbHNlKTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VNZXNzYWdlID0gZnVuY3Rpb24gKG5lc3RpbmdMZXZlbCwgcGFyZW50QXJnVHlwZSwgZXhwZWN0aW5nQ2xvc2VUYWcpIHtcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgICAgIHdoaWxlICghdGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICB2YXIgY2hhciA9IHRoaXMuY2hhcigpO1xuICAgICAgICAgICAgaWYgKGNoYXIgPT09IDEyMyAvKiBge2AgKi8pIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wYXJzZUFyZ3VtZW50KG5lc3RpbmdMZXZlbCwgZXhwZWN0aW5nQ2xvc2VUYWcpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2gocmVzdWx0LnZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSAxMjUgLyogYH1gICovICYmIG5lc3RpbmdMZXZlbCA+IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IDM1IC8qIGAjYCAqLyAmJlxuICAgICAgICAgICAgICAgIChwYXJlbnRBcmdUeXBlID09PSAncGx1cmFsJyB8fCBwYXJlbnRBcmdUeXBlID09PSAnc2VsZWN0b3JkaW5hbCcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5jbG9uZVBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFRZUEUucG91bmQsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbihwb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gNjAgLyogYDxgICovICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuaWdub3JlVGFnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wZWVrKCkgPT09IDQ3IC8vIGNoYXIgY29kZSBmb3IgJy8nXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhwZWN0aW5nQ2xvc2VUYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuVU5NQVRDSEVEX0NMT1NJTkdfVEFHLCBjcmVhdGVMb2NhdGlvbih0aGlzLmNsb25lUG9zaXRpb24oKSwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSA2MCAvKiBgPGAgKi8gJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5pZ25vcmVUYWcgJiZcbiAgICAgICAgICAgICAgICBfaXNBbHBoYSh0aGlzLnBlZWsoKSB8fCAwKSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlVGFnKG5lc3RpbmdMZXZlbCwgcGFyZW50QXJnVHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChyZXN1bHQudmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlTGl0ZXJhbChuZXN0aW5nTGV2ZWwsIHBhcmVudEFyZ1R5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2gocmVzdWx0LnZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsOiBlbGVtZW50cywgZXJyOiBudWxsIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBIHRhZyBuYW1lIG11c3Qgc3RhcnQgd2l0aCBhbiBBU0NJSSBsb3dlci91cHBlciBjYXNlIGxldHRlci4gVGhlIGdyYW1tYXIgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW2N1c3RvbSBlbGVtZW50IG5hbWVdW10gZXhjZXB0IHRoYXQgYSBkYXNoIGlzIE5PVCBhbHdheXMgbWFuZGF0b3J5IGFuZCB1cHBlcmNhc2UgbGV0dGVyc1xuICAgICAqIGFyZSBhY2NlcHRlZDpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIHRhZyA6Oj0gXCI8XCIgdGFnTmFtZSAod2hpdGVzcGFjZSkqIFwiLz5cIiB8IFwiPFwiIHRhZ05hbWUgKHdoaXRlc3BhY2UpKiBcIj5cIiBtZXNzYWdlIFwiPC9cIiB0YWdOYW1lICh3aGl0ZXNwYWNlKSogXCI+XCJcbiAgICAgKiB0YWdOYW1lIDo6PSBbYS16XSAoUEVOQ2hhcikqXG4gICAgICogUEVOQ2hhciA6Oj1cbiAgICAgKiAgICAgXCItXCIgfCBcIi5cIiB8IFswLTldIHwgXCJfXCIgfCBbYS16XSB8IFtBLVpdIHwgI3hCNyB8IFsjeEMwLSN4RDZdIHwgWyN4RDgtI3hGNl0gfCBbI3hGOC0jeDM3RF0gfFxuICAgICAqICAgICBbI3gzN0YtI3gxRkZGXSB8IFsjeDIwMEMtI3gyMDBEXSB8IFsjeDIwM0YtI3gyMDQwXSB8IFsjeDIwNzAtI3gyMThGXSB8IFsjeDJDMDAtI3gyRkVGXSB8XG4gICAgICogICAgIFsjeDMwMDEtI3hEN0ZGXSB8IFsjeEY5MDAtI3hGRENGXSB8IFsjeEZERjAtI3hGRkZEXSB8IFsjeDEwMDAwLSN4RUZGRkZdXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbY3VzdG9tIGVsZW1lbnQgbmFtZV06IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2N1c3RvbS1lbGVtZW50cy5odG1sI3ZhbGlkLWN1c3RvbS1lbGVtZW50LW5hbWVcbiAgICAgKiBOT1RFOiBXZSdyZSBhIGJpdCBtb3JlIGxheCBoZXJlIHNpbmNlIEhUTUwgdGVjaG5pY2FsbHkgZG9lcyBub3QgYWxsb3cgdXBwZXJjYXNlIEhUTUwgZWxlbWVudCBidXQgd2UgZG9cbiAgICAgKiBzaW5jZSBvdGhlciB0YWctYmFzZWQgZW5naW5lcyBsaWtlIFJlYWN0IGFsbG93IGl0XG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRhZyA9IGZ1bmN0aW9uIChuZXN0aW5nTGV2ZWwsIHBhcmVudEFyZ1R5cGUpIHtcbiAgICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5idW1wKCk7IC8vIGA8YFxuICAgICAgICB2YXIgdGFnTmFtZSA9IHRoaXMucGFyc2VUYWdOYW1lKCk7XG4gICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgIGlmICh0aGlzLmJ1bXBJZignLz4nKSkge1xuICAgICAgICAgICAgLy8gU2VsZiBjbG9zaW5nIHRhZ1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWw6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVFlQRS5saXRlcmFsLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCI8XCIuY29uY2F0KHRhZ05hbWUsIFwiLz5cIiksXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbihzdGFydFBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYnVtcElmKCc+JykpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlblJlc3VsdCA9IHRoaXMucGFyc2VNZXNzYWdlKG5lc3RpbmdMZXZlbCArIDEsIHBhcmVudEFyZ1R5cGUsIHRydWUpO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuUmVzdWx0LmVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlblJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGNoaWxkcmVuUmVzdWx0LnZhbDtcbiAgICAgICAgICAgIC8vIEV4cGVjdGluZyBhIGNsb3NlIHRhZ1xuICAgICAgICAgICAgdmFyIGVuZFRhZ1N0YXJ0UG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1bXBJZignPC8nKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRU9GKCkgfHwgIV9pc0FscGhhKHRoaXMuY2hhcigpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuSU5WQUxJRF9UQUcsIGNyZWF0ZUxvY2F0aW9uKGVuZFRhZ1N0YXJ0UG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjbG9zaW5nVGFnTmFtZVN0YXJ0UG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB2YXIgY2xvc2luZ1RhZ05hbWUgPSB0aGlzLnBhcnNlVGFnTmFtZSgpO1xuICAgICAgICAgICAgICAgIGlmICh0YWdOYW1lICE9PSBjbG9zaW5nVGFnTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuVU5NQVRDSEVEX0NMT1NJTkdfVEFHLCBjcmVhdGVMb2NhdGlvbihjbG9zaW5nVGFnTmFtZVN0YXJ0UG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmJ1bXBJZignPicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5JTlZBTElEX1RBRywgY3JlYXRlTG9jYXRpb24oZW5kVGFnU3RhcnRQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBUWVBFLnRhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0YWdOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uKHN0YXJ0UG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuVU5DTE9TRURfVEFHLCBjcmVhdGVMb2NhdGlvbihzdGFydFBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLklOVkFMSURfVEFHLCBjcmVhdGVMb2NhdGlvbihzdGFydFBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBhc3N1bWVzIHRoYXQgdGhlIGNhbGxlciBoYXMgcGVla2VkIGFoZWFkIGZvciB0aGUgZmlyc3QgdGFnIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVGFnTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcbiAgICAgICAgdGhpcy5idW1wKCk7IC8vIHRoZSBmaXJzdCB0YWcgbmFtZSBjaGFyYWN0ZXJcbiAgICAgICAgd2hpbGUgKCF0aGlzLmlzRU9GKCkgJiYgX2lzUG90ZW50aWFsRWxlbWVudE5hbWVDaGFyKHRoaXMuY2hhcigpKSkge1xuICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZS5zbGljZShzdGFydE9mZnNldCwgdGhpcy5vZmZzZXQoKSk7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlTGl0ZXJhbCA9IGZ1bmN0aW9uIChuZXN0aW5nTGV2ZWwsIHBhcmVudEFyZ1R5cGUpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5jbG9uZVBvc2l0aW9uKCk7XG4gICAgICAgIHZhciB2YWx1ZSA9ICcnO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdmFyIHBhcnNlUXVvdGVSZXN1bHQgPSB0aGlzLnRyeVBhcnNlUXVvdGUocGFyZW50QXJnVHlwZSk7XG4gICAgICAgICAgICBpZiAocGFyc2VRdW90ZVJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IHBhcnNlUXVvdGVSZXN1bHQ7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGFyc2VVbnF1b3RlZFJlc3VsdCA9IHRoaXMudHJ5UGFyc2VVbnF1b3RlZChuZXN0aW5nTGV2ZWwsIHBhcmVudEFyZ1R5cGUpO1xuICAgICAgICAgICAgaWYgKHBhcnNlVW5xdW90ZWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBwYXJzZVVucXVvdGVkUmVzdWx0O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBhcnNlTGVmdEFuZ2xlUmVzdWx0ID0gdGhpcy50cnlQYXJzZUxlZnRBbmdsZUJyYWNrZXQoKTtcbiAgICAgICAgICAgIGlmIChwYXJzZUxlZnRBbmdsZVJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IHBhcnNlTGVmdEFuZ2xlUmVzdWx0O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhcnQsIHRoaXMuY2xvbmVQb3NpdGlvbigpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbDogeyB0eXBlOiBUWVBFLmxpdGVyYWwsIHZhbHVlOiB2YWx1ZSwgbG9jYXRpb246IGxvY2F0aW9uIH0sXG4gICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLnRyeVBhcnNlTGVmdEFuZ2xlQnJhY2tldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRU9GKCkgJiZcbiAgICAgICAgICAgIHRoaXMuY2hhcigpID09PSA2MCAvKiBgPGAgKi8gJiZcbiAgICAgICAgICAgICh0aGlzLmlnbm9yZVRhZyB8fFxuICAgICAgICAgICAgICAgIC8vIElmIGF0IHRoZSBvcGVuaW5nIHRhZyBvciBjbG9zaW5nIHRhZyBwb3NpdGlvbiwgYmFpbC5cbiAgICAgICAgICAgICAgICAhX2lzQWxwaGFPclNsYXNoKHRoaXMucGVlaygpIHx8IDApKSkge1xuICAgICAgICAgICAgdGhpcy5idW1wKCk7IC8vIGA8YFxuICAgICAgICAgICAgcmV0dXJuICc8JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0YXJ0aW5nIHdpdGggSUNVIDQuOCwgYW4gQVNDSUkgYXBvc3Ryb3BoZSBvbmx5IHN0YXJ0cyBxdW90ZWQgdGV4dCBpZiBpdCBpbW1lZGlhdGVseSBwcmVjZWRlc1xuICAgICAqIGEgY2hhcmFjdGVyIHRoYXQgcmVxdWlyZXMgcXVvdGluZyAodGhhdCBpcywgXCJvbmx5IHdoZXJlIG5lZWRlZFwiKSwgYW5kIHdvcmtzIHRoZSBzYW1lIGluXG4gICAgICogbmVzdGVkIG1lc3NhZ2VzIGFzIG9uIHRoZSB0b3AgbGV2ZWwgb2YgdGhlIHBhdHRlcm4uIFRoZSBuZXcgYmVoYXZpb3IgaXMgb3RoZXJ3aXNlIGNvbXBhdGlibGUuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS50cnlQYXJzZVF1b3RlID0gZnVuY3Rpb24gKHBhcmVudEFyZ1R5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFT0YoKSB8fCB0aGlzLmNoYXIoKSAhPT0gMzkgLyogYCdgICovKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYXJzZSBlc2NhcGVkIGNoYXIgZm9sbG93aW5nIHRoZSBhcG9zdHJvcGhlLCBvciBlYXJseSByZXR1cm4gaWYgdGhlcmUgaXMgbm8gZXNjYXBlZCBjaGFyLlxuICAgICAgICAvLyBDaGVjayBpZiBpcyB2YWxpZCBlc2NhcGVkIGNoYXJhY3RlclxuICAgICAgICBzd2l0Y2ggKHRoaXMucGVlaygpKSB7XG4gICAgICAgICAgICBjYXNlIDM5IC8qIGAnYCAqLzpcbiAgICAgICAgICAgICAgICAvLyBkb3VibGUgcXVvdGUsIHNob3VsZCByZXR1cm4gYXMgYSBzaW5nbGUgcXVvdGUuXG4gICAgICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgICAgICAgICAgLy8gJ3snLCAnPCcsICc+JywgJ30nXG4gICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGNhc2UgNjA6XG4gICAgICAgICAgICBjYXNlIDYyOlxuICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM1OiAvLyAnIydcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50QXJnVHlwZSA9PT0gJ3BsdXJhbCcgfHwgcGFyZW50QXJnVHlwZSA9PT0gJ3NlbGVjdG9yZGluYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idW1wKCk7IC8vIGFwb3N0cm9waGVcbiAgICAgICAgdmFyIGNvZGVQb2ludHMgPSBbdGhpcy5jaGFyKCldOyAvLyBlc2NhcGVkIGNoYXJcbiAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgIC8vIHJlYWQgY2hhcnMgdW50aWwgdGhlIG9wdGlvbmFsIGNsb3NpbmcgYXBvc3Ryb3BoZSBpcyBmb3VuZFxuICAgICAgICB3aGlsZSAoIXRoaXMuaXNFT0YoKSkge1xuICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5jaGFyKCk7XG4gICAgICAgICAgICBpZiAoY2ggPT09IDM5IC8qIGAnYCAqLykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBlZWsoKSA9PT0gMzkgLyogYCdgICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludHMucHVzaCgzOSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1bXAgb25lIG1vcmUgdGltZSBiZWNhdXNlIHdlIG5lZWQgdG8gc2tpcCAyIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW9uYWwgY2xvc2luZyBhcG9zdHJvcGhlLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29kZVBvaW50cy5wdXNoKGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcm9tQ29kZVBvaW50LmFwcGx5KHZvaWQgMCwgY29kZVBvaW50cyk7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLnRyeVBhcnNlVW5xdW90ZWQgPSBmdW5jdGlvbiAobmVzdGluZ0xldmVsLCBwYXJlbnRBcmdUeXBlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRU9GKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaCA9IHRoaXMuY2hhcigpO1xuICAgICAgICBpZiAoY2ggPT09IDYwIC8qIGA8YCAqLyB8fFxuICAgICAgICAgICAgY2ggPT09IDEyMyAvKiBge2AgKi8gfHxcbiAgICAgICAgICAgIChjaCA9PT0gMzUgLyogYCNgICovICYmXG4gICAgICAgICAgICAgICAgKHBhcmVudEFyZ1R5cGUgPT09ICdwbHVyYWwnIHx8IHBhcmVudEFyZ1R5cGUgPT09ICdzZWxlY3RvcmRpbmFsJykpIHx8XG4gICAgICAgICAgICAoY2ggPT09IDEyNSAvKiBgfWAgKi8gJiYgbmVzdGluZ0xldmVsID4gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUNvZGVQb2ludChjaCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBcmd1bWVudCA9IGZ1bmN0aW9uIChuZXN0aW5nTGV2ZWwsIGV4cGVjdGluZ0Nsb3NlVGFnKSB7XG4gICAgICAgIHZhciBvcGVuaW5nQnJhY2VQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmJ1bXAoKTsgLy8gYHtgXG4gICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgIGlmICh0aGlzLmlzRU9GKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5FWFBFQ1RfQVJHVU1FTlRfQ0xPU0lOR19CUkFDRSwgY3JlYXRlTG9jYXRpb24ob3BlbmluZ0JyYWNlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hhcigpID09PSAxMjUgLyogYH1gICovKSB7XG4gICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5FTVBUWV9BUkdVTUVOVCwgY3JlYXRlTG9jYXRpb24ob3BlbmluZ0JyYWNlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXJndW1lbnQgbmFtZVxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnBhcnNlSWRlbnRpZmllcklmUG9zc2libGUoKS52YWx1ZTtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLk1BTEZPUk1FRF9BUkdVTUVOVCwgY3JlYXRlTG9jYXRpb24ob3BlbmluZ0JyYWNlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNFT0YoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLkVYUEVDVF9BUkdVTUVOVF9DTE9TSU5HX0JSQUNFLCBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMuY2hhcigpKSB7XG4gICAgICAgICAgICAvLyBTaW1wbGUgYXJndW1lbnQ6IGB7bmFtZX1gXG4gICAgICAgICAgICBjYXNlIDEyNSAvKiBgfWAgKi86IHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTsgLy8gYH1gXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBUWVBFLmFyZ3VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWUgZG9lcyBub3QgaW5jbHVkZSB0aGUgb3BlbmluZyBhbmQgY2xvc2luZyBicmFjZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24ob3BlbmluZ0JyYWNlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBcmd1bWVudCB3aXRoIG9wdGlvbnM6IGB7bmFtZSwgZm9ybWF0LCAuLi59YFxuICAgICAgICAgICAgY2FzZSA0NCAvKiBgLGAgKi86IHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTsgLy8gYCxgXG4gICAgICAgICAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5FWFBFQ1RfQVJHVU1FTlRfQ0xPU0lOR19CUkFDRSwgY3JlYXRlTG9jYXRpb24ob3BlbmluZ0JyYWNlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJndW1lbnRPcHRpb25zKG5lc3RpbmdMZXZlbCwgZXhwZWN0aW5nQ2xvc2VUYWcsIHZhbHVlLCBvcGVuaW5nQnJhY2VQb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5NQUxGT1JNRURfQVJHVU1FTlQsIGNyZWF0ZUxvY2F0aW9uKG9wZW5pbmdCcmFjZVBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZHZhbmNlIHRoZSBwYXJzZXIgdW50aWwgdGhlIGVuZCBvZiB0aGUgaWRlbnRpZmllciwgaWYgaXQgaXMgY3VycmVudGx5IG9uXG4gICAgICogYW4gaWRlbnRpZmllciBjaGFyYWN0ZXIuIFJldHVybiBhbiBlbXB0eSBzdHJpbmcgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VJZGVudGlmaWVySWZQb3NzaWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXJ0aW5nUG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcbiAgICAgICAgdmFyIHZhbHVlID0gbWF0Y2hJZGVudGlmaWVyQXRJbmRleCh0aGlzLm1lc3NhZ2UsIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgdmFyIGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgdmFsdWUubGVuZ3RoO1xuICAgICAgICB0aGlzLmJ1bXBUbyhlbmRPZmZzZXQpO1xuICAgICAgICB2YXIgZW5kUG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhcnRpbmdQb3NpdGlvbiwgZW5kUG9zaXRpb24pO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGxvY2F0aW9uOiBsb2NhdGlvbiB9O1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUFyZ3VtZW50T3B0aW9ucyA9IGZ1bmN0aW9uIChuZXN0aW5nTGV2ZWwsIGV4cGVjdGluZ0Nsb3NlVGFnLCB2YWx1ZSwgb3BlbmluZ0JyYWNlUG9zaXRpb24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBQYXJzZSB0aGlzIHJhbmdlOlxuICAgICAgICAvLyB7bmFtZSwgdHlwZSwgc3R5bGV9XG4gICAgICAgIC8vICAgICAgICBeLS0tXlxuICAgICAgICB2YXIgdHlwZVN0YXJ0UG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgdmFyIGFyZ1R5cGUgPSB0aGlzLnBhcnNlSWRlbnRpZmllcklmUG9zc2libGUoKS52YWx1ZTtcbiAgICAgICAgdmFyIHR5cGVFbmRQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICBzd2l0Y2ggKGFyZ1R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgICAgICAgLy8gRXhwZWN0aW5nIGEgc3R5bGUgc3RyaW5nIG51bWJlciwgZGF0ZSwgdGltZSwgcGx1cmFsLCBzZWxlY3RvcmRpbmFsLCBvciBzZWxlY3QuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLkVYUEVDVF9BUkdVTUVOVF9UWVBFLCBjcmVhdGVMb2NhdGlvbih0eXBlU3RhcnRQb3NpdGlvbiwgdHlwZUVuZFBvc2l0aW9uKSk7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICBjYXNlICd0aW1lJzoge1xuICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoaXMgcmFuZ2U6XG4gICAgICAgICAgICAgICAgLy8ge25hbWUsIG51bWJlciwgc3R5bGV9XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgIF4tLS0tLS0tXlxuICAgICAgICAgICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlQW5kTG9jYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ1bXBJZignLCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZVN0YXJ0UG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VTaW1wbGVBcmdTdHlsZUlmUG9zc2libGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gdHJpbUVuZChyZXN1bHQudmFsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLkVYUEVDVF9BUkdVTUVOVF9TVFlMRSwgY3JlYXRlTG9jYXRpb24odGhpcy5jbG9uZVBvc2l0aW9uKCksIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlTG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdHlsZVN0YXJ0UG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVBbmRMb2NhdGlvbiA9IHsgc3R5bGU6IHN0eWxlLCBzdHlsZUxvY2F0aW9uOiBzdHlsZUxvY2F0aW9uIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhcmdDbG9zZVJlc3VsdCA9IHRoaXMudHJ5UGFyc2VBcmd1bWVudENsb3NlKG9wZW5pbmdCcmFjZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJnQ2xvc2VSZXN1bHQuZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdDbG9zZVJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uXzEgPSBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgIC8vIEV4dHJhY3Qgc3R5bGUgb3Igc2tlbGV0b25cbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVBbmRMb2NhdGlvbiAmJiBzdGFydHNXaXRoKHN0eWxlQW5kTG9jYXRpb24gPT09IG51bGwgfHwgc3R5bGVBbmRMb2NhdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3R5bGVBbmRMb2NhdGlvbi5zdHlsZSwgJzo6JywgMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2tlbGV0b24gc3RhcnRzIHdpdGggYDo6YC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNrZWxldG9uID0gdHJpbVN0YXJ0KHN0eWxlQW5kTG9jYXRpb24uc3R5bGUuc2xpY2UoMikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlTnVtYmVyU2tlbGV0b25Gcm9tU3RyaW5nKHNrZWxldG9uLCBzdHlsZUFuZExvY2F0aW9uLnN0eWxlTG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw6IHsgdHlwZTogVFlQRS5udW1iZXIsIHZhbHVlOiB2YWx1ZSwgbG9jYXRpb246IGxvY2F0aW9uXzEsIHN0eWxlOiByZXN1bHQudmFsIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2VsZXRvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuRVhQRUNUX0RBVEVfVElNRV9TS0VMRVRPTiwgbG9jYXRpb25fMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZVRpbWVQYXR0ZXJuID0gc2tlbGV0b247XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgXCJiZXN0IG1hdGNoXCIgcGF0dGVybiBvbmx5IGlmIGxvY2FsZSBpcyBwYXNzZWQsIGlmIG5vdCwgbGV0IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwYXNzIGFzLWlzIHdoZXJlIGBwYXJzZURhdGVUaW1lU2tlbGV0b24oKWAgd2lsbCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHVuc3VwcG9ydGVkIHBhdHRlcm5zLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVRpbWVQYXR0ZXJuID0gZ2V0QmVzdFBhdHRlcm4oc2tlbGV0b24sIHRoaXMubG9jYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBTS0VMRVRPTl9UWVBFLmRhdGVUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IGRhdGVUaW1lUGF0dGVybixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogc3R5bGVBbmRMb2NhdGlvbi5zdHlsZUxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZE9wdGlvbnM6IHRoaXMuc2hvdWxkUGFyc2VTa2VsZXRvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZURhdGVUaW1lU2tlbGV0b24oZGF0ZVRpbWVQYXR0ZXJuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gYXJnVHlwZSA9PT0gJ2RhdGUnID8gVFlQRS5kYXRlIDogVFlQRS50aW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw6IHsgdHlwZTogdHlwZSwgdmFsdWU6IHZhbHVlLCBsb2NhdGlvbjogbG9jYXRpb25fMSwgc3R5bGU6IHN0eWxlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZWd1bGFyIHN0eWxlIG9yIG5vIHN0eWxlLlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJnVHlwZSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFRZUEUubnVtYmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhcmdUeXBlID09PSAnZGF0ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBUWVBFLmRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBUWVBFLnRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25fMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAoX2EgPSBzdHlsZUFuZExvY2F0aW9uID09PSBudWxsIHx8IHN0eWxlQW5kTG9jYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0eWxlQW5kTG9jYXRpb24uc3R5bGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycjogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncGx1cmFsJzpcbiAgICAgICAgICAgIGNhc2UgJ3NlbGVjdG9yZGluYWwnOlxuICAgICAgICAgICAgY2FzZSAnc2VsZWN0Jzoge1xuICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoaXMgcmFuZ2U6XG4gICAgICAgICAgICAgICAgLy8ge25hbWUsIHBsdXJhbCwgb3B0aW9uc31cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgXi0tLS0tLS0tLV5cbiAgICAgICAgICAgICAgICB2YXIgdHlwZUVuZFBvc2l0aW9uXzEgPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXBTcGFjZSgpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5idW1wSWYoJywnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuRVhQRUNUX1NFTEVDVF9BUkdVTUVOVF9PUFRJT05TLCBjcmVhdGVMb2NhdGlvbih0eXBlRW5kUG9zaXRpb25fMSwgX19hc3NpZ24oe30sIHR5cGVFbmRQb3NpdGlvbl8xKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXBTcGFjZSgpO1xuICAgICAgICAgICAgICAgIC8vIFBhcnNlIG9mZnNldDpcbiAgICAgICAgICAgICAgICAvLyB7bmFtZSwgcGx1cmFsLCBvZmZzZXQ6MSwgb3B0aW9uc31cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBeLS0tLS1eXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBvciB0aGUgZmlyc3Qgb3B0aW9uOlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8ge25hbWUsIHBsdXJhbCwgb25lIHsuLi59IG90aGVyIHsuLi59fVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIF4tLV5cbiAgICAgICAgICAgICAgICB2YXIgaWRlbnRpZmllckFuZExvY2F0aW9uID0gdGhpcy5wYXJzZUlkZW50aWZpZXJJZlBvc3NpYmxlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBsdXJhbE9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ1R5cGUgIT09ICdzZWxlY3QnICYmIGlkZW50aWZpZXJBbmRMb2NhdGlvbi52YWx1ZSA9PT0gJ29mZnNldCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmJ1bXBJZignOicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihFcnJvcktpbmQuRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9PRkZTRVRfVkFMVUUsIGNyZWF0ZUxvY2F0aW9uKHRoaXMuY2xvbmVQb3NpdGlvbigpLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVtcFNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnRyeVBhcnNlRGVjaW1hbEludGVnZXIoRXJyb3JLaW5kLkVYUEVDVF9QTFVSQUxfQVJHVU1FTlRfT0ZGU0VUX1ZBTFVFLCBFcnJvcktpbmQuSU5WQUxJRF9QTFVSQUxfQVJHVU1FTlRfT0ZGU0VUX1ZBTFVFKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgYW5vdGhlciBpZGVudGlmaWVyIGZvciBvcHRpb24gcGFyc2luZ1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1bXBTcGFjZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyQW5kTG9jYXRpb24gPSB0aGlzLnBhcnNlSWRlbnRpZmllcklmUG9zc2libGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcGx1cmFsT2Zmc2V0ID0gcmVzdWx0LnZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnNSZXN1bHQgPSB0aGlzLnRyeVBhcnNlUGx1cmFsT3JTZWxlY3RPcHRpb25zKG5lc3RpbmdMZXZlbCwgYXJnVHlwZSwgZXhwZWN0aW5nQ2xvc2VUYWcsIGlkZW50aWZpZXJBbmRMb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNSZXN1bHQuZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zUmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYXJnQ2xvc2VSZXN1bHQgPSB0aGlzLnRyeVBhcnNlQXJndW1lbnRDbG9zZShvcGVuaW5nQnJhY2VQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ0Nsb3NlUmVzdWx0LmVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnQ2xvc2VSZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbl8yID0gY3JlYXRlTG9jYXRpb24ob3BlbmluZ0JyYWNlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJnVHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFRZUEUuc2VsZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBmcm9tRW50cmllcyhvcHRpb25zUmVzdWx0LnZhbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXzIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFRZUEUucGx1cmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBmcm9tRW50cmllcyhvcHRpb25zUmVzdWx0LnZhbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBwbHVyYWxPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1cmFsVHlwZTogYXJnVHlwZSA9PT0gJ3BsdXJhbCcgPyAnY2FyZGluYWwnIDogJ29yZGluYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbl8yLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5JTlZBTElEX0FSR1VNRU5UX1RZUEUsIGNyZWF0ZUxvY2F0aW9uKHR5cGVTdGFydFBvc2l0aW9uLCB0eXBlRW5kUG9zaXRpb24pKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS50cnlQYXJzZUFyZ3VtZW50Q2xvc2UgPSBmdW5jdGlvbiAob3BlbmluZ0JyYWNlUG9zaXRpb24pIHtcbiAgICAgICAgLy8gUGFyc2U6IHt2YWx1ZSwgbnVtYmVyLCA6OmN1cnJlbmN5L0dCUCB9XG4gICAgICAgIC8vXG4gICAgICAgIGlmICh0aGlzLmlzRU9GKCkgfHwgdGhpcy5jaGFyKCkgIT09IDEyNSAvKiBgfWAgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5FWFBFQ1RfQVJHVU1FTlRfQ0xPU0lOR19CUkFDRSwgY3JlYXRlTG9jYXRpb24ob3BlbmluZ0JyYWNlUG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idW1wKCk7IC8vIGB9YFxuICAgICAgICByZXR1cm4geyB2YWw6IHRydWUsIGVycjogbnVsbCB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdW5pY29kZS1vcmcvaWN1L2Jsb2IvYWY3ZWQxZjZkMjI5ODAxM2RjMzAzNjI4NDM4ZWM0YWJlMWYxNjQ3OS9pY3U0Yy9zb3VyY2UvY29tbW9uL21lc3NhZ2VwYXR0ZXJuLmNwcCNMNjU5XG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVNpbXBsZUFyZ1N0eWxlSWZQb3NzaWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5lc3RlZEJyYWNlcyA9IDA7XG4gICAgICAgIHZhciBzdGFydFBvc2l0aW9uID0gdGhpcy5jbG9uZVBvc2l0aW9uKCk7XG4gICAgICAgIHdoaWxlICghdGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICB2YXIgY2ggPSB0aGlzLmNoYXIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDM5IC8qIGAnYCAqLzoge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcmVhdCBhcG9zdHJvcGhlIGFzIHF1b3RpbmcgYnV0IGluY2x1ZGUgaXQgaW4gdGhlIHN0eWxlIHBhcnQuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGVuZCBvZiB0aGUgcXVvdGVkIGxpdGVyYWwgdGV4dC5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcG9zdHJvcGhlUG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmJ1bXBVbnRpbChcIidcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5VTkNMT1NFRF9RVU9URV9JTl9BUkdVTUVOVF9TVFlMRSwgY3JlYXRlTG9jYXRpb24oYXBvc3Ryb3BoZVBvc2l0aW9uLCB0aGlzLmNsb25lUG9zaXRpb24oKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAxMjMgLyogYHtgICovOiB7XG4gICAgICAgICAgICAgICAgICAgIG5lc3RlZEJyYWNlcyArPSAxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgMTI1IC8qIGB9YCAqLzoge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmVzdGVkQnJhY2VzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmVzdGVkQnJhY2VzIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDogdGhpcy5tZXNzYWdlLnNsaWNlKHN0YXJ0UG9zaXRpb24ub2Zmc2V0LCB0aGlzLm9mZnNldCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbDogdGhpcy5tZXNzYWdlLnNsaWNlKHN0YXJ0UG9zaXRpb24ub2Zmc2V0LCB0aGlzLm9mZnNldCgpKSxcbiAgICAgICAgICAgIGVycjogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VOdW1iZXJTa2VsZXRvbkZyb21TdHJpbmcgPSBmdW5jdGlvbiAoc2tlbGV0b24sIGxvY2F0aW9uKSB7XG4gICAgICAgIHZhciB0b2tlbnMgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRva2VucyA9IHBhcnNlTnVtYmVyU2tlbGV0b25Gcm9tU3RyaW5nKHNrZWxldG9uKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoRXJyb3JLaW5kLklOVkFMSURfTlVNQkVSX1NLRUxFVE9OLCBsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFNLRUxFVE9OX1RZUEUubnVtYmVyLFxuICAgICAgICAgICAgICAgIHRva2VuczogdG9rZW5zLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICAgICAgICBwYXJzZWRPcHRpb25zOiB0aGlzLnNob3VsZFBhcnNlU2tlbGV0b25zXG4gICAgICAgICAgICAgICAgICAgID8gcGFyc2VOdW1iZXJTa2VsZXRvbih0b2tlbnMpXG4gICAgICAgICAgICAgICAgICAgIDoge30sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyOiBudWxsLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG5lc3RpbmdfbGV2ZWwgVGhlIGN1cnJlbnQgbmVzdGluZyBsZXZlbCBvZiBtZXNzYWdlcy5cbiAgICAgKiAgICAgVGhpcyBjYW4gYmUgcG9zaXRpdmUgd2hlbiBwYXJzaW5nIG1lc3NhZ2UgZnJhZ21lbnQgaW4gc2VsZWN0IG9yIHBsdXJhbCBhcmd1bWVudCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBwYXJlbnRfYXJnX3R5cGUgVGhlIHBhcmVudCBhcmd1bWVudCdzIHR5cGUuXG4gICAgICogQHBhcmFtIHBhcnNlZF9maXJzdF9pZGVudGlmaWVyIElmIHByb3ZpZGVkLCB0aGlzIGlzIHRoZSBmaXJzdCBpZGVudGlmaWVyLWxpa2Ugc2VsZWN0b3Igb2ZcbiAgICAgKiAgICAgdGhlIGFyZ3VtZW50LiBJdCBpcyBhIGJ5LXByb2R1Y3Qgb2YgYSBwcmV2aW91cyBwYXJzaW5nIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIGV4cGVjdGluZ19jbG9zZV90YWcgSWYgdHJ1ZSwgdGhpcyBtZXNzYWdlIGlzIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgbmVzdGVkIGluc2lkZVxuICAgICAqICAgICBiZXR3ZWVuIGEgcGFpciBvZiBvcGVuaW5nIGFuZCBjbG9zaW5nIHRhZ3MuIFRoZSBuZXN0ZWQgbWVzc2FnZSB3aWxsIG5vdCBwYXJzZSBiZXlvbmRcbiAgICAgKiAgICAgdGhlIGNsb3NpbmcgdGFnIGJvdW5kYXJ5LlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUudHJ5UGFyc2VQbHVyYWxPclNlbGVjdE9wdGlvbnMgPSBmdW5jdGlvbiAobmVzdGluZ0xldmVsLCBwYXJlbnRBcmdUeXBlLCBleHBlY3RDbG9zZVRhZywgcGFyc2VkRmlyc3RJZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGhhc090aGVyQ2xhdXNlID0gZmFsc2U7XG4gICAgICAgIHZhciBvcHRpb25zID0gW107XG4gICAgICAgIHZhciBwYXJzZWRTZWxlY3RvcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHBhcnNlZEZpcnN0SWRlbnRpZmllci52YWx1ZSwgc2VsZWN0b3JMb2NhdGlvbiA9IHBhcnNlZEZpcnN0SWRlbnRpZmllci5sb2NhdGlvbjtcbiAgICAgICAgLy8gUGFyc2U6XG4gICAgICAgIC8vIG9uZSB7b25lIGFwcGxlfVxuICAgICAgICAvLyBeLS1eXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50QXJnVHlwZSAhPT0gJ3NlbGVjdCcgJiYgdGhpcy5idW1wSWYoJz0nKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcnkgcGFyc2UgYD17bnVtYmVyfWAgc2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMudHJ5UGFyc2VEZWNpbWFsSW50ZWdlcihFcnJvcktpbmQuRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUiwgRXJyb3JLaW5kLklOVkFMSURfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXJ0UG9zaXRpb24sIHRoaXMuY2xvbmVQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSB0aGlzLm1lc3NhZ2Uuc2xpY2Uoc3RhcnRQb3NpdGlvbi5vZmZzZXQsIHRoaXMub2Zmc2V0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRHVwbGljYXRlIHNlbGVjdG9yIGNsYXVzZXNcbiAgICAgICAgICAgIGlmIChwYXJzZWRTZWxlY3RvcnMuaGFzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKHBhcmVudEFyZ1R5cGUgPT09ICdzZWxlY3QnXG4gICAgICAgICAgICAgICAgICAgID8gRXJyb3JLaW5kLkRVUExJQ0FURV9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcbiAgICAgICAgICAgICAgICAgICAgOiBFcnJvcktpbmQuRFVQTElDQVRFX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUiwgc2VsZWN0b3JMb2NhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICdvdGhlcicpIHtcbiAgICAgICAgICAgICAgICBoYXNPdGhlckNsYXVzZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQYXJzZTpcbiAgICAgICAgICAgIC8vIG9uZSB7b25lIGFwcGxlfVxuICAgICAgICAgICAgLy8gICAgIF4tLS0tLS0tLS0tXlxuICAgICAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgICAgIHZhciBvcGVuaW5nQnJhY2VQb3NpdGlvbiA9IHRoaXMuY2xvbmVQb3NpdGlvbigpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmJ1bXBJZigneycpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IocGFyZW50QXJnVHlwZSA9PT0gJ3NlbGVjdCdcbiAgICAgICAgICAgICAgICAgICAgPyBFcnJvcktpbmQuRVhQRUNUX1NFTEVDVF9BUkdVTUVOVF9TRUxFQ1RPUl9GUkFHTUVOVFxuICAgICAgICAgICAgICAgICAgICA6IEVycm9yS2luZC5FWFBFQ1RfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SX0ZSQUdNRU5ULCBjcmVhdGVMb2NhdGlvbih0aGlzLmNsb25lUG9zaXRpb24oKSwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmcmFnbWVudFJlc3VsdCA9IHRoaXMucGFyc2VNZXNzYWdlKG5lc3RpbmdMZXZlbCArIDEsIHBhcmVudEFyZ1R5cGUsIGV4cGVjdENsb3NlVGFnKTtcbiAgICAgICAgICAgIGlmIChmcmFnbWVudFJlc3VsdC5lcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJhZ21lbnRSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYXJnQ2xvc2VSZXN1bHQgPSB0aGlzLnRyeVBhcnNlQXJndW1lbnRDbG9zZShvcGVuaW5nQnJhY2VQb3NpdGlvbik7XG4gICAgICAgICAgICBpZiAoYXJnQ2xvc2VSZXN1bHQuZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ0Nsb3NlUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKFtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmcmFnbWVudFJlc3VsdC52YWwsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbihvcGVuaW5nQnJhY2VQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIGV4aXN0aW5nIHNlbGVjdG9yc1xuICAgICAgICAgICAgcGFyc2VkU2VsZWN0b3JzLmFkZChzZWxlY3Rvcik7XG4gICAgICAgICAgICAvLyBQcmVwIG5leHQgc2VsZWN0b3IgY2xhdXNlLlxuICAgICAgICAgICAgdGhpcy5idW1wU3BhY2UoKTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMucGFyc2VJZGVudGlmaWVySWZQb3NzaWJsZSgpLCBzZWxlY3RvciA9IF9hLnZhbHVlLCBzZWxlY3RvckxvY2F0aW9uID0gX2EubG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IocGFyZW50QXJnVHlwZSA9PT0gJ3NlbGVjdCdcbiAgICAgICAgICAgICAgICA/IEVycm9yS2luZC5FWFBFQ1RfU0VMRUNUX0FSR1VNRU5UX1NFTEVDVE9SXG4gICAgICAgICAgICAgICAgOiBFcnJvcktpbmQuRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUiwgY3JlYXRlTG9jYXRpb24odGhpcy5jbG9uZVBvc2l0aW9uKCksIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZXNPdGhlckNsYXVzZSAmJiAhaGFzT3RoZXJDbGF1c2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKEVycm9yS2luZC5NSVNTSU5HX09USEVSX0NMQVVTRSwgY3JlYXRlTG9jYXRpb24odGhpcy5jbG9uZVBvc2l0aW9uKCksIHRoaXMuY2xvbmVQb3NpdGlvbigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsOiBvcHRpb25zLCBlcnI6IG51bGwgfTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUudHJ5UGFyc2VEZWNpbWFsSW50ZWdlciA9IGZ1bmN0aW9uIChleHBlY3ROdW1iZXJFcnJvciwgaW52YWxpZE51bWJlckVycm9yKSB7XG4gICAgICAgIHZhciBzaWduID0gMTtcbiAgICAgICAgdmFyIHN0YXJ0aW5nUG9zaXRpb24gPSB0aGlzLmNsb25lUG9zaXRpb24oKTtcbiAgICAgICAgaWYgKHRoaXMuYnVtcElmKCcrJykpIHtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmJ1bXBJZignLScpKSB7XG4gICAgICAgICAgICBzaWduID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhc0RpZ2l0cyA9IGZhbHNlO1xuICAgICAgICB2YXIgZGVjaW1hbCA9IDA7XG4gICAgICAgIHdoaWxlICghdGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICB2YXIgY2ggPSB0aGlzLmNoYXIoKTtcbiAgICAgICAgICAgIGlmIChjaCA+PSA0OCAvKiBgMGAgKi8gJiYgY2ggPD0gNTcgLyogYDlgICovKSB7XG4gICAgICAgICAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBkZWNpbWFsID0gZGVjaW1hbCAqIDEwICsgKGNoIC0gNDgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhcnRpbmdQb3NpdGlvbiwgdGhpcy5jbG9uZVBvc2l0aW9uKCkpO1xuICAgICAgICBpZiAoIWhhc0RpZ2l0cykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoZXhwZWN0TnVtYmVyRXJyb3IsIGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBkZWNpbWFsICo9IHNpZ247XG4gICAgICAgIGlmICghaXNTYWZlSW50ZWdlcihkZWNpbWFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoaW52YWxpZE51bWJlckVycm9yLCBsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsOiBkZWNpbWFsLCBlcnI6IG51bGwgfTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbi5vZmZzZXQ7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLmlzRU9GID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQoKSA9PT0gdGhpcy5tZXNzYWdlLmxlbmd0aDtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuY2xvbmVQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBtdWNoIGZhc3RlciB0aGFuIGBPYmplY3QuYXNzaWduYCBvciBzcHJlYWQuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMucG9zaXRpb24ub2Zmc2V0LFxuICAgICAgICAgICAgbGluZTogdGhpcy5wb3NpdGlvbi5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiB0aGlzLnBvc2l0aW9uLmNvbHVtbixcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgY29kZSBwb2ludCBhdCB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgcGFyc2VyLlxuICAgICAqIFRocm93cyBpZiB0aGUgaW5kZXggaXMgb3V0IG9mIGJvdW5kLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUuY2hhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMucG9zaXRpb24ub2Zmc2V0O1xuICAgICAgICBpZiAob2Zmc2V0ID49IHRoaXMubWVzc2FnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdvdXQgb2YgYm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29kZSA9IGNvZGVQb2ludEF0KHRoaXMubWVzc2FnZSwgb2Zmc2V0KTtcbiAgICAgICAgaWYgKGNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJPZmZzZXQgXCIuY29uY2F0KG9mZnNldCwgXCIgaXMgYXQgaW52YWxpZCBVVEYtMTYgY29kZSB1bml0IGJvdW5kYXJ5XCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoa2luZCwgbG9jYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbDogbnVsbCxcbiAgICAgICAgICAgIGVycjoge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogQnVtcCB0aGUgcGFyc2VyIHRvIHRoZSBuZXh0IFVURi0xNiBjb2RlIHVuaXQuICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5idW1wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0VPRigpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvZGUgPSB0aGlzLmNoYXIoKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IDEwIC8qICdcXG4nICovKSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uLmxpbmUgKz0gMTtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24uY29sdW1uID0gMTtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ub2Zmc2V0ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uLmNvbHVtbiArPSAxO1xuICAgICAgICAgICAgLy8gMCB+IDB4MTAwMDAgLT4gdW5pY29kZSBCTVAsIG90aGVyd2lzZSBza2lwIHRoZSBzdXJyb2dhdGUgcGFpci5cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ub2Zmc2V0ICs9IGNvZGUgPCAweDEwMDAwID8gMSA6IDI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBzdWJzdHJpbmcgc3RhcnRpbmcgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIHBhcnNlciBoYXNcbiAgICAgKiB0aGUgZ2l2ZW4gcHJlZml4LCB0aGVuIGJ1bXAgdGhlIHBhcnNlciB0byB0aGUgY2hhcmFjdGVyIGltbWVkaWF0ZWx5XG4gICAgICogZm9sbG93aW5nIHRoZSBwcmVmaXggYW5kIHJldHVybiB0cnVlLiBPdGhlcndpc2UsIGRvbid0IGJ1bXAgdGhlIHBhcnNlclxuICAgICAqIGFuZCByZXR1cm4gZmFsc2UuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5idW1wSWYgPSBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICAgIGlmIChzdGFydHNXaXRoKHRoaXMubWVzc2FnZSwgcHJlZml4LCB0aGlzLm9mZnNldCgpKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJ1bXAgdGhlIHBhcnNlciB1bnRpbCB0aGUgcGF0dGVybiBjaGFyYWN0ZXIgaXMgZm91bmQgYW5kIHJldHVybiBgdHJ1ZWAuXG4gICAgICogT3RoZXJ3aXNlIGJ1bXAgdG8gdGhlIGVuZCBvZiB0aGUgZmlsZSBhbmQgcmV0dXJuIGBmYWxzZWAuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5idW1wVW50aWwgPSBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMubWVzc2FnZS5pbmRleE9mKHBhdHRlcm4sIGN1cnJlbnRPZmZzZXQpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5idW1wVG8oaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1bXBUbyh0aGlzLm1lc3NhZ2UubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQnVtcCB0aGUgcGFyc2VyIHRvIHRoZSB0YXJnZXQgb2Zmc2V0LlxuICAgICAqIElmIHRhcmdldCBvZmZzZXQgaXMgYmV5b25kIHRoZSBlbmQgb2YgdGhlIGlucHV0LCBidW1wIHRoZSBwYXJzZXIgdG8gdGhlIGVuZCBvZiB0aGUgaW5wdXQuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5idW1wVG8gPSBmdW5jdGlvbiAodGFyZ2V0T2Zmc2V0KSB7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCgpID4gdGFyZ2V0T2Zmc2V0KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInRhcmdldE9mZnNldCBcIi5jb25jYXQodGFyZ2V0T2Zmc2V0LCBcIiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgY3VycmVudCBvZmZzZXQgXCIpLmNvbmNhdCh0aGlzLm9mZnNldCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0T2Zmc2V0ID0gTWF0aC5taW4odGFyZ2V0T2Zmc2V0LCB0aGlzLm1lc3NhZ2UubGVuZ3RoKTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gdGFyZ2V0T2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gdGFyZ2V0T2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJ0YXJnZXRPZmZzZXQgXCIuY29uY2F0KHRhcmdldE9mZnNldCwgXCIgaXMgYXQgaW52YWxpZCBVVEYtMTYgY29kZSB1bml0IGJvdW5kYXJ5XCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYnVtcCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNFT0YoKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogYWR2YW5jZSB0aGUgcGFyc2VyIHRocm91Z2ggYWxsIHdoaXRlc3BhY2UgdG8gdGhlIG5leHQgbm9uLXdoaXRlc3BhY2UgY29kZSB1bml0LiAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUuYnVtcFNwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aGlsZSAoIXRoaXMuaXNFT0YoKSAmJiBfaXNXaGl0ZVNwYWNlKHRoaXMuY2hhcigpKSkge1xuICAgICAgICAgICAgdGhpcy5idW1wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBlZWsgYXQgdGhlICpuZXh0KiBVbmljb2RlIGNvZGVwb2ludCBpbiB0aGUgaW5wdXQgd2l0aG91dCBhZHZhbmNpbmcgdGhlIHBhcnNlci5cbiAgICAgKiBJZiB0aGUgaW5wdXQgaGFzIGJlZW4gZXhoYXVzdGVkLCB0aGVuIHRoaXMgcmV0dXJucyBudWxsLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFT0YoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvZGUgPSB0aGlzLmNoYXIoKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG4gICAgICAgIHZhciBuZXh0Q29kZSA9IHRoaXMubWVzc2FnZS5jaGFyQ29kZUF0KG9mZnNldCArIChjb2RlID49IDB4MTAwMDAgPyAyIDogMSkpO1xuICAgICAgICByZXR1cm4gbmV4dENvZGUgIT09IG51bGwgJiYgbmV4dENvZGUgIT09IHZvaWQgMCA/IG5leHRDb2RlIDogbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBQYXJzZXI7XG59KCkpO1xuZXhwb3J0IHsgUGFyc2VyIH07XG4vKipcbiAqIFRoaXMgY2hlY2sgaWYgY29kZXBvaW50IGlzIGFscGhhYmV0IChsb3dlciAmIHVwcGVyY2FzZSlcbiAqIEBwYXJhbSBjb2RlcG9pbnRcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIF9pc0FscGhhKGNvZGVwb2ludCkge1xuICAgIHJldHVybiAoKGNvZGVwb2ludCA+PSA5NyAmJiBjb2RlcG9pbnQgPD0gMTIyKSB8fFxuICAgICAgICAoY29kZXBvaW50ID49IDY1ICYmIGNvZGVwb2ludCA8PSA5MCkpO1xufVxuZnVuY3Rpb24gX2lzQWxwaGFPclNsYXNoKGNvZGVwb2ludCkge1xuICAgIHJldHVybiBfaXNBbHBoYShjb2RlcG9pbnQpIHx8IGNvZGVwb2ludCA9PT0gNDc7IC8qICcvJyAqL1xufVxuLyoqIFNlZSBgcGFyc2VUYWdgIGZ1bmN0aW9uIGRvY3MuICovXG5mdW5jdGlvbiBfaXNQb3RlbnRpYWxFbGVtZW50TmFtZUNoYXIoYykge1xuICAgIHJldHVybiAoYyA9PT0gNDUgLyogJy0nICovIHx8XG4gICAgICAgIGMgPT09IDQ2IC8qICcuJyAqLyB8fFxuICAgICAgICAoYyA+PSA0OCAmJiBjIDw9IDU3KSAvKiAwLi45ICovIHx8XG4gICAgICAgIGMgPT09IDk1IC8qICdfJyAqLyB8fFxuICAgICAgICAoYyA+PSA5NyAmJiBjIDw9IDEyMikgLyoqIGEuLnogKi8gfHxcbiAgICAgICAgKGMgPj0gNjUgJiYgYyA8PSA5MCkgLyogQS4uWiAqLyB8fFxuICAgICAgICBjID09IDB4YjcgfHxcbiAgICAgICAgKGMgPj0gMHhjMCAmJiBjIDw9IDB4ZDYpIHx8XG4gICAgICAgIChjID49IDB4ZDggJiYgYyA8PSAweGY2KSB8fFxuICAgICAgICAoYyA+PSAweGY4ICYmIGMgPD0gMHgzN2QpIHx8XG4gICAgICAgIChjID49IDB4MzdmICYmIGMgPD0gMHgxZmZmKSB8fFxuICAgICAgICAoYyA+PSAweDIwMGMgJiYgYyA8PSAweDIwMGQpIHx8XG4gICAgICAgIChjID49IDB4MjAzZiAmJiBjIDw9IDB4MjA0MCkgfHxcbiAgICAgICAgKGMgPj0gMHgyMDcwICYmIGMgPD0gMHgyMThmKSB8fFxuICAgICAgICAoYyA+PSAweDJjMDAgJiYgYyA8PSAweDJmZWYpIHx8XG4gICAgICAgIChjID49IDB4MzAwMSAmJiBjIDw9IDB4ZDdmZikgfHxcbiAgICAgICAgKGMgPj0gMHhmOTAwICYmIGMgPD0gMHhmZGNmKSB8fFxuICAgICAgICAoYyA+PSAweGZkZjAgJiYgYyA8PSAweGZmZmQpIHx8XG4gICAgICAgIChjID49IDB4MTAwMDAgJiYgYyA8PSAweGVmZmZmKSk7XG59XG4vKipcbiAqIENvZGUgcG9pbnQgZXF1aXZhbGVudCBvZiByZWdleCBgXFxwe1doaXRlX1NwYWNlfWAuXG4gKiBGcm9tOiBodHRwczovL3d3dy51bmljb2RlLm9yZy9QdWJsaWMvVUNEL2xhdGVzdC91Y2QvUHJvcExpc3QudHh0XG4gKi9cbmZ1bmN0aW9uIF9pc1doaXRlU3BhY2UoYykge1xuICAgIHJldHVybiAoKGMgPj0gMHgwMDA5ICYmIGMgPD0gMHgwMDBkKSB8fFxuICAgICAgICBjID09PSAweDAwMjAgfHxcbiAgICAgICAgYyA9PT0gMHgwMDg1IHx8XG4gICAgICAgIChjID49IDB4MjAwZSAmJiBjIDw9IDB4MjAwZikgfHxcbiAgICAgICAgYyA9PT0gMHgyMDI4IHx8XG4gICAgICAgIGMgPT09IDB4MjAyOSk7XG59XG4vKipcbiAqIENvZGUgcG9pbnQgZXF1aXZhbGVudCBvZiByZWdleCBgXFxwe1BhdHRlcm5fU3ludGF4fWAuXG4gKiBTZWUgaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL1Byb3BMaXN0LnR4dFxuICovXG5mdW5jdGlvbiBfaXNQYXR0ZXJuU3ludGF4KGMpIHtcbiAgICByZXR1cm4gKChjID49IDB4MDAyMSAmJiBjIDw9IDB4MDAyMykgfHxcbiAgICAgICAgYyA9PT0gMHgwMDI0IHx8XG4gICAgICAgIChjID49IDB4MDAyNSAmJiBjIDw9IDB4MDAyNykgfHxcbiAgICAgICAgYyA9PT0gMHgwMDI4IHx8XG4gICAgICAgIGMgPT09IDB4MDAyOSB8fFxuICAgICAgICBjID09PSAweDAwMmEgfHxcbiAgICAgICAgYyA9PT0gMHgwMDJiIHx8XG4gICAgICAgIGMgPT09IDB4MDAyYyB8fFxuICAgICAgICBjID09PSAweDAwMmQgfHxcbiAgICAgICAgKGMgPj0gMHgwMDJlICYmIGMgPD0gMHgwMDJmKSB8fFxuICAgICAgICAoYyA+PSAweDAwM2EgJiYgYyA8PSAweDAwM2IpIHx8XG4gICAgICAgIChjID49IDB4MDAzYyAmJiBjIDw9IDB4MDAzZSkgfHxcbiAgICAgICAgKGMgPj0gMHgwMDNmICYmIGMgPD0gMHgwMDQwKSB8fFxuICAgICAgICBjID09PSAweDAwNWIgfHxcbiAgICAgICAgYyA9PT0gMHgwMDVjIHx8XG4gICAgICAgIGMgPT09IDB4MDA1ZCB8fFxuICAgICAgICBjID09PSAweDAwNWUgfHxcbiAgICAgICAgYyA9PT0gMHgwMDYwIHx8XG4gICAgICAgIGMgPT09IDB4MDA3YiB8fFxuICAgICAgICBjID09PSAweDAwN2MgfHxcbiAgICAgICAgYyA9PT0gMHgwMDdkIHx8XG4gICAgICAgIGMgPT09IDB4MDA3ZSB8fFxuICAgICAgICBjID09PSAweDAwYTEgfHxcbiAgICAgICAgKGMgPj0gMHgwMGEyICYmIGMgPD0gMHgwMGE1KSB8fFxuICAgICAgICBjID09PSAweDAwYTYgfHxcbiAgICAgICAgYyA9PT0gMHgwMGE3IHx8XG4gICAgICAgIGMgPT09IDB4MDBhOSB8fFxuICAgICAgICBjID09PSAweDAwYWIgfHxcbiAgICAgICAgYyA9PT0gMHgwMGFjIHx8XG4gICAgICAgIGMgPT09IDB4MDBhZSB8fFxuICAgICAgICBjID09PSAweDAwYjAgfHxcbiAgICAgICAgYyA9PT0gMHgwMGIxIHx8XG4gICAgICAgIGMgPT09IDB4MDBiNiB8fFxuICAgICAgICBjID09PSAweDAwYmIgfHxcbiAgICAgICAgYyA9PT0gMHgwMGJmIHx8XG4gICAgICAgIGMgPT09IDB4MDBkNyB8fFxuICAgICAgICBjID09PSAweDAwZjcgfHxcbiAgICAgICAgKGMgPj0gMHgyMDEwICYmIGMgPD0gMHgyMDE1KSB8fFxuICAgICAgICAoYyA+PSAweDIwMTYgJiYgYyA8PSAweDIwMTcpIHx8XG4gICAgICAgIGMgPT09IDB4MjAxOCB8fFxuICAgICAgICBjID09PSAweDIwMTkgfHxcbiAgICAgICAgYyA9PT0gMHgyMDFhIHx8XG4gICAgICAgIChjID49IDB4MjAxYiAmJiBjIDw9IDB4MjAxYykgfHxcbiAgICAgICAgYyA9PT0gMHgyMDFkIHx8XG4gICAgICAgIGMgPT09IDB4MjAxZSB8fFxuICAgICAgICBjID09PSAweDIwMWYgfHxcbiAgICAgICAgKGMgPj0gMHgyMDIwICYmIGMgPD0gMHgyMDI3KSB8fFxuICAgICAgICAoYyA+PSAweDIwMzAgJiYgYyA8PSAweDIwMzgpIHx8XG4gICAgICAgIGMgPT09IDB4MjAzOSB8fFxuICAgICAgICBjID09PSAweDIwM2EgfHxcbiAgICAgICAgKGMgPj0gMHgyMDNiICYmIGMgPD0gMHgyMDNlKSB8fFxuICAgICAgICAoYyA+PSAweDIwNDEgJiYgYyA8PSAweDIwNDMpIHx8XG4gICAgICAgIGMgPT09IDB4MjA0NCB8fFxuICAgICAgICBjID09PSAweDIwNDUgfHxcbiAgICAgICAgYyA9PT0gMHgyMDQ2IHx8XG4gICAgICAgIChjID49IDB4MjA0NyAmJiBjIDw9IDB4MjA1MSkgfHxcbiAgICAgICAgYyA9PT0gMHgyMDUyIHx8XG4gICAgICAgIGMgPT09IDB4MjA1MyB8fFxuICAgICAgICAoYyA+PSAweDIwNTUgJiYgYyA8PSAweDIwNWUpIHx8XG4gICAgICAgIChjID49IDB4MjE5MCAmJiBjIDw9IDB4MjE5NCkgfHxcbiAgICAgICAgKGMgPj0gMHgyMTk1ICYmIGMgPD0gMHgyMTk5KSB8fFxuICAgICAgICAoYyA+PSAweDIxOWEgJiYgYyA8PSAweDIxOWIpIHx8XG4gICAgICAgIChjID49IDB4MjE5YyAmJiBjIDw9IDB4MjE5ZikgfHxcbiAgICAgICAgYyA9PT0gMHgyMWEwIHx8XG4gICAgICAgIChjID49IDB4MjFhMSAmJiBjIDw9IDB4MjFhMikgfHxcbiAgICAgICAgYyA9PT0gMHgyMWEzIHx8XG4gICAgICAgIChjID49IDB4MjFhNCAmJiBjIDw9IDB4MjFhNSkgfHxcbiAgICAgICAgYyA9PT0gMHgyMWE2IHx8XG4gICAgICAgIChjID49IDB4MjFhNyAmJiBjIDw9IDB4MjFhZCkgfHxcbiAgICAgICAgYyA9PT0gMHgyMWFlIHx8XG4gICAgICAgIChjID49IDB4MjFhZiAmJiBjIDw9IDB4MjFjZCkgfHxcbiAgICAgICAgKGMgPj0gMHgyMWNlICYmIGMgPD0gMHgyMWNmKSB8fFxuICAgICAgICAoYyA+PSAweDIxZDAgJiYgYyA8PSAweDIxZDEpIHx8XG4gICAgICAgIGMgPT09IDB4MjFkMiB8fFxuICAgICAgICBjID09PSAweDIxZDMgfHxcbiAgICAgICAgYyA9PT0gMHgyMWQ0IHx8XG4gICAgICAgIChjID49IDB4MjFkNSAmJiBjIDw9IDB4MjFmMykgfHxcbiAgICAgICAgKGMgPj0gMHgyMWY0ICYmIGMgPD0gMHgyMmZmKSB8fFxuICAgICAgICAoYyA+PSAweDIzMDAgJiYgYyA8PSAweDIzMDcpIHx8XG4gICAgICAgIGMgPT09IDB4MjMwOCB8fFxuICAgICAgICBjID09PSAweDIzMDkgfHxcbiAgICAgICAgYyA9PT0gMHgyMzBhIHx8XG4gICAgICAgIGMgPT09IDB4MjMwYiB8fFxuICAgICAgICAoYyA+PSAweDIzMGMgJiYgYyA8PSAweDIzMWYpIHx8XG4gICAgICAgIChjID49IDB4MjMyMCAmJiBjIDw9IDB4MjMyMSkgfHxcbiAgICAgICAgKGMgPj0gMHgyMzIyICYmIGMgPD0gMHgyMzI4KSB8fFxuICAgICAgICBjID09PSAweDIzMjkgfHxcbiAgICAgICAgYyA9PT0gMHgyMzJhIHx8XG4gICAgICAgIChjID49IDB4MjMyYiAmJiBjIDw9IDB4MjM3YikgfHxcbiAgICAgICAgYyA9PT0gMHgyMzdjIHx8XG4gICAgICAgIChjID49IDB4MjM3ZCAmJiBjIDw9IDB4MjM5YSkgfHxcbiAgICAgICAgKGMgPj0gMHgyMzliICYmIGMgPD0gMHgyM2IzKSB8fFxuICAgICAgICAoYyA+PSAweDIzYjQgJiYgYyA8PSAweDIzZGIpIHx8XG4gICAgICAgIChjID49IDB4MjNkYyAmJiBjIDw9IDB4MjNlMSkgfHxcbiAgICAgICAgKGMgPj0gMHgyM2UyICYmIGMgPD0gMHgyNDI2KSB8fFxuICAgICAgICAoYyA+PSAweDI0MjcgJiYgYyA8PSAweDI0M2YpIHx8XG4gICAgICAgIChjID49IDB4MjQ0MCAmJiBjIDw9IDB4MjQ0YSkgfHxcbiAgICAgICAgKGMgPj0gMHgyNDRiICYmIGMgPD0gMHgyNDVmKSB8fFxuICAgICAgICAoYyA+PSAweDI1MDAgJiYgYyA8PSAweDI1YjYpIHx8XG4gICAgICAgIGMgPT09IDB4MjViNyB8fFxuICAgICAgICAoYyA+PSAweDI1YjggJiYgYyA8PSAweDI1YzApIHx8XG4gICAgICAgIGMgPT09IDB4MjVjMSB8fFxuICAgICAgICAoYyA+PSAweDI1YzIgJiYgYyA8PSAweDI1ZjcpIHx8XG4gICAgICAgIChjID49IDB4MjVmOCAmJiBjIDw9IDB4MjVmZikgfHxcbiAgICAgICAgKGMgPj0gMHgyNjAwICYmIGMgPD0gMHgyNjZlKSB8fFxuICAgICAgICBjID09PSAweDI2NmYgfHxcbiAgICAgICAgKGMgPj0gMHgyNjcwICYmIGMgPD0gMHgyNzY3KSB8fFxuICAgICAgICBjID09PSAweDI3NjggfHxcbiAgICAgICAgYyA9PT0gMHgyNzY5IHx8XG4gICAgICAgIGMgPT09IDB4Mjc2YSB8fFxuICAgICAgICBjID09PSAweDI3NmIgfHxcbiAgICAgICAgYyA9PT0gMHgyNzZjIHx8XG4gICAgICAgIGMgPT09IDB4Mjc2ZCB8fFxuICAgICAgICBjID09PSAweDI3NmUgfHxcbiAgICAgICAgYyA9PT0gMHgyNzZmIHx8XG4gICAgICAgIGMgPT09IDB4Mjc3MCB8fFxuICAgICAgICBjID09PSAweDI3NzEgfHxcbiAgICAgICAgYyA9PT0gMHgyNzcyIHx8XG4gICAgICAgIGMgPT09IDB4Mjc3MyB8fFxuICAgICAgICBjID09PSAweDI3NzQgfHxcbiAgICAgICAgYyA9PT0gMHgyNzc1IHx8XG4gICAgICAgIChjID49IDB4Mjc5NCAmJiBjIDw9IDB4MjdiZikgfHxcbiAgICAgICAgKGMgPj0gMHgyN2MwICYmIGMgPD0gMHgyN2M0KSB8fFxuICAgICAgICBjID09PSAweDI3YzUgfHxcbiAgICAgICAgYyA9PT0gMHgyN2M2IHx8XG4gICAgICAgIChjID49IDB4MjdjNyAmJiBjIDw9IDB4MjdlNSkgfHxcbiAgICAgICAgYyA9PT0gMHgyN2U2IHx8XG4gICAgICAgIGMgPT09IDB4MjdlNyB8fFxuICAgICAgICBjID09PSAweDI3ZTggfHxcbiAgICAgICAgYyA9PT0gMHgyN2U5IHx8XG4gICAgICAgIGMgPT09IDB4MjdlYSB8fFxuICAgICAgICBjID09PSAweDI3ZWIgfHxcbiAgICAgICAgYyA9PT0gMHgyN2VjIHx8XG4gICAgICAgIGMgPT09IDB4MjdlZCB8fFxuICAgICAgICBjID09PSAweDI3ZWUgfHxcbiAgICAgICAgYyA9PT0gMHgyN2VmIHx8XG4gICAgICAgIChjID49IDB4MjdmMCAmJiBjIDw9IDB4MjdmZikgfHxcbiAgICAgICAgKGMgPj0gMHgyODAwICYmIGMgPD0gMHgyOGZmKSB8fFxuICAgICAgICAoYyA+PSAweDI5MDAgJiYgYyA8PSAweDI5ODIpIHx8XG4gICAgICAgIGMgPT09IDB4Mjk4MyB8fFxuICAgICAgICBjID09PSAweDI5ODQgfHxcbiAgICAgICAgYyA9PT0gMHgyOTg1IHx8XG4gICAgICAgIGMgPT09IDB4Mjk4NiB8fFxuICAgICAgICBjID09PSAweDI5ODcgfHxcbiAgICAgICAgYyA9PT0gMHgyOTg4IHx8XG4gICAgICAgIGMgPT09IDB4Mjk4OSB8fFxuICAgICAgICBjID09PSAweDI5OGEgfHxcbiAgICAgICAgYyA9PT0gMHgyOThiIHx8XG4gICAgICAgIGMgPT09IDB4Mjk4YyB8fFxuICAgICAgICBjID09PSAweDI5OGQgfHxcbiAgICAgICAgYyA9PT0gMHgyOThlIHx8XG4gICAgICAgIGMgPT09IDB4Mjk4ZiB8fFxuICAgICAgICBjID09PSAweDI5OTAgfHxcbiAgICAgICAgYyA9PT0gMHgyOTkxIHx8XG4gICAgICAgIGMgPT09IDB4Mjk5MiB8fFxuICAgICAgICBjID09PSAweDI5OTMgfHxcbiAgICAgICAgYyA9PT0gMHgyOTk0IHx8XG4gICAgICAgIGMgPT09IDB4Mjk5NSB8fFxuICAgICAgICBjID09PSAweDI5OTYgfHxcbiAgICAgICAgYyA9PT0gMHgyOTk3IHx8XG4gICAgICAgIGMgPT09IDB4Mjk5OCB8fFxuICAgICAgICAoYyA+PSAweDI5OTkgJiYgYyA8PSAweDI5ZDcpIHx8XG4gICAgICAgIGMgPT09IDB4MjlkOCB8fFxuICAgICAgICBjID09PSAweDI5ZDkgfHxcbiAgICAgICAgYyA9PT0gMHgyOWRhIHx8XG4gICAgICAgIGMgPT09IDB4MjlkYiB8fFxuICAgICAgICAoYyA+PSAweDI5ZGMgJiYgYyA8PSAweDI5ZmIpIHx8XG4gICAgICAgIGMgPT09IDB4MjlmYyB8fFxuICAgICAgICBjID09PSAweDI5ZmQgfHxcbiAgICAgICAgKGMgPj0gMHgyOWZlICYmIGMgPD0gMHgyYWZmKSB8fFxuICAgICAgICAoYyA+PSAweDJiMDAgJiYgYyA8PSAweDJiMmYpIHx8XG4gICAgICAgIChjID49IDB4MmIzMCAmJiBjIDw9IDB4MmI0NCkgfHxcbiAgICAgICAgKGMgPj0gMHgyYjQ1ICYmIGMgPD0gMHgyYjQ2KSB8fFxuICAgICAgICAoYyA+PSAweDJiNDcgJiYgYyA8PSAweDJiNGMpIHx8XG4gICAgICAgIChjID49IDB4MmI0ZCAmJiBjIDw9IDB4MmI3MykgfHxcbiAgICAgICAgKGMgPj0gMHgyYjc0ICYmIGMgPD0gMHgyYjc1KSB8fFxuICAgICAgICAoYyA+PSAweDJiNzYgJiYgYyA8PSAweDJiOTUpIHx8XG4gICAgICAgIGMgPT09IDB4MmI5NiB8fFxuICAgICAgICAoYyA+PSAweDJiOTcgJiYgYyA8PSAweDJiZmYpIHx8XG4gICAgICAgIChjID49IDB4MmUwMCAmJiBjIDw9IDB4MmUwMSkgfHxcbiAgICAgICAgYyA9PT0gMHgyZTAyIHx8XG4gICAgICAgIGMgPT09IDB4MmUwMyB8fFxuICAgICAgICBjID09PSAweDJlMDQgfHxcbiAgICAgICAgYyA9PT0gMHgyZTA1IHx8XG4gICAgICAgIChjID49IDB4MmUwNiAmJiBjIDw9IDB4MmUwOCkgfHxcbiAgICAgICAgYyA9PT0gMHgyZTA5IHx8XG4gICAgICAgIGMgPT09IDB4MmUwYSB8fFxuICAgICAgICBjID09PSAweDJlMGIgfHxcbiAgICAgICAgYyA9PT0gMHgyZTBjIHx8XG4gICAgICAgIGMgPT09IDB4MmUwZCB8fFxuICAgICAgICAoYyA+PSAweDJlMGUgJiYgYyA8PSAweDJlMTYpIHx8XG4gICAgICAgIGMgPT09IDB4MmUxNyB8fFxuICAgICAgICAoYyA+PSAweDJlMTggJiYgYyA8PSAweDJlMTkpIHx8XG4gICAgICAgIGMgPT09IDB4MmUxYSB8fFxuICAgICAgICBjID09PSAweDJlMWIgfHxcbiAgICAgICAgYyA9PT0gMHgyZTFjIHx8XG4gICAgICAgIGMgPT09IDB4MmUxZCB8fFxuICAgICAgICAoYyA+PSAweDJlMWUgJiYgYyA8PSAweDJlMWYpIHx8XG4gICAgICAgIGMgPT09IDB4MmUyMCB8fFxuICAgICAgICBjID09PSAweDJlMjEgfHxcbiAgICAgICAgYyA9PT0gMHgyZTIyIHx8XG4gICAgICAgIGMgPT09IDB4MmUyMyB8fFxuICAgICAgICBjID09PSAweDJlMjQgfHxcbiAgICAgICAgYyA9PT0gMHgyZTI1IHx8XG4gICAgICAgIGMgPT09IDB4MmUyNiB8fFxuICAgICAgICBjID09PSAweDJlMjcgfHxcbiAgICAgICAgYyA9PT0gMHgyZTI4IHx8XG4gICAgICAgIGMgPT09IDB4MmUyOSB8fFxuICAgICAgICAoYyA+PSAweDJlMmEgJiYgYyA8PSAweDJlMmUpIHx8XG4gICAgICAgIGMgPT09IDB4MmUyZiB8fFxuICAgICAgICAoYyA+PSAweDJlMzAgJiYgYyA8PSAweDJlMzkpIHx8XG4gICAgICAgIChjID49IDB4MmUzYSAmJiBjIDw9IDB4MmUzYikgfHxcbiAgICAgICAgKGMgPj0gMHgyZTNjICYmIGMgPD0gMHgyZTNmKSB8fFxuICAgICAgICBjID09PSAweDJlNDAgfHxcbiAgICAgICAgYyA9PT0gMHgyZTQxIHx8XG4gICAgICAgIGMgPT09IDB4MmU0MiB8fFxuICAgICAgICAoYyA+PSAweDJlNDMgJiYgYyA8PSAweDJlNGYpIHx8XG4gICAgICAgIChjID49IDB4MmU1MCAmJiBjIDw9IDB4MmU1MSkgfHxcbiAgICAgICAgYyA9PT0gMHgyZTUyIHx8XG4gICAgICAgIChjID49IDB4MmU1MyAmJiBjIDw9IDB4MmU3ZikgfHxcbiAgICAgICAgKGMgPj0gMHgzMDAxICYmIGMgPD0gMHgzMDAzKSB8fFxuICAgICAgICBjID09PSAweDMwMDggfHxcbiAgICAgICAgYyA9PT0gMHgzMDA5IHx8XG4gICAgICAgIGMgPT09IDB4MzAwYSB8fFxuICAgICAgICBjID09PSAweDMwMGIgfHxcbiAgICAgICAgYyA9PT0gMHgzMDBjIHx8XG4gICAgICAgIGMgPT09IDB4MzAwZCB8fFxuICAgICAgICBjID09PSAweDMwMGUgfHxcbiAgICAgICAgYyA9PT0gMHgzMDBmIHx8XG4gICAgICAgIGMgPT09IDB4MzAxMCB8fFxuICAgICAgICBjID09PSAweDMwMTEgfHxcbiAgICAgICAgKGMgPj0gMHgzMDEyICYmIGMgPD0gMHgzMDEzKSB8fFxuICAgICAgICBjID09PSAweDMwMTQgfHxcbiAgICAgICAgYyA9PT0gMHgzMDE1IHx8XG4gICAgICAgIGMgPT09IDB4MzAxNiB8fFxuICAgICAgICBjID09PSAweDMwMTcgfHxcbiAgICAgICAgYyA9PT0gMHgzMDE4IHx8XG4gICAgICAgIGMgPT09IDB4MzAxOSB8fFxuICAgICAgICBjID09PSAweDMwMWEgfHxcbiAgICAgICAgYyA9PT0gMHgzMDFiIHx8XG4gICAgICAgIGMgPT09IDB4MzAxYyB8fFxuICAgICAgICBjID09PSAweDMwMWQgfHxcbiAgICAgICAgKGMgPj0gMHgzMDFlICYmIGMgPD0gMHgzMDFmKSB8fFxuICAgICAgICBjID09PSAweDMwMjAgfHxcbiAgICAgICAgYyA9PT0gMHgzMDMwIHx8XG4gICAgICAgIGMgPT09IDB4ZmQzZSB8fFxuICAgICAgICBjID09PSAweGZkM2YgfHxcbiAgICAgICAgKGMgPj0gMHhmZTQ1ICYmIGMgPD0gMHhmZTQ2KSk7XG59XG4iXSwibmFtZXMiOlsiX2EiLCJfX2Fzc2lnbiIsIkVycm9yS2luZCIsIlNLRUxFVE9OX1RZUEUiLCJUWVBFIiwiU1BBQ0VfU0VQQVJBVE9SX1JFR0VYIiwicGFyc2VOdW1iZXJTa2VsZXRvbiIsInBhcnNlTnVtYmVyU2tlbGV0b25Gcm9tU3RyaW5nIiwicGFyc2VEYXRlVGltZVNrZWxldG9uIiwiZ2V0QmVzdFBhdHRlcm4iLCJTUEFDRV9TRVBBUkFUT1JfU1RBUlRfUkVHRVgiLCJSZWdFeHAiLCJjb25jYXQiLCJzb3VyY2UiLCJTUEFDRV9TRVBBUkFUT1JfRU5EX1JFR0VYIiwiY3JlYXRlTG9jYXRpb24iLCJzdGFydCIsImVuZCIsImhhc05hdGl2ZVN0YXJ0c1dpdGgiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJzdGFydHNXaXRoIiwiaGFzTmF0aXZlRnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJoYXNOYXRpdmVGcm9tRW50cmllcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiaGFzTmF0aXZlQ29kZVBvaW50QXQiLCJjb2RlUG9pbnRBdCIsImhhc1RyaW1TdGFydCIsInRyaW1TdGFydCIsImhhc1RyaW1FbmQiLCJ0cmltRW5kIiwiaGFzTmF0aXZlSXNTYWZlSW50ZWdlciIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJuIiwiaXNGaW5pdGUiLCJNYXRoIiwiZmxvb3IiLCJhYnMiLCJSRUdFWF9TVVBQT1JUU19VX0FORF9ZIiwicmUiLCJSRSIsImV4ZWMiLCJfIiwicyIsInNlYXJjaCIsInBvc2l0aW9uIiwic2xpY2UiLCJsZW5ndGgiLCJjb2RlUG9pbnRzIiwiX2kiLCJhcmd1bWVudHMiLCJlbGVtZW50cyIsImkiLCJjb2RlIiwiUmFuZ2VFcnJvciIsImZyb21DaGFyQ29kZSIsImVudHJpZXMiLCJvYmoiLCJlbnRyaWVzXzEiLCJrIiwidiIsImluZGV4Iiwic2l6ZSIsInVuZGVmaW5lZCIsImZpcnN0IiwiY2hhckNvZGVBdCIsInNlY29uZCIsInJlcGxhY2UiLCJmbGFnIiwibWF0Y2hJZGVudGlmaWVyQXRJbmRleCIsIklERU5USUZJRVJfUFJFRklYX1JFXzEiLCJsYXN0SW5kZXgiLCJtYXRjaCIsImMiLCJfaXNXaGl0ZVNwYWNlIiwiX2lzUGF0dGVyblN5bnRheCIsInB1c2giLCJhcHBseSIsIlBhcnNlciIsIm1lc3NhZ2UiLCJvcHRpb25zIiwib2Zmc2V0IiwibGluZSIsImNvbHVtbiIsImlnbm9yZVRhZyIsImxvY2FsZSIsInJlcXVpcmVzT3RoZXJDbGF1c2UiLCJzaG91bGRQYXJzZVNrZWxldG9ucyIsInBhcnNlIiwiRXJyb3IiLCJwYXJzZU1lc3NhZ2UiLCJuZXN0aW5nTGV2ZWwiLCJwYXJlbnRBcmdUeXBlIiwiZXhwZWN0aW5nQ2xvc2VUYWciLCJpc0VPRiIsImNoYXIiLCJyZXN1bHQiLCJwYXJzZUFyZ3VtZW50IiwiZXJyIiwidmFsIiwiY2xvbmVQb3NpdGlvbiIsImJ1bXAiLCJ0eXBlIiwicG91bmQiLCJsb2NhdGlvbiIsInBlZWsiLCJlcnJvciIsIlVOTUFUQ0hFRF9DTE9TSU5HX1RBRyIsIl9pc0FscGhhIiwicGFyc2VUYWciLCJwYXJzZUxpdGVyYWwiLCJzdGFydFBvc2l0aW9uIiwidGFnTmFtZSIsInBhcnNlVGFnTmFtZSIsImJ1bXBTcGFjZSIsImJ1bXBJZiIsImxpdGVyYWwiLCJ2YWx1ZSIsImNoaWxkcmVuUmVzdWx0IiwiY2hpbGRyZW4iLCJlbmRUYWdTdGFydFBvc2l0aW9uIiwiSU5WQUxJRF9UQUciLCJjbG9zaW5nVGFnTmFtZVN0YXJ0UG9zaXRpb24iLCJjbG9zaW5nVGFnTmFtZSIsInRhZyIsIlVOQ0xPU0VEX1RBRyIsInN0YXJ0T2Zmc2V0IiwiX2lzUG90ZW50aWFsRWxlbWVudE5hbWVDaGFyIiwicGFyc2VRdW90ZVJlc3VsdCIsInRyeVBhcnNlUXVvdGUiLCJwYXJzZVVucXVvdGVkUmVzdWx0IiwidHJ5UGFyc2VVbnF1b3RlZCIsInBhcnNlTGVmdEFuZ2xlUmVzdWx0IiwidHJ5UGFyc2VMZWZ0QW5nbGVCcmFja2V0IiwiX2lzQWxwaGFPclNsYXNoIiwiY2giLCJvcGVuaW5nQnJhY2VQb3NpdGlvbiIsIkVYUEVDVF9BUkdVTUVOVF9DTE9TSU5HX0JSQUNFIiwiRU1QVFlfQVJHVU1FTlQiLCJwYXJzZUlkZW50aWZpZXJJZlBvc3NpYmxlIiwiTUFMRk9STUVEX0FSR1VNRU5UIiwiYXJndW1lbnQiLCJwYXJzZUFyZ3VtZW50T3B0aW9ucyIsInN0YXJ0aW5nUG9zaXRpb24iLCJlbmRPZmZzZXQiLCJidW1wVG8iLCJlbmRQb3NpdGlvbiIsInR5cGVTdGFydFBvc2l0aW9uIiwiYXJnVHlwZSIsInR5cGVFbmRQb3NpdGlvbiIsIkVYUEVDVF9BUkdVTUVOVF9UWVBFIiwic3R5bGVBbmRMb2NhdGlvbiIsInN0eWxlU3RhcnRQb3NpdGlvbiIsInBhcnNlU2ltcGxlQXJnU3R5bGVJZlBvc3NpYmxlIiwic3R5bGUiLCJFWFBFQ1RfQVJHVU1FTlRfU1RZTEUiLCJzdHlsZUxvY2F0aW9uIiwiYXJnQ2xvc2VSZXN1bHQiLCJ0cnlQYXJzZUFyZ3VtZW50Q2xvc2UiLCJsb2NhdGlvbl8xIiwic2tlbGV0b24iLCJudW1iZXIiLCJFWFBFQ1RfREFURV9USU1FX1NLRUxFVE9OIiwiZGF0ZVRpbWVQYXR0ZXJuIiwiZGF0ZVRpbWUiLCJwYXR0ZXJuIiwicGFyc2VkT3B0aW9ucyIsImRhdGUiLCJ0aW1lIiwidHlwZUVuZFBvc2l0aW9uXzEiLCJFWFBFQ1RfU0VMRUNUX0FSR1VNRU5UX09QVElPTlMiLCJpZGVudGlmaWVyQW5kTG9jYXRpb24iLCJwbHVyYWxPZmZzZXQiLCJFWFBFQ1RfUExVUkFMX0FSR1VNRU5UX09GRlNFVF9WQUxVRSIsInRyeVBhcnNlRGVjaW1hbEludGVnZXIiLCJJTlZBTElEX1BMVVJBTF9BUkdVTUVOVF9PRkZTRVRfVkFMVUUiLCJvcHRpb25zUmVzdWx0IiwidHJ5UGFyc2VQbHVyYWxPclNlbGVjdE9wdGlvbnMiLCJsb2NhdGlvbl8yIiwic2VsZWN0IiwicGx1cmFsIiwicGx1cmFsVHlwZSIsIklOVkFMSURfQVJHVU1FTlRfVFlQRSIsIm5lc3RlZEJyYWNlcyIsImFwb3N0cm9waGVQb3NpdGlvbiIsImJ1bXBVbnRpbCIsIlVOQ0xPU0VEX1FVT1RFX0lOX0FSR1VNRU5UX1NUWUxFIiwidG9rZW5zIiwiZSIsIklOVkFMSURfTlVNQkVSX1NLRUxFVE9OIiwiZXhwZWN0Q2xvc2VUYWciLCJwYXJzZWRGaXJzdElkZW50aWZpZXIiLCJoYXNPdGhlckNsYXVzZSIsInBhcnNlZFNlbGVjdG9ycyIsIlNldCIsInNlbGVjdG9yIiwic2VsZWN0b3JMb2NhdGlvbiIsIkVYUEVDVF9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1IiLCJJTlZBTElEX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUiIsImhhcyIsIkRVUExJQ0FURV9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1IiLCJEVVBMSUNBVEVfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SIiwiRVhQRUNUX1NFTEVDVF9BUkdVTUVOVF9TRUxFQ1RPUl9GUkFHTUVOVCIsIkVYUEVDVF9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1JfRlJBR01FTlQiLCJmcmFnbWVudFJlc3VsdCIsImFkZCIsIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1IiLCJNSVNTSU5HX09USEVSX0NMQVVTRSIsImV4cGVjdE51bWJlckVycm9yIiwiaW52YWxpZE51bWJlckVycm9yIiwic2lnbiIsImhhc0RpZ2l0cyIsImRlY2ltYWwiLCJraW5kIiwicHJlZml4IiwiY3VycmVudE9mZnNldCIsImluZGV4T2YiLCJ0YXJnZXRPZmZzZXQiLCJtaW4iLCJuZXh0Q29kZSIsImNvZGVwb2ludCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPACE_SEPARATOR_REGEX: () => (/* binding */ SPACE_SEPARATOR_REGEX),\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL3JlZ2V4LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ08sSUFBSUEscUJBQXFCLEdBQUcsOENBQThDO0FBQzFFLElBQUlDLGlCQUFpQixHQUFHLHNDQUFzQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBRE1JTlxcT25lRHJpdmVcXERlc2t0b3BcXEltIGEgYmlyZGRkZGRkZFxcbm9kZV9tb2R1bGVzXFxAZm9ybWF0anNcXGljdS1tZXNzYWdlZm9ybWF0LXBhcnNlclxcbGliXFxyZWdleC5nZW5lcmF0ZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGdlbmVyYXRlZCBmcm9tIHJlZ2V4LWdlbi50c1xuZXhwb3J0IHZhciBTUEFDRV9TRVBBUkFUT1JfUkVHRVggPSAvWyBcXHhBMFxcdTE2ODBcXHUyMDAwLVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBdLztcbmV4cG9ydCB2YXIgV0hJVEVfU1BBQ0VfUkVHRVggPSAvW1xcdC1cXHIgXFx4ODVcXHUyMDBFXFx1MjAwRlxcdTIwMjhcXHUyMDI5XS87XG4iXSwibmFtZXMiOlsiU1BBQ0VfU0VQQVJBVE9SX1JFR0VYIiwiV0hJVEVfU1BBQ0VfUkVHRVgiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   timeData: () => (/* binding */ timeData)\n/* harmony export */ });\n// @generated from time-data-gen.ts\n// prettier-ignore  \nvar timeData = {\n  \"001\": [\"H\", \"h\"],\n  \"419\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"AC\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"AD\": [\"H\", \"hB\"],\n  \"AE\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"AF\": [\"H\", \"hb\", \"hB\", \"h\"],\n  \"AG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"AI\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"AL\": [\"h\", \"H\", \"hB\"],\n  \"AM\": [\"H\", \"hB\"],\n  \"AO\": [\"H\", \"hB\"],\n  \"AR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"AS\": [\"h\", \"H\"],\n  \"AT\": [\"H\", \"hB\"],\n  \"AU\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"AW\": [\"H\", \"hB\"],\n  \"AX\": [\"H\"],\n  \"AZ\": [\"H\", \"hB\", \"h\"],\n  \"BA\": [\"H\", \"hB\", \"h\"],\n  \"BB\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BD\": [\"h\", \"hB\", \"H\"],\n  \"BE\": [\"H\", \"hB\"],\n  \"BF\": [\"H\", \"hB\"],\n  \"BG\": [\"H\", \"hB\", \"h\"],\n  \"BH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"BI\": [\"H\", \"h\"],\n  \"BJ\": [\"H\", \"hB\"],\n  \"BL\": [\"H\", \"hB\"],\n  \"BM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BN\": [\"hb\", \"hB\", \"h\", \"H\"],\n  \"BO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"BQ\": [\"H\"],\n  \"BR\": [\"H\", \"hB\"],\n  \"BS\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BT\": [\"h\", \"H\"],\n  \"BW\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"BY\": [\"H\", \"h\"],\n  \"BZ\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CA\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"CC\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CD\": [\"hB\", \"H\"],\n  \"CF\": [\"H\", \"h\", \"hB\"],\n  \"CG\": [\"H\", \"hB\"],\n  \"CH\": [\"H\", \"hB\", \"h\"],\n  \"CI\": [\"H\", \"hB\"],\n  \"CK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CL\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CM\": [\"H\", \"h\", \"hB\"],\n  \"CN\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"CO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CP\": [\"H\"],\n  \"CR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CU\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CV\": [\"H\", \"hB\"],\n  \"CW\": [\"H\", \"hB\"],\n  \"CX\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CY\": [\"h\", \"H\", \"hb\", \"hB\"],\n  \"CZ\": [\"H\"],\n  \"DE\": [\"H\", \"hB\"],\n  \"DG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"DJ\": [\"h\", \"H\"],\n  \"DK\": [\"H\"],\n  \"DM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"DO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"DZ\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"EA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"EC\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"EE\": [\"H\", \"hB\"],\n  \"EG\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"EH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"ER\": [\"h\", \"H\"],\n  \"ES\": [\"H\", \"hB\", \"h\", \"hb\"],\n  \"ET\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"FI\": [\"H\"],\n  \"FJ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"FK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"FM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"FO\": [\"H\", \"h\"],\n  \"FR\": [\"H\", \"hB\"],\n  \"GA\": [\"H\", \"hB\"],\n  \"GB\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GD\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GE\": [\"H\", \"hB\", \"h\"],\n  \"GF\": [\"H\", \"hB\"],\n  \"GG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GH\": [\"h\", \"H\"],\n  \"GI\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GL\": [\"H\", \"h\"],\n  \"GM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GN\": [\"H\", \"hB\"],\n  \"GP\": [\"H\", \"hB\"],\n  \"GQ\": [\"H\", \"hB\", \"h\", \"hb\"],\n  \"GR\": [\"h\", \"H\", \"hb\", \"hB\"],\n  \"GT\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"GU\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GW\": [\"H\", \"hB\"],\n  \"GY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"HK\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"HN\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"HR\": [\"H\", \"hB\"],\n  \"HU\": [\"H\", \"h\"],\n  \"IC\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"ID\": [\"H\"],\n  \"IE\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IL\": [\"H\", \"hB\"],\n  \"IM\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IN\": [\"h\", \"H\"],\n  \"IO\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IQ\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"IR\": [\"hB\", \"H\"],\n  \"IS\": [\"H\"],\n  \"IT\": [\"H\", \"hB\"],\n  \"JE\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"JM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"JO\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"JP\": [\"H\", \"K\", \"h\"],\n  \"KE\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"KG\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"KH\": [\"hB\", \"h\", \"H\", \"hb\"],\n  \"KI\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KM\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"KN\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KP\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"KR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"KW\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"KY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KZ\": [\"H\", \"hB\"],\n  \"LA\": [\"H\", \"hb\", \"hB\", \"h\"],\n  \"LB\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"LC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"LI\": [\"H\", \"hB\", \"h\"],\n  \"LK\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"LR\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"LS\": [\"h\", \"H\"],\n  \"LT\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"LU\": [\"H\", \"h\", \"hB\"],\n  \"LV\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"LY\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"MC\": [\"H\", \"hB\"],\n  \"MD\": [\"H\", \"hB\"],\n  \"ME\": [\"H\", \"hB\", \"h\"],\n  \"MF\": [\"H\", \"hB\"],\n  \"MG\": [\"H\", \"h\"],\n  \"MH\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"ML\": [\"H\"],\n  \"MM\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"MN\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"MO\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MP\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MQ\": [\"H\", \"hB\"],\n  \"MR\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MS\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"MT\": [\"H\", \"h\"],\n  \"MU\": [\"H\", \"h\"],\n  \"MV\": [\"H\", \"h\"],\n  \"MW\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MX\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"MY\": [\"hb\", \"hB\", \"h\", \"H\"],\n  \"MZ\": [\"H\", \"hB\"],\n  \"NA\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"NC\": [\"H\", \"hB\"],\n  \"NE\": [\"H\"],\n  \"NF\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NI\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"NL\": [\"H\", \"hB\"],\n  \"NO\": [\"H\", \"h\"],\n  \"NP\": [\"H\", \"h\", \"hB\"],\n  \"NR\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NU\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NZ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"OM\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PA\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PE\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PF\": [\"H\", \"h\", \"hB\"],\n  \"PG\": [\"h\", \"H\"],\n  \"PH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PK\": [\"h\", \"hB\", \"H\"],\n  \"PL\": [\"H\", \"h\"],\n  \"PM\": [\"H\", \"hB\"],\n  \"PN\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"PR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PS\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PT\": [\"H\", \"hB\"],\n  \"PW\": [\"h\", \"H\"],\n  \"PY\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"QA\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"RE\": [\"H\", \"hB\"],\n  \"RO\": [\"H\", \"hB\"],\n  \"RS\": [\"H\", \"hB\", \"h\"],\n  \"RU\": [\"H\"],\n  \"RW\": [\"H\", \"h\"],\n  \"SA\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SB\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SC\": [\"H\", \"h\", \"hB\"],\n  \"SD\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SE\": [\"H\"],\n  \"SG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SH\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"SI\": [\"H\", \"hB\"],\n  \"SJ\": [\"H\"],\n  \"SK\": [\"H\"],\n  \"SL\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SM\": [\"H\", \"h\", \"hB\"],\n  \"SN\": [\"H\", \"h\", \"hB\"],\n  \"SO\": [\"h\", \"H\"],\n  \"SR\": [\"H\", \"hB\"],\n  \"SS\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"ST\": [\"H\", \"hB\"],\n  \"SV\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"SX\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"SY\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SZ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TA\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"TC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TD\": [\"h\", \"H\", \"hB\"],\n  \"TF\": [\"H\", \"h\", \"hB\"],\n  \"TG\": [\"H\", \"hB\"],\n  \"TH\": [\"H\", \"h\"],\n  \"TJ\": [\"H\", \"h\"],\n  \"TL\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"TM\": [\"H\", \"h\"],\n  \"TN\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"TO\": [\"h\", \"H\"],\n  \"TR\": [\"H\", \"hB\"],\n  \"TT\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TW\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"TZ\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"UA\": [\"H\", \"hB\", \"h\"],\n  \"UG\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"UM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"US\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"UY\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"UZ\": [\"H\", \"hB\", \"h\"],\n  \"VA\": [\"H\", \"h\", \"hB\"],\n  \"VC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VE\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"VG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VI\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VN\": [\"H\", \"h\"],\n  \"VU\": [\"h\", \"H\"],\n  \"WF\": [\"H\", \"hB\"],\n  \"WS\": [\"h\", \"H\"],\n  \"XK\": [\"H\", \"hB\", \"h\"],\n  \"YE\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"YT\": [\"H\", \"hB\"],\n  \"ZA\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"ZM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"ZW\": [\"H\", \"h\"],\n  \"af-ZA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"ar-001\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"ca-ES\": [\"H\", \"h\", \"hB\"],\n  \"en-001\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"en-HK\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"en-IL\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"en-MY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"es-BR\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"es-ES\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"es-GQ\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"fr-CA\": [\"H\", \"h\", \"hB\"],\n  \"gl-ES\": [\"H\", \"h\", \"hB\"],\n  \"gu-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"hi-IN\": [\"hB\", \"h\", \"H\"],\n  \"it-CH\": [\"H\", \"h\", \"hB\"],\n  \"it-IT\": [\"H\", \"h\", \"hB\"],\n  \"kn-IN\": [\"hB\", \"h\", \"H\"],\n  \"ml-IN\": [\"hB\", \"h\", \"H\"],\n  \"mr-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"pa-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"ta-IN\": [\"hB\", \"h\", \"hb\", \"H\"],\n  \"te-IN\": [\"hB\", \"h\", \"H\"],\n  \"zu-ZA\": [\"H\", \"hB\", \"hb\", \"h\"]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* binding */ SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* binding */ TYPE),\n/* harmony export */   createLiteralElement: () => (/* binding */ createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* binding */ createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* binding */ isArgumentElement),\n/* harmony export */   isDateElement: () => (/* binding */ isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* binding */ isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* binding */ isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* binding */ isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* binding */ isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* binding */ isPluralElement),\n/* harmony export */   isPoundElement: () => (/* binding */ isPoundElement),\n/* harmony export */   isSelectElement: () => (/* binding */ isSelectElement),\n/* harmony export */   isTagElement: () => (/* binding */ isTagElement),\n/* harmony export */   isTimeElement: () => (/* binding */ isTimeElement)\n/* harmony export */ });\nvar TYPE;\n(function (TYPE) {\n  /**\n   * Raw text\n   */\n  TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n  /**\n   * Variable w/o any format, e.g `var` in `this is a {var}`\n   */\n  TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n  /**\n   * Variable w/ number format\n   */\n  TYPE[TYPE[\"number\"] = 2] = \"number\";\n  /**\n   * Variable w/ date format\n   */\n  TYPE[TYPE[\"date\"] = 3] = \"date\";\n  /**\n   * Variable w/ time format\n   */\n  TYPE[TYPE[\"time\"] = 4] = \"time\";\n  /**\n   * Variable w/ select format\n   */\n  TYPE[TYPE[\"select\"] = 5] = \"select\";\n  /**\n   * Variable w/ plural format\n   */\n  TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n  /**\n   * Only possible within plural argument.\n   * This is the `#` symbol that will be substituted with the count.\n   */\n  TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n  /**\n   * XML-like tag\n   */\n  TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nvar SKELETON_TYPE;\n(function (SKELETON_TYPE) {\n  SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n  SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\nfunction isLiteralElement(el) {\n  return el.type === TYPE.literal;\n}\nfunction isArgumentElement(el) {\n  return el.type === TYPE.argument;\n}\nfunction isNumberElement(el) {\n  return el.type === TYPE.number;\n}\nfunction isDateElement(el) {\n  return el.type === TYPE.date;\n}\nfunction isTimeElement(el) {\n  return el.type === TYPE.time;\n}\nfunction isSelectElement(el) {\n  return el.type === TYPE.select;\n}\nfunction isPluralElement(el) {\n  return el.type === TYPE.plural;\n}\nfunction isPoundElement(el) {\n  return el.type === TYPE.pound;\n}\nfunction isTagElement(el) {\n  return el.type === TYPE.tag;\n}\nfunction isNumberSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);\n}\nfunction isDateTimeSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);\n}\nfunction createLiteralElement(value) {\n  return {\n    type: TYPE.literal,\n    value: value\n  };\n}\nfunction createNumberElement(value, style) {\n  return {\n    type: TYPE.number,\n    value: value,\n    style: style\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFPLElBQUlBLElBQUk7QUFDZixDQUFDLFVBQVVBLElBQUksRUFBRTtFQUNiO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTO0VBQ3JDO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVO0VBQ3ZDO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQ25DO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO0VBQy9CO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO0VBQy9CO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQ25DO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQ25DO0FBQ0o7QUFDQTtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU87RUFDakM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUs7QUFDakMsQ0FBQyxFQUFFQSxJQUFJLEtBQUtBLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLElBQUlDLGFBQWE7QUFDeEIsQ0FBQyxVQUFVQSxhQUFhLEVBQUU7RUFDdEJBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDckRBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVU7QUFDN0QsQ0FBQyxFQUFFQSxhQUFhLEtBQUtBLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsRUFBRSxFQUFFO0VBQ2pDLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNLLE9BQU87QUFDbkM7QUFDTyxTQUFTQyxpQkFBaUJBLENBQUNILEVBQUUsRUFBRTtFQUNsQyxPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDTyxRQUFRO0FBQ3BDO0FBQ08sU0FBU0MsZUFBZUEsQ0FBQ0wsRUFBRSxFQUFFO0VBQ2hDLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNTLE1BQU07QUFDbEM7QUFDTyxTQUFTQyxhQUFhQSxDQUFDUCxFQUFFLEVBQUU7RUFDOUIsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ1csSUFBSTtBQUNoQztBQUNPLFNBQVNDLGFBQWFBLENBQUNULEVBQUUsRUFBRTtFQUM5QixPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDYSxJQUFJO0FBQ2hDO0FBQ08sU0FBU0MsZUFBZUEsQ0FBQ1gsRUFBRSxFQUFFO0VBQ2hDLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNlLE1BQU07QUFDbEM7QUFDTyxTQUFTQyxlQUFlQSxDQUFDYixFQUFFLEVBQUU7RUFDaEMsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ2lCLE1BQU07QUFDbEM7QUFDTyxTQUFTQyxjQUFjQSxDQUFDZixFQUFFLEVBQUU7RUFDL0IsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ21CLEtBQUs7QUFDakM7QUFDTyxTQUFTQyxZQUFZQSxDQUFDakIsRUFBRSxFQUFFO0VBQzdCLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNxQixHQUFHO0FBQy9CO0FBQ08sU0FBU0MsZ0JBQWdCQSxDQUFDbkIsRUFBRSxFQUFFO0VBQ2pDLE9BQU8sQ0FBQyxFQUFFQSxFQUFFLElBQUksT0FBT0EsRUFBRSxLQUFLLFFBQVEsSUFBSUEsRUFBRSxDQUFDQyxJQUFJLEtBQUtILGFBQWEsQ0FBQ1EsTUFBTSxDQUFDO0FBQy9FO0FBQ08sU0FBU2Msa0JBQWtCQSxDQUFDcEIsRUFBRSxFQUFFO0VBQ25DLE9BQU8sQ0FBQyxFQUFFQSxFQUFFLElBQUksT0FBT0EsRUFBRSxLQUFLLFFBQVEsSUFBSUEsRUFBRSxDQUFDQyxJQUFJLEtBQUtILGFBQWEsQ0FBQ3VCLFFBQVEsQ0FBQztBQUNqRjtBQUNPLFNBQVNDLG9CQUFvQkEsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3hDLE9BQU87SUFDSHRCLElBQUksRUFBRUosSUFBSSxDQUFDSyxPQUFPO0lBQ2xCcUIsS0FBSyxFQUFFQTtFQUNYLENBQUM7QUFDTDtBQUNPLFNBQVNDLG1CQUFtQkEsQ0FBQ0QsS0FBSyxFQUFFRSxLQUFLLEVBQUU7RUFDOUMsT0FBTztJQUNIeEIsSUFBSSxFQUFFSixJQUFJLENBQUNTLE1BQU07SUFDakJpQixLQUFLLEVBQUVBLEtBQUs7SUFDWkUsS0FBSyxFQUFFQTtFQUNYLENBQUM7QUFDTCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBRE1JTlxcT25lRHJpdmVcXERlc2t0b3BcXEltIGEgYmlyZGRkZGRkZFxcbm9kZV9tb2R1bGVzXFxAZm9ybWF0anNcXGljdS1tZXNzYWdlZm9ybWF0LXBhcnNlclxcbGliXFx0eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFRZUEU7XG4oZnVuY3Rpb24gKFRZUEUpIHtcbiAgICAvKipcbiAgICAgKiBSYXcgdGV4dFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImxpdGVyYWxcIl0gPSAwXSA9IFwibGl0ZXJhbFwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvbyBhbnkgZm9ybWF0LCBlLmcgYHZhcmAgaW4gYHRoaXMgaXMgYSB7dmFyfWBcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJhcmd1bWVudFwiXSA9IDFdID0gXCJhcmd1bWVudFwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIG51bWJlciBmb3JtYXRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJudW1iZXJcIl0gPSAyXSA9IFwibnVtYmVyXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gZGF0ZSBmb3JtYXRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJkYXRlXCJdID0gM10gPSBcImRhdGVcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyB0aW1lIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInRpbWVcIl0gPSA0XSA9IFwidGltZVwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIHNlbGVjdCBmb3JtYXRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJzZWxlY3RcIl0gPSA1XSA9IFwic2VsZWN0XCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gcGx1cmFsIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInBsdXJhbFwiXSA9IDZdID0gXCJwbHVyYWxcIjtcbiAgICAvKipcbiAgICAgKiBPbmx5IHBvc3NpYmxlIHdpdGhpbiBwbHVyYWwgYXJndW1lbnQuXG4gICAgICogVGhpcyBpcyB0aGUgYCNgIHN5bWJvbCB0aGF0IHdpbGwgYmUgc3Vic3RpdHV0ZWQgd2l0aCB0aGUgY291bnQuXG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wicG91bmRcIl0gPSA3XSA9IFwicG91bmRcIjtcbiAgICAvKipcbiAgICAgKiBYTUwtbGlrZSB0YWdcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJ0YWdcIl0gPSA4XSA9IFwidGFnXCI7XG59KShUWVBFIHx8IChUWVBFID0ge30pKTtcbmV4cG9ydCB2YXIgU0tFTEVUT05fVFlQRTtcbihmdW5jdGlvbiAoU0tFTEVUT05fVFlQRSkge1xuICAgIFNLRUxFVE9OX1RZUEVbU0tFTEVUT05fVFlQRVtcIm51bWJlclwiXSA9IDBdID0gXCJudW1iZXJcIjtcbiAgICBTS0VMRVRPTl9UWVBFW1NLRUxFVE9OX1RZUEVbXCJkYXRlVGltZVwiXSA9IDFdID0gXCJkYXRlVGltZVwiO1xufSkoU0tFTEVUT05fVFlQRSB8fCAoU0tFTEVUT05fVFlQRSA9IHt9KSk7XG4vKipcbiAqIFR5cGUgR3VhcmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xpdGVyYWxFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUubGl0ZXJhbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FyZ3VtZW50RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLmFyZ3VtZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyRWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLm51bWJlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUuZGF0ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUudGltZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NlbGVjdEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5zZWxlY3Q7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQbHVyYWxFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUucGx1cmFsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUG91bmRFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUucG91bmQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUYWdFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUudGFnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyU2tlbGV0b24oZWwpIHtcbiAgICByZXR1cm4gISEoZWwgJiYgdHlwZW9mIGVsID09PSAnb2JqZWN0JyAmJiBlbC50eXBlID09PSBTS0VMRVRPTl9UWVBFLm51bWJlcik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlVGltZVNrZWxldG9uKGVsKSB7XG4gICAgcmV0dXJuICEhKGVsICYmIHR5cGVvZiBlbCA9PT0gJ29iamVjdCcgJiYgZWwudHlwZSA9PT0gU0tFTEVUT05fVFlQRS5kYXRlVGltZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGl0ZXJhbEVsZW1lbnQodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFLmxpdGVyYWwsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU51bWJlckVsZW1lbnQodmFsdWUsIHN0eWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVFlQRS5udW1iZXIsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiVFlQRSIsIlNLRUxFVE9OX1RZUEUiLCJpc0xpdGVyYWxFbGVtZW50IiwiZWwiLCJ0eXBlIiwibGl0ZXJhbCIsImlzQXJndW1lbnRFbGVtZW50IiwiYXJndW1lbnQiLCJpc051bWJlckVsZW1lbnQiLCJudW1iZXIiLCJpc0RhdGVFbGVtZW50IiwiZGF0ZSIsImlzVGltZUVsZW1lbnQiLCJ0aW1lIiwiaXNTZWxlY3RFbGVtZW50Iiwic2VsZWN0IiwiaXNQbHVyYWxFbGVtZW50IiwicGx1cmFsIiwiaXNQb3VuZEVsZW1lbnQiLCJwb3VuZCIsImlzVGFnRWxlbWVudCIsInRhZyIsImlzTnVtYmVyU2tlbGV0b24iLCJpc0RhdGVUaW1lU2tlbGV0b24iLCJkYXRlVGltZSIsImNyZWF0ZUxpdGVyYWxFbGVtZW50IiwidmFsdWUiLCJjcmVhdGVOdW1iZXJFbGVtZW50Iiwic3R5bGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* binding */ parseDateTimeSkeleton)\n/* harmony export */ });\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nfunction parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n      case 'E':\n        result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n      case 'b': // am, pm, noon, midnight\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n      // Zone\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n      case 'O': // 1, 4: milliseconds in day short, long\n      case 'v': // 1, 4: generic non-location format\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n    }\n    return '';\n  });\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/index.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-skeleton-parser/lib/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* reexport safe */ _date_time__WEBPACK_IMPORTED_MODULE_0__.parseDateTimeSkeleton),\n/* harmony export */   parseNumberSkeleton: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var _date_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-time */ \"(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\");\n/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number */ \"(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3Utc2tlbGV0b24tcGFyc2VyL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBRE1JTlxcT25lRHJpdmVcXERlc2t0b3BcXEltIGEgYmlyZGRkZGRkZFxcbm9kZV9tb2R1bGVzXFxAZm9ybWF0anNcXGljdS1za2VsZXRvbi1wYXJzZXJcXGxpYlxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kYXRlLXRpbWUnO1xuZXhwb3J0ICogZnJvbSAnLi9udW1iZXInO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNumberSkeleton: () => (/* binding */ parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* binding */ parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.generated */ \"(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\");\n\n\nfunction parseNumberSkeletonFromString(skeleton) {\n  if (skeleton.length === 0) {\n    throw new Error('Number skeleton cannot be empty');\n  }\n  // Parse the skeleton\n  var stringTokens = skeleton.split(_regex_generated__WEBPACK_IMPORTED_MODULE_0__.WHITE_SPACE_REGEX).filter(function (x) {\n    return x.length > 0;\n  });\n  var tokens = [];\n  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n    var stringToken = stringTokens_1[_i];\n    var stemAndOptions = stringToken.split('/');\n    if (stemAndOptions.length === 0) {\n      throw new Error('Invalid number skeleton');\n    }\n    var stem = stemAndOptions[0],\n      options = stemAndOptions.slice(1);\n    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n      var option = options_1[_a];\n      if (option.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n    }\n    tokens.push({\n      stem: stem,\n      options: options\n    });\n  }\n  return tokens;\n}\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  if (str[str.length - 1] === 'r') {\n    result.roundingPriority = 'morePrecision';\n  } else if (str[str.length - 1] === 's') {\n    result.roundingPriority = 'lessPrecision';\n  }\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    }\n    // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    }\n    // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    }\n    // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n    return '';\n  });\n  return result;\n}\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n    case 'sign-accounting':\n    case '()':\n      return {\n        currencySign: 'accounting'\n      };\n    case 'sign-always':\n    case '+!':\n      return {\n        signDisplay: 'always'\n      };\n    case 'sign-accounting-always':\n    case '()!':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n    case 'sign-except-zero':\n    case '+?':\n      return {\n        signDisplay: 'exceptZero'\n      };\n    case 'sign-accounting-except-zero':\n    case '()?':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n    case 'sign-never':\n    case '+_':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n  // Engineering\n  var result;\n  if (stem[0] === 'E' && stem[1] === 'E') {\n    result = {\n      notation: 'engineering'\n    };\n    stem = stem.slice(2);\n  } else if (stem[0] === 'E') {\n    result = {\n      notation: 'scientific'\n    };\n    stem = stem.slice(1);\n  }\n  if (result) {\n    var signDisplay = stem.slice(0, 2);\n    if (signDisplay === '+!') {\n      result.signDisplay = 'always';\n      stem = stem.slice(2);\n    } else if (signDisplay === '+?') {\n      result.signDisplay = 'exceptZero';\n      stem = stem.slice(2);\n    }\n    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n      throw new Error('Malformed concise eng/scientific notation');\n    }\n    result.minimumIntegerDigits = stem.length;\n  }\n  return result;\n}\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n  if (signOpts) {\n    return signOpts;\n  }\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nfunction parseNumberSkeleton(tokens) {\n  var result = {};\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    switch (token.stem) {\n      case 'percent':\n      case '%':\n        result.style = 'percent';\n        continue;\n      case '%x100':\n        result.style = 'percent';\n        result.scale = 100;\n        continue;\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n      case 'group-off':\n      case ',_':\n        result.useGrouping = false;\n        continue;\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n      case 'measure-unit':\n      case 'unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n      case 'compact-short':\n      case 'K':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n      case 'compact-long':\n      case 'KK':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n      case 'scientific':\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'engineering':\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n      case 'scale':\n        result.scale = parseFloat(token.options[0]);\n        continue;\n      case 'rounding-mode-floor':\n        result.roundingMode = 'floor';\n        continue;\n      case 'rounding-mode-ceiling':\n        result.roundingMode = 'ceil';\n        continue;\n      case 'rounding-mode-down':\n        result.roundingMode = 'trunc';\n        continue;\n      case 'rounding-mode-up':\n        result.roundingMode = 'expand';\n        continue;\n      case 'rounding-mode-half-even':\n        result.roundingMode = 'halfEven';\n        continue;\n      case 'rounding-mode-half-down':\n        result.roundingMode = 'halfTrunc';\n        continue;\n      case 'rounding-mode-half-up':\n        result.roundingMode = 'halfExpand';\n        continue;\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n      case 'integer-width':\n        if (token.options.length > 1) {\n          throw new RangeError('integer-width stems only accept a single optional option');\n        }\n        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n          if (g1) {\n            result.minimumIntegerDigits = g2.length;\n          } else if (g3 && g4) {\n            throw new Error('We currently do not support maximum integer digits');\n          } else if (g5) {\n            throw new Error('We currently do not support exact integer digits');\n          }\n          return '';\n        });\n        continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n      result.minimumIntegerDigits = token.stem.length;\n      continue;\n    }\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      // Precision\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n      // precision-integer case\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        }\n        // .### case\n        else if (g3 && g3[0] === '#') {\n          result.maximumFractionDigits = g3.length;\n        }\n        // .00## case\n        else if (g4 && g5) {\n          result.minimumFractionDigits = g4.length;\n          result.maximumFractionDigits = g4.length + g5.length;\n        } else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length;\n        }\n        return '';\n      });\n      var opt = token.options[0];\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n      if (opt === 'w') {\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          trailingZeroDisplay: 'stripIfInteger'\n        });\n      } else if (opt) {\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(opt));\n      }\n      continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n    var signOpts = parseSign(token.stem);\n    if (signOpts) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), signOpts);\n    }\n    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n    if (conciseScientificAndEngineeringOpts) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), conciseScientificAndEngineeringOpts);\n    }\n  }\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3Utc2tlbGV0b24tcGFyc2VyL2xpYi9yZWdleC5nZW5lcmF0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ08sSUFBSUEsaUJBQWlCLEdBQUcsdUNBQXVDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFETUlOXFxPbmVEcml2ZVxcRGVza3RvcFxcSW0gYSBiaXJkZGRkZGRkXFxub2RlX21vZHVsZXNcXEBmb3JtYXRqc1xcaWN1LXNrZWxldG9uLXBhcnNlclxcbGliXFxyZWdleC5nZW5lcmF0ZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGdlbmVyYXRlZCBmcm9tIHJlZ2V4LWdlbi50c1xuZXhwb3J0IHZhciBXSElURV9TUEFDRV9SRUdFWCA9IC9bXFx0LVxcciBcXHg4NVxcdTIwMEVcXHUyMDBGXFx1MjAyOFxcdTIwMjldL2k7XG4iXSwibmFtZXMiOlsiV0hJVEVfU1BBQ0VfUkVHRVgiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/fast-memoize/lib/index.js":
/*!**************************************************************!*\
  !*** ../../node_modules/@formatjs/fast-memoize/lib/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoize: () => (/* binding */ memoize),\n/* harmony export */   strategies: () => (/* binding */ strategies)\n/* harmony export */ });\n//\n// Main\n//\nfunction memoize(fn, options) {\n  var cache = options && options.cache ? options.cache : cacheDefault;\n  var serializer = options && options.serializer ? options.serializer : serializerDefault;\n  var strategy = options && options.strategy ? options.strategy : strategyDefault;\n  return strategy(fn, {\n    cache: cache,\n    serializer: serializer\n  });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n  return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\n\nfunction monadic(fn, cache, serializer, arg) {\n  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n  var computedValue = cache.get(cacheKey);\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.call(this, arg);\n    cache.set(cacheKey, computedValue);\n  }\n  return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n  var args = Array.prototype.slice.call(arguments, 3);\n  var cacheKey = serializer(args);\n  var computedValue = cache.get(cacheKey);\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.apply(this, args);\n    cache.set(cacheKey, computedValue);\n  }\n  return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n  return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n  var strategy = fn.length === 1 ? monadic : variadic;\n  return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n  return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n  return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function () {\n  return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nvar ObjectWithoutPrototypeCache = /** @class */function () {\n  function ObjectWithoutPrototypeCache() {\n    this.cache = Object.create(null);\n  }\n  ObjectWithoutPrototypeCache.prototype.get = function (key) {\n    return this.cache[key];\n  };\n  ObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n    this.cache[key] = value;\n  };\n  return ObjectWithoutPrototypeCache;\n}();\nvar cacheDefault = {\n  create: function create() {\n    return new ObjectWithoutPrototypeCache();\n  }\n};\nvar strategies = {\n  variadic: strategyVariadic,\n  monadic: strategyMonadic\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9mYXN0LW1lbW9pemUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ08sU0FBU0EsT0FBT0EsQ0FBQ0MsRUFBRSxFQUFFQyxPQUFPLEVBQUU7RUFDakMsSUFBSUMsS0FBSyxHQUFHRCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHRCxPQUFPLENBQUNDLEtBQUssR0FBR0MsWUFBWTtFQUNuRSxJQUFJQyxVQUFVLEdBQUdILE9BQU8sSUFBSUEsT0FBTyxDQUFDRyxVQUFVLEdBQUdILE9BQU8sQ0FBQ0csVUFBVSxHQUFHQyxpQkFBaUI7RUFDdkYsSUFBSUMsUUFBUSxHQUFHTCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0ssUUFBUSxHQUFHTCxPQUFPLENBQUNLLFFBQVEsR0FBR0MsZUFBZTtFQUMvRSxPQUFPRCxRQUFRLENBQUNOLEVBQUUsRUFBRTtJQUNoQkUsS0FBSyxFQUFFQSxLQUFLO0lBQ1pFLFVBQVUsRUFBRUE7RUFDaEIsQ0FBQyxDQUFDO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSSxXQUFXQSxDQUFDQyxLQUFLLEVBQUU7RUFDeEIsT0FBUUEsS0FBSyxJQUFJLElBQUksSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU9BLEtBQUssS0FBSyxTQUFTLENBQUUsQ0FBQztBQUN2Rjs7QUFDQSxTQUFTQyxPQUFPQSxDQUFDVixFQUFFLEVBQUVFLEtBQUssRUFBRUUsVUFBVSxFQUFFTyxHQUFHLEVBQUU7RUFDekMsSUFBSUMsUUFBUSxHQUFHSixXQUFXLENBQUNHLEdBQUcsQ0FBQyxHQUFHQSxHQUFHLEdBQUdQLFVBQVUsQ0FBQ08sR0FBRyxDQUFDO0VBQ3ZELElBQUlFLGFBQWEsR0FBR1gsS0FBSyxDQUFDWSxHQUFHLENBQUNGLFFBQVEsQ0FBQztFQUN2QyxJQUFJLE9BQU9DLGFBQWEsS0FBSyxXQUFXLEVBQUU7SUFDdENBLGFBQWEs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O0VBQzNCLENBQUM7RUFDRCxPQUFPeUIsMkJBQTJCO0FBQ3RDLENBQUMsQ0FBQyxDQUFFO0FBQ0osSUFBSS9CLFlBQVksR0FBRztFQUNmMEIsTUFBTSxFQUFFLFNBQVNBLE1BQU1BLENBQUEsRUFBRztJQUN0QixPQUFPLElBQUlLLDJCQUEyQixDQUFDLENBQUM7RUFDNUM7QUFDSixDQUFDO0FBQ00sSUFBSUcsVUFBVSxHQUFHO0VBQ3BCcEIsUUFBUSxFQUFFYSxnQkFBZ0I7RUFDMUJwQixPQUFPLEVBQUVxQjtBQUNiLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQURNSU5cXE9uZURyaXZlXFxEZXNrdG9wXFxJbSBhIGJpcmRkZGRkZGRcXG5vZGVfbW9kdWxlc1xcQGZvcm1hdGpzXFxmYXN0LW1lbW9pemVcXGxpYlxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIE1haW5cbi8vXG5leHBvcnQgZnVuY3Rpb24gbWVtb2l6ZShmbiwgb3B0aW9ucykge1xuICAgIHZhciBjYWNoZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5jYWNoZSA/IG9wdGlvbnMuY2FjaGUgOiBjYWNoZURlZmF1bHQ7XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplciA/IG9wdGlvbnMuc2VyaWFsaXplciA6IHNlcmlhbGl6ZXJEZWZhdWx0O1xuICAgIHZhciBzdHJhdGVneSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJhdGVneSA/IG9wdGlvbnMuc3RyYXRlZ3kgOiBzdHJhdGVneURlZmF1bHQ7XG4gICAgcmV0dXJuIHN0cmF0ZWd5KGZuLCB7XG4gICAgICAgIGNhY2hlOiBjYWNoZSxcbiAgICAgICAgc2VyaWFsaXplcjogc2VyaWFsaXplcixcbiAgICB9KTtcbn1cbi8vXG4vLyBTdHJhdGVneVxuLy9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpOyAvLyB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJ3Vuc2FmZScgcHJpbWl0aXZlIGZvciBvdXIgbmVlZHNcbn1cbmZ1bmN0aW9uIG1vbmFkaWMoZm4sIGNhY2hlLCBzZXJpYWxpemVyLCBhcmcpIHtcbiAgICB2YXIgY2FjaGVLZXkgPSBpc1ByaW1pdGl2ZShhcmcpID8gYXJnIDogc2VyaWFsaXplcihhcmcpO1xuICAgIHZhciBjb21wdXRlZFZhbHVlID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAodHlwZW9mIGNvbXB1dGVkVmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbXB1dGVkVmFsdWUgPSBmbi5jYWxsKHRoaXMsIGFyZyk7XG4gICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgY29tcHV0ZWRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wdXRlZFZhbHVlO1xufVxuZnVuY3Rpb24gdmFyaWFkaWMoZm4sIGNhY2hlLCBzZXJpYWxpemVyKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpO1xuICAgIHZhciBjYWNoZUtleSA9IHNlcmlhbGl6ZXIoYXJncyk7XG4gICAgdmFyIGNvbXB1dGVkVmFsdWUgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICh0eXBlb2YgY29tcHV0ZWRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29tcHV0ZWRWYWx1ZSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIGNvbXB1dGVkVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcHV0ZWRWYWx1ZTtcbn1cbmZ1bmN0aW9uIGFzc2VtYmxlKGZuLCBjb250ZXh0LCBzdHJhdGVneSwgY2FjaGUsIHNlcmlhbGl6ZSkge1xuICAgIHJldHVybiBzdHJhdGVneS5iaW5kKGNvbnRleHQsIGZuLCBjYWNoZSwgc2VyaWFsaXplKTtcbn1cbmZ1bmN0aW9uIHN0cmF0ZWd5RGVmYXVsdChmbiwgb3B0aW9ucykge1xuICAgIHZhciBzdHJhdGVneSA9IGZuLmxlbmd0aCA9PT0gMSA/IG1vbmFkaWMgOiB2YXJpYWRpYztcbiAgICByZXR1cm4gYXNzZW1ibGUoZm4sIHRoaXMsIHN0cmF0ZWd5LCBvcHRpb25zLmNhY2hlLmNyZWF0ZSgpLCBvcHRpb25zLnNlcmlhbGl6ZXIpO1xufVxuZnVuY3Rpb24gc3RyYXRlZ3lWYXJpYWRpYyhmbiwgb3B0aW9ucykge1xuICAgIHJldHVybiBhc3NlbWJsZShmbiwgdGhpcywgdmFyaWFkaWMsIG9wdGlvbnMuY2FjaGUuY3JlYXRlKCksIG9wdGlvbnMuc2VyaWFsaXplcik7XG59XG5mdW5jdGlvbiBzdHJhdGVneU1vbmFkaWMoZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYXNzZW1ibGUoZm4sIHRoaXMsIG1vbmFkaWMsIG9wdGlvbnMuY2FjaGUuY3JlYXRlKCksIG9wdGlvbnMuc2VyaWFsaXplcik7XG59XG4vL1xuLy8gU2VyaWFsaXplclxuLy9cbnZhciBzZXJpYWxpemVyRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJndW1lbnRzKTtcbn07XG4vL1xuLy8gQ2FjaGVcbi8vXG52YXIgT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9iamVjdFdpdGhvdXRQcm90b3R5cGVDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIE9iamVjdFdpdGhvdXRQcm90b3R5cGVDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVtrZXldO1xuICAgIH07XG4gICAgT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmNhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3RXaXRob3V0UHJvdG90eXBlQ2FjaGU7XG59KCkpO1xudmFyIGNhY2hlRGVmYXVsdCA9IHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RXaXRob3V0UHJvdG90eXBlQ2FjaGUoKTtcbiAgICB9LFxufTtcbmV4cG9ydCB2YXIgc3RyYXRlZ2llcyA9IHtcbiAgICB2YXJpYWRpYzogc3RyYXRlZ3lWYXJpYWRpYyxcbiAgICBtb25hZGljOiBzdHJhdGVneU1vbmFkaWMsXG59O1xuIl0sIm5hbWVzIjpbIm1lbW9pemUiLCJmbiIsIm9wdGlvbnMiLCJjYWNoZSIsImNhY2hlRGVmYXVsdCIsInNlcmlhbGl6ZXIiLCJzZXJpYWxpemVyRGVmYXVsdCIsInN0cmF0ZWd5Iiwic3RyYXRlZ3lEZWZhdWx0IiwiaXNQcmltaXRpdmUiLCJ2YWx1ZSIsIm1vbmFkaWMiLCJhcmciLCJjYWNoZUtleSIsImNvbXB1dGVkVmFsdWUiLCJnZXQiLCJjYWxsIiwic2V0IiwidmFyaWFkaWMiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImFyZ3VtZW50cyIsImFwcGx5IiwiYXNzZW1ibGUiLCJjb250ZXh0Iiwic2VyaWFsaXplIiwiYmluZCIsImxlbmd0aCIsImNyZWF0ZSIsInN0cmF0ZWd5VmFyaWFkaWMiLCJzdHJhdGVneU1vbmFkaWMiLCJKU09OIiwic3RyaW5naWZ5IiwiT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlIiwiT2JqZWN0Iiwia2V5Iiwic3RyYXRlZ2llcyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/fast-memoize/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBestPattern: () => (/* binding */ getBestPattern)\n/* harmony export */ });\n/* harmony import */ var _time_data_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time-data.generated */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\");\n\n/**\n * Returns the best matching date time pattern if a date time skeleton\n * pattern is provided with a locale. Follows the Unicode specification:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns\n * @param skeleton date time skeleton pattern that possibly includes j, J or C\n * @param locale\n */\nfunction getBestPattern(skeleton, locale) {\n  var skeletonCopy = '';\n  for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {\n    var patternChar = skeleton.charAt(patternPos);\n    if (patternChar === 'j') {\n      var extraLength = 0;\n      while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {\n        extraLength++;\n        patternPos++;\n      }\n      var hourLen = 1 + (extraLength & 1);\n      var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);\n      var dayPeriodChar = 'a';\n      var hourChar = getDefaultHourSymbolFromLocale(locale);\n      if (hourChar == 'H' || hourChar == 'k') {\n        dayPeriodLen = 0;\n      }\n      while (dayPeriodLen-- > 0) {\n        skeletonCopy += dayPeriodChar;\n      }\n      while (hourLen-- > 0) {\n        skeletonCopy = hourChar + skeletonCopy;\n      }\n    } else if (patternChar === 'J') {\n      skeletonCopy += 'H';\n    } else {\n      skeletonCopy += patternChar;\n    }\n  }\n  return skeletonCopy;\n}\n/**\n * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n * of the given `locale` to the corresponding time pattern.\n * @param locale\n */\nfunction getDefaultHourSymbolFromLocale(locale) {\n  var hourCycle = locale.hourCycle;\n  if (hourCycle === undefined &&\n  // @ts-ignore hourCycle(s) is not identified yet\n  locale.hourCycles &&\n  // @ts-ignore\n  locale.hourCycles.length) {\n    // @ts-ignore\n    hourCycle = locale.hourCycles[0];\n  }\n  if (hourCycle) {\n    switch (hourCycle) {\n      case 'h24':\n        return 'k';\n      case 'h23':\n        return 'H';\n      case 'h12':\n        return 'h';\n      case 'h11':\n        return 'K';\n      default:\n        throw new Error('Invalid hourCycle');\n    }\n  }\n  // TODO: Once hourCycle is fully supported remove the following with data generation\n  var languageTag = locale.language;\n  var regionTag;\n  if (languageTag !== 'root') {\n    regionTag = locale.maximize().region;\n  }\n  var hourCycles = _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[regionTag || ''] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[languageTag || ''] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[\"\".concat(languageTag, \"-001\")] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData['001'];\n  return hourCycles[0];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2RhdGUtdGltZS1wYXR0ZXJuLWdlbmVyYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGNBQWNBLENBQUNDLFFBQVEsRUFBRUMsTUFBTSxFQUFFO0VBQzdDLElBQUlDLFlBQVksR0FBRyxFQUFFO0VBQ3JCLEtBQUssSUFBSUMsVUFBVSxHQUFHLENBQUMsRUFBRUEsVUFBVSxHQUFHSCxRQUFRLENBQUNJLE1BQU0sRUFBRUQsVUFBVSxFQUFFLEVBQUU7SUFDakUsSUFBSUUsV0FBVyxHQUFHTCxRQUFRLENBQUNNLE1BQU0sQ0FBQ0gsVUFBVSxDQUFDO0lBQzdDLElBQUlFLFdBQVcsS0FBSyxHQUFHLEVBQUU7TUFDckIsSUFBSUUsV0FBVyxHQUFHLENBQUM7TUFDbkIsT0FBT0osVUFBVSxHQUFHLENBQUMsR0FBR0gsUUFBUSxDQUFDSSxNQUFNLElBQ25DSixRQUFRLENBQUNNLE1BQU0sQ0FBQ0gsVUFBVSxHQUFHLENBQUMsQ0FBQyxLQUFLRSxXQUFXLEVBQUU7UUFDakRFLFdBQVcsRUFBRTtRQUNiSixVQUFVLEVBQUU7TUFDaEI7TUFDQSxJQUFJSyxPQUFPLEdBQUcsQ0FBQyxJQUFJRCxXQUFXLEdBQUcsQ0FBQyxDQUFDO01BQ25DLElBQUlFLFlBQVksR0FBR0YsV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJQSxXQUFXLElBQUksQ0FBQyxDQUFDO01BQy9ELElBQUlHLGFBQWEsR0FBRyxHQUFHO01BQ3ZCLElBQUlDLFFBQVEsR0FBR0MsOEJBQThCLENBQUNYLE1BQU0sQ0FBQztNQUNyRCxJQUFJVSxRQUFRLElBQUksR0FBRyxJQUFJQSxRQUFRLElBQUksR0FBRyxFQUFFO1FBQ3BDRixZQUFZLEdBQUcsQ0FBQztNQUNwQjtNQUNBLE9BQU9BLFlBQVksRUFBRSxHQUFHLENBQUMsRUFBRTtRQUN2QlAsWUFBWSxJQUFJUSxhQUFhO01BQ2pDO01BQ0EsT0FBT0YsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ2xCTixZQUFZLEdBQUdTLFFBQVEsR0FBR1QsWUFBWTtNQUMxQztJQUNKLENBQUMsTUFDSSxJQUFJRyxXQUFXLEtBQUssR0FBRyxFQUFFO01BQzFCSCxZQUFZLElBQUksR0FBRztJQUN2QixDQUFDLE1BQ0k7TUFDREEsWUFBWSxJQUFJRyxXQUFXO0lBQy9CO0VBQ0o7RUFDQSxPQUFPSCxZQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNVLDhCQUE4QkEsQ0FBQ1gsTUFBTSxFQUFFO0VBQzVDLElBQUlZLFNBQVMsR0FBR1osTUFBTSxDQUFDWSxTQUFTO0VBQ2hDLElBQUlBLFNBQVMsS0FBS0MsU0FBUztFQUN2QjtFQUNBYixNQUFNLENBQUNjLFVBQVU7RUFDakI7RUFDQWQsTUFBTSxDQUFDYyxVQUFVLENBQUNYLE1BQU0sRUFBRTtJQUMxQjtJQUNBUyxTQUFTLEdBQUdaLE1BQU0sQ0FBQ2MsVUFBVSxDQUFDLENBQUMsQ0FBQztFQUNwQztFQUNBLElBQUlGLFNBQVMsRUFBRTtJQUNYLFFBQVFBLFNBQVM7TUFDYixLQUFLLEtBQUs7UUFDTixPQUFPLEdBQUc7TUFDZCxLQUFLLEtBQUs7UUFDTixPQUFPLEdBQUc7TUFDZCxLQUFLLEtBQUs7UUFDTixPQUFPLEdBQUc7TUFDZCxLQUFLLEtBQUs7UUFDTixPQUFPLEdBQUc7TUFDZDtRQUNJLE1BQU0sSUFBSUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDO0lBQzVDO0VBQ0o7RUFDQTtFQUNBLElBQUlDLFdBQVcsR0FBR2hCLE1BQU0sQ0FBQ2lCLFFBQVE7RUFDakMsSUFBSUMsU0FBUztFQUNiLElBQUlGLFdBQVcsS0FBSyxNQUFNLEVBQUU7SUFDeEJFLFNBQVMsR0FBR2xCLE1BQU0sQ0FBQ21CLFFBQVEsQ0FBQyxDQUFDLENBQUNDLE1BQU07RUFDeEM7RUFDQSxJQUFJTixVQUFVLEdBQUdqQiwwREFBUSxDQUFDcUIsU0FBUyxJQUFJLEVBQUUsQ0FBQyxJQUN0Q3JCLDBEQUFRLENBQUNtQixXQUFXLElBQUksRUFBRSxDQUFDLElBQzNCbkIsMERBQVEsQ0FBQyxFQUFFLENBQUN3QixNQUFNLENBQUNMLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUN4Q25CLDBEQUFRLENBQUMsS0FBSyxDQUFDO0VBQ25CLE9BQU9pQixVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3hCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFETUlOXFxPbmVEcml2ZVxcRGVza3RvcFxcSW0gYSBiaXJkZGRkZGRkXFxub2RlX21vZHVsZXNcXEBmb3JtYXRqc1xcaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyXFxsaWJcXGRhdGUtdGltZS1wYXR0ZXJuLWdlbmVyYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0aW1lRGF0YSB9IGZyb20gJy4vdGltZS1kYXRhLmdlbmVyYXRlZCc7XG4vKipcbiAqIFJldHVybnMgdGhlIGJlc3QgbWF0Y2hpbmcgZGF0ZSB0aW1lIHBhdHRlcm4gaWYgYSBkYXRlIHRpbWUgc2tlbGV0b25cbiAqIHBhdHRlcm4gaXMgcHJvdmlkZWQgd2l0aCBhIGxvY2FsZS4gRm9sbG93cyB0aGUgVW5pY29kZSBzcGVjaWZpY2F0aW9uOlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCN0YWJsZS1tYXBwaW5nLXJlcXVlc3RlZC10aW1lLXNrZWxldG9ucy10by1wYXR0ZXJuc1xuICogQHBhcmFtIHNrZWxldG9uIGRhdGUgdGltZSBza2VsZXRvbiBwYXR0ZXJuIHRoYXQgcG9zc2libHkgaW5jbHVkZXMgaiwgSiBvciBDXG4gKiBAcGFyYW0gbG9jYWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0UGF0dGVybihza2VsZXRvbiwgbG9jYWxlKSB7XG4gICAgdmFyIHNrZWxldG9uQ29weSA9ICcnO1xuICAgIGZvciAodmFyIHBhdHRlcm5Qb3MgPSAwOyBwYXR0ZXJuUG9zIDwgc2tlbGV0b24ubGVuZ3RoOyBwYXR0ZXJuUG9zKyspIHtcbiAgICAgICAgdmFyIHBhdHRlcm5DaGFyID0gc2tlbGV0b24uY2hhckF0KHBhdHRlcm5Qb3MpO1xuICAgICAgICBpZiAocGF0dGVybkNoYXIgPT09ICdqJykge1xuICAgICAgICAgICAgdmFyIGV4dHJhTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChwYXR0ZXJuUG9zICsgMSA8IHNrZWxldG9uLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIHNrZWxldG9uLmNoYXJBdChwYXR0ZXJuUG9zICsgMSkgPT09IHBhdHRlcm5DaGFyKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFMZW5ndGgrKztcbiAgICAgICAgICAgICAgICBwYXR0ZXJuUG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaG91ckxlbiA9IDEgKyAoZXh0cmFMZW5ndGggJiAxKTtcbiAgICAgICAgICAgIHZhciBkYXlQZXJpb2RMZW4gPSBleHRyYUxlbmd0aCA8IDIgPyAxIDogMyArIChleHRyYUxlbmd0aCA+PiAxKTtcbiAgICAgICAgICAgIHZhciBkYXlQZXJpb2RDaGFyID0gJ2EnO1xuICAgICAgICAgICAgdmFyIGhvdXJDaGFyID0gZ2V0RGVmYXVsdEhvdXJTeW1ib2xGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgICAgICAgICBpZiAoaG91ckNoYXIgPT0gJ0gnIHx8IGhvdXJDaGFyID09ICdrJykge1xuICAgICAgICAgICAgICAgIGRheVBlcmlvZExlbiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoZGF5UGVyaW9kTGVuLS0gPiAwKSB7XG4gICAgICAgICAgICAgICAgc2tlbGV0b25Db3B5ICs9IGRheVBlcmlvZENoYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoaG91ckxlbi0tID4gMCkge1xuICAgICAgICAgICAgICAgIHNrZWxldG9uQ29weSA9IGhvdXJDaGFyICsgc2tlbGV0b25Db3B5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhdHRlcm5DaGFyID09PSAnSicpIHtcbiAgICAgICAgICAgIHNrZWxldG9uQ29weSArPSAnSCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBza2VsZXRvbkNvcHkgKz0gcGF0dGVybkNoYXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNrZWxldG9uQ29weTtcbn1cbi8qKlxuICogTWFwcyB0aGUgW2hvdXIgY3ljbGUgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bC9Mb2NhbGUvaG91ckN5Y2xlKVxuICogb2YgdGhlIGdpdmVuIGBsb2NhbGVgIHRvIHRoZSBjb3JyZXNwb25kaW5nIHRpbWUgcGF0dGVybi5cbiAqIEBwYXJhbSBsb2NhbGVcbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEhvdXJTeW1ib2xGcm9tTG9jYWxlKGxvY2FsZSkge1xuICAgIHZhciBob3VyQ3ljbGUgPSBsb2NhbGUuaG91ckN5Y2xlO1xuICAgIGlmIChob3VyQ3ljbGUgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAvLyBAdHMtaWdub3JlIGhvdXJDeWNsZShzKSBpcyBub3QgaWRlbnRpZmllZCB5ZXRcbiAgICAgICAgbG9jYWxlLmhvdXJDeWNsZXMgJiZcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBsb2NhbGUuaG91ckN5Y2xlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBob3VyQ3ljbGUgPSBsb2NhbGUuaG91ckN5Y2xlc1swXTtcbiAgICB9XG4gICAgaWYgKGhvdXJDeWNsZSkge1xuICAgICAgICBzd2l0Y2ggKGhvdXJDeWNsZSkge1xuICAgICAgICAgICAgY2FzZSAnaDI0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2snO1xuICAgICAgICAgICAgY2FzZSAnaDIzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0gnO1xuICAgICAgICAgICAgY2FzZSAnaDEyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2gnO1xuICAgICAgICAgICAgY2FzZSAnaDExJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0snO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaG91ckN5Y2xlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVE9ETzogT25jZSBob3VyQ3ljbGUgaXMgZnVsbHkgc3VwcG9ydGVkIHJlbW92ZSB0aGUgZm9sbG93aW5nIHdpdGggZGF0YSBnZW5lcmF0aW9uXG4gICAgdmFyIGxhbmd1YWdlVGFnID0gbG9jYWxlLmxhbmd1YWdlO1xuICAgIHZhciByZWdpb25UYWc7XG4gICAgaWYgKGxhbmd1YWdlVGFnICE9PSAncm9vdCcpIHtcbiAgICAgICAgcmVnaW9uVGFnID0gbG9jYWxlLm1heGltaXplKCkucmVnaW9uO1xuICAgIH1cbiAgICB2YXIgaG91ckN5Y2xlcyA9IHRpbWVEYXRhW3JlZ2lvblRhZyB8fCAnJ10gfHxcbiAgICAgICAgdGltZURhdGFbbGFuZ3VhZ2VUYWcgfHwgJyddIHx8XG4gICAgICAgIHRpbWVEYXRhW1wiXCIuY29uY2F0KGxhbmd1YWdlVGFnLCBcIi0wMDFcIildIHx8XG4gICAgICAgIHRpbWVEYXRhWycwMDEnXTtcbiAgICByZXR1cm4gaG91ckN5Y2xlc1swXTtcbn1cbiJdLCJuYW1lcyI6WyJ0aW1lRGF0YSIsImdldEJlc3RQYXR0ZXJuIiwic2tlbGV0b24iLCJsb2NhbGUiLCJza2VsZXRvbkNvcHkiLCJwYXR0ZXJuUG9zIiwibGVuZ3RoIiwicGF0dGVybkNoYXIiLCJjaGFyQXQiLCJleHRyYUxlbmd0aCIsImhvdXJMZW4iLCJkYXlQZXJpb2RMZW4iLCJkYXlQZXJpb2RDaGFyIiwiaG91ckNoYXIiLCJnZXREZWZhdWx0SG91clN5bWJvbEZyb21Mb2NhbGUiLCJob3VyQ3ljbGUiLCJ1bmRlZmluZWQiLCJob3VyQ3ljbGVzIiwiRXJyb3IiLCJsYW5ndWFnZVRhZyIsImxhbmd1YWdlIiwicmVnaW9uVGFnIiwibWF4aW1pemUiLCJyZWdpb24iLCJjb25jYXQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorKind: () => (/* binding */ ErrorKind)\n/* harmony export */ });\nvar ErrorKind;\n(function (ErrorKind) {\n  /** Argument is unclosed (e.g. `{0`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n  /** Argument is empty (e.g. `{}`). */\n  ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n  /** Argument is malformed (e.g. `{foo!}``) */\n  ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n  /** Expect an argument type (e.g. `{foo,}`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n  /** Unsupported argument type (e.g. `{foo,foo}`) */\n  ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n  /** Expect an argument style (e.g. `{foo, number, }`) */\n  ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n  /** The number skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n  /** The date time skeleton is invalid. */\n  ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n  /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n  /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n  ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n  /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n  /** Missing select argument options (e.g. `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n  /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n  /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n  /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n  /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n  ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n  /**\n   * Expecting a message fragment after the `plural` or `selectordinal` selector\n   * (e.g. `{foo, plural, one}`)\n   */\n  ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n  /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n  ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n  /**\n   * Duplicate selectors in `plural` or `selectordinal` argument.\n   * (e.g. {foo, plural, one {#} one {#}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n  /** Duplicate selectors in `select` argument.\n   * (e.g. {foo, select, apple {apple} apple {apple}})\n   */\n  ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n  /** Plural or select argument option must have `other` clause. */\n  ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n  /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n  ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n  /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n  ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n  /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n  ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n  /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n  ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.TYPE),\n/* harmony export */   _Parser: () => (/* binding */ _Parser),\n/* harmony export */   createLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isArgumentElement),\n/* harmony export */   isDateElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement),\n/* harmony export */   isPoundElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPoundElement),\n/* harmony export */   isSelectElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement),\n/* harmony export */   isStructurallySame: () => (/* reexport safe */ _manipulator__WEBPACK_IMPORTED_MODULE_4__.isStructurallySame),\n/* harmony export */   isTagElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTagElement),\n/* harmony export */   isTimeElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _manipulator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./manipulator */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js\");\n\n\n\n\nfunction pruneLocation(els) {\n  els.forEach(function (el) {\n    delete el.location;\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement)(el)) {\n      for (var k in el.options) {\n        delete el.options[k].location;\n        pruneLocation(el.options[k].value);\n      }\n    } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement)(el) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton)(el.style)) {\n      delete el.style.location;\n    } else if (((0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement)(el)) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton)(el.style)) {\n      delete el.style.location;\n    } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isTagElement)(el)) {\n      pruneLocation(el.children);\n    }\n  });\n}\nfunction parse(message, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  opts = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n    shouldParseSkeletons: true,\n    requiresOtherClause: true\n  }, opts);\n  var result = new _parser__WEBPACK_IMPORTED_MODULE_1__.Parser(message, opts).parse();\n  if (result.err) {\n    var error = SyntaxError(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind[result.err.kind]);\n    // @ts-expect-error Assign to error object\n    error.location = result.err.location;\n    // @ts-expect-error Assign to error object\n    error.originalMessage = result.err.message;\n    throw error;\n  }\n  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n    pruneLocation(result.val);\n  }\n  return result.val;\n}\n\n// only for testing\nvar _Parser = _parser__WEBPACK_IMPORTED_MODULE_1__.Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ0c7QUFDRjtBQUM2SDtBQUMvSixTQUFTVyxhQUFhQSxDQUFDQyxHQUFHLEVBQUU7RUFDeEJBLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLFVBQVVDLEVBQUUsRUFBRTtJQUN0QixPQUFPQSxFQUFFLENBQUNDLFFBQVE7SUFDbEIsSUFBSVAsdURBQWUsQ0FBQ00sRUFBRSxDQUFDLElBQUlQLHVEQUFlLENBQUNPLEVBQUUsQ0FBQyxFQUFFO01BQzVDLEtBQUssSUFBSUUsQ0FBQyxJQUFJRixFQUFFLENBQUNHLE9BQU8sRUFBRTtRQUN0QixPQUFPSCxFQUFFLENBQUNHLE9BQU8sQ0FBQ0QsQ0FBQyxDQUFDLENBQUNELFFBQVE7UUFDN0JKLGFBQWEsQ0FBQ0csRUFBRSxDQUFDRyxPQUFPLENBQUNELENBQUMsQ0FBQyxDQUFDRSxLQUFLLENBQUM7TUFDdEM7SUFDSixDQUFDLE1BQ0ksSUFBSWIsdURBQWUsQ0FBQ1MsRUFBRSxDQUFDLElBQUlSLHdEQUFnQixDQUFDUSxFQUFFLENBQUNLLEtBQUssQ0FBQyxFQUFFO01BQ3hELE9BQU9MLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDSixRQUFRO0lBQzVCLENBQUMsTUFDSSxJQUFJLENBQUNaLHFEQUFhLENBQUNXLEVBQUUsQ0FBQyxJQUFJSixxREFBYSxDQUFDSSxFQUFFLENBQUMsS0FDNUNWLDBEQUFrQixDQUFDVSxFQUFFLENBQUNLLEtBQUssQ0FBQyxFQUFFO01BQzlCLE9BQU9MLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDSixRQUFRO0lBQzVCLENBQUMsTUFDSSxJQUFJTixvREFBWSxDQUFDSyxFQUFFLENBQUMsRUFBRTtNQUN2QkgsYUFBYSxDQUFDRyxFQUFFLENBQUNNLFFBQVEsQ0FBQztJQUM5QjtFQUNKLENBQUMsQ0FBQztBQUNOO0FBQ08sU0FBU0MsS0FBS0EsQ0FBQ0MsT0FBTyxFQUFFQyxJQUFJLEVBQUU7RUFDakMsSUFBSUEsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0lBQUVBLElBQUksR0FBRyxDQUFDLENBQUM7RUFBRTtFQUNsQ0EsSUFBSSxHQUFHdkIsK0NBQVEsQ0FBQztJQUFFd0Isb0JBQW9CLEVBQUUsSUFBSTtJQUFFQyxtQkFBbUIsRUFBRTtFQUFLLENBQUMsRUFBRUYsSUFBSSxDQUFDO0VBQ2hGLElBQUlHLE1BQU0sR0FBRyxJQUFJeEIsMkNBQU0sQ0FBQ29CLE9BQU8sRUFBRUMsSUFBSSxDQUFDLENBQUNGLEtBQUssQ0FBQyxDQUFDO0VBQzlDLElBQUlLLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFO0lBQ1osSUFBSUMsS0FBSyxHQUFHQyxXQUFXLENBQUM1Qiw2Q0FBUyxDQUFDeUIsTUFBTSxDQUFDQyxHQUFHLENBQUNHLElBQUksQ0FBQyxDQUFDO0lBQ25EO0lBQ0FGLEtBQUssQ0FBQ2IsUUFBUSxHQUFHVyxNQUFNLENBQUNDLEdBQUcsQ0FBQ1osUUFBUTtJQUNwQztJQUNBYSxLQUFLLENBQUNHLGVBQWUsR0FBR0wsTUFBTSxDQUFDQyxHQUFHLENBQUNMLE9BQU87SUFDMUMsTUFBTU0sS0FBSztFQUNmO0VBQ0EsSUFBSSxFQUFFTCxJQUFJLEtBQUssSUFBSSxJQUFJQSxJQUFJLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLElBQUksQ0FBQ1MsZUFBZSxDQUFDLEVBQUU7SUFDckVyQixhQUFhLENBQUNlLE1BQU0sQ0FBQ08sR0FBRyxDQUFDO0VBQzdCO0VBQ0EsT0FBT1AsTUFBTSxDQUFDTyxHQUFHO0FBQ3JCO0FBQ3dCO0FBQ3hCO0FBQ08sSUFBSUMsT0FBTyxHQUFHaEMsMkNBQU0iLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQURNSU5cXE9uZURyaXZlXFxEZXNrdG9wXFxJbSBhIGJpcmRkZGRkZGRcXG5vZGVfbW9kdWxlc1xcQGZvcm1hdGpzXFxpY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXJcXGxpYlxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEVycm9yS2luZCB9IGZyb20gJy4vZXJyb3InO1xuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnLi9wYXJzZXInO1xuaW1wb3J0IHsgaXNEYXRlRWxlbWVudCwgaXNEYXRlVGltZVNrZWxldG9uLCBpc051bWJlckVsZW1lbnQsIGlzTnVtYmVyU2tlbGV0b24sIGlzUGx1cmFsRWxlbWVudCwgaXNTZWxlY3RFbGVtZW50LCBpc1RhZ0VsZW1lbnQsIGlzVGltZUVsZW1lbnQsIH0gZnJvbSAnLi90eXBlcyc7XG5mdW5jdGlvbiBwcnVuZUxvY2F0aW9uKGVscykge1xuICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBkZWxldGUgZWwubG9jYXRpb247XG4gICAgICAgIGlmIChpc1NlbGVjdEVsZW1lbnQoZWwpIHx8IGlzUGx1cmFsRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gZWwub3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbC5vcHRpb25zW2tdLmxvY2F0aW9uO1xuICAgICAgICAgICAgICAgIHBydW5lTG9jYXRpb24oZWwub3B0aW9uc1trXS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNOdW1iZXJFbGVtZW50KGVsKSAmJiBpc051bWJlclNrZWxldG9uKGVsLnN0eWxlKSkge1xuICAgICAgICAgICAgZGVsZXRlIGVsLnN0eWxlLmxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChpc0RhdGVFbGVtZW50KGVsKSB8fCBpc1RpbWVFbGVtZW50KGVsKSkgJiZcbiAgICAgICAgICAgIGlzRGF0ZVRpbWVTa2VsZXRvbihlbC5zdHlsZSkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBlbC5zdHlsZS5sb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1RhZ0VsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICBwcnVuZUxvY2F0aW9uKGVsLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKG1lc3NhZ2UsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSB7fTsgfVxuICAgIG9wdHMgPSBfX2Fzc2lnbih7IHNob3VsZFBhcnNlU2tlbGV0b25zOiB0cnVlLCByZXF1aXJlc090aGVyQ2xhdXNlOiB0cnVlIH0sIG9wdHMpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgUGFyc2VyKG1lc3NhZ2UsIG9wdHMpLnBhcnNlKCk7XG4gICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgdmFyIGVycm9yID0gU3ludGF4RXJyb3IoRXJyb3JLaW5kW3Jlc3VsdC5lcnIua2luZF0pO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEFzc2lnbiB0byBlcnJvciBvYmplY3RcbiAgICAgICAgZXJyb3IubG9jYXRpb24gPSByZXN1bHQuZXJyLmxvY2F0aW9uO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEFzc2lnbiB0byBlcnJvciBvYmplY3RcbiAgICAgICAgZXJyb3Iub3JpZ2luYWxNZXNzYWdlID0gcmVzdWx0LmVyci5tZXNzYWdlO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgaWYgKCEob3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLmNhcHR1cmVMb2NhdGlvbikpIHtcbiAgICAgICAgcHJ1bmVMb2NhdGlvbihyZXN1bHQudmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC52YWw7XG59XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJztcbi8vIG9ubHkgZm9yIHRlc3RpbmdcbmV4cG9ydCB2YXIgX1BhcnNlciA9IFBhcnNlcjtcbmV4cG9ydCB7IGlzU3RydWN0dXJhbGx5U2FtZSB9IGZyb20gJy4vbWFuaXB1bGF0b3InO1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiRXJyb3JLaW5kIiwiUGFyc2VyIiwiaXNEYXRlRWxlbWVudCIsImlzRGF0ZVRpbWVTa2VsZXRvbiIsImlzTnVtYmVyRWxlbWVudCIsImlzTnVtYmVyU2tlbGV0b24iLCJpc1BsdXJhbEVsZW1lbnQiLCJpc1NlbGVjdEVsZW1lbnQiLCJpc1RhZ0VsZW1lbnQiLCJpc1RpbWVFbGVtZW50IiwicHJ1bmVMb2NhdGlvbiIsImVscyIsImZvckVhY2giLCJlbCIsImxvY2F0aW9uIiwiayIsIm9wdGlvbnMiLCJ2YWx1ZSIsInN0eWxlIiwiY2hpbGRyZW4iLCJwYXJzZSIsIm1lc3NhZ2UiLCJvcHRzIiwic2hvdWxkUGFyc2VTa2VsZXRvbnMiLCJyZXF1aXJlc090aGVyQ2xhdXNlIiwicmVzdWx0IiwiZXJyIiwiZXJyb3IiLCJTeW50YXhFcnJvciIsImtpbmQiLCJvcmlnaW5hbE1lc3NhZ2UiLCJjYXB0dXJlTG9jYXRpb24iLCJ2YWwiLCJfUGFyc2VyIiwiaXNTdHJ1Y3R1cmFsbHlTYW1lIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hoistSelectors: () => (/* binding */ hoistSelectors),\n/* harmony export */   isStructurallySame: () => (/* binding */ isStructurallySame)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n\n\nfunction cloneDeep(obj) {\n  if (Array.isArray(obj)) {\n    // @ts-expect-error meh\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], obj.map(cloneDeep), true);\n  }\n  if (obj !== null && typeof obj === 'object') {\n    // @ts-expect-error meh\n    return Object.keys(obj).reduce(function (cloned, k) {\n      // @ts-expect-error meh\n      cloned[k] = cloneDeep(obj[k]);\n      return cloned;\n    }, {});\n  }\n  return obj;\n}\nfunction hoistPluralOrSelectElement(ast, el, positionToInject) {\n  // pull this out of the ast and move it to the top\n  var cloned = cloneDeep(el);\n  var options = cloned.options;\n  cloned.options = Object.keys(options).reduce(function (all, k) {\n    var newValue = hoistSelectors((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], ast.slice(0, positionToInject), true), options[k].value, true), ast.slice(positionToInject + 1), true));\n    all[k] = {\n      value: newValue\n    };\n    return all;\n  }, {});\n  return cloned;\n}\nfunction isPluralOrSelectElement(el) {\n  return (0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el);\n}\nfunction findPluralOrSelectElement(ast) {\n  return !!ast.find(function (el) {\n    if (isPluralOrSelectElement(el)) {\n      return true;\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      return findPluralOrSelectElement(el.children);\n    }\n    return false;\n  });\n}\n/**\n * Hoist all selectors to the beginning of the AST & flatten the\n * resulting options. E.g:\n * \"I have {count, plural, one{a dog} other{many dogs}}\"\n * becomes \"{count, plural, one{I have a dog} other{I have many dogs}}\".\n * If there are multiple selectors, the order of which one is hoisted 1st\n * is non-deterministic.\n * The goal is to provide as many full sentences as possible since fragmented\n * sentences are not translator-friendly\n * @param ast AST\n */\nfunction hoistSelectors(ast) {\n  for (var i = 0; i < ast.length; i++) {\n    var el = ast[i];\n    if (isPluralOrSelectElement(el)) {\n      return [hoistPluralOrSelectElement(ast, el, i)];\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el) && findPluralOrSelectElement([el])) {\n      throw new Error('Cannot hoist plural/select within a tag element. Please put the tag element inside each plural/select option');\n    }\n  }\n  return ast;\n}\n/**\n * Collect all variables in an AST to Record<string, TYPE>\n * @param ast AST to collect variables from\n * @param vars Record of variable name to variable type\n */\nfunction collectVariables(ast, vars) {\n  if (vars === void 0) {\n    vars = new Map();\n  }\n  ast.forEach(function (el) {\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n      if (el.value in vars && vars.get(el.value) !== el.type) {\n        throw new Error(\"Variable \".concat(el.value, \" has conflicting types\"));\n      }\n      vars.set(el.value, el.type);\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n      vars.set(el.value, el.type);\n      Object.keys(el.options).forEach(function (k) {\n        collectVariables(el.options[k].value, vars);\n      });\n    }\n    if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n      vars.set(el.value, el.type);\n      collectVariables(el.children, vars);\n    }\n  });\n}\n/**\n * Check if 2 ASTs are structurally the same. This primarily means that\n * they have the same variables with the same type\n * @param a\n * @param b\n * @returns\n */\nfunction isStructurallySame(a, b) {\n  var aVars = new Map();\n  var bVars = new Map();\n  collectVariables(a, aVars);\n  collectVariables(b, bVars);\n  if (aVars.size !== bVars.size) {\n    return {\n      success: false,\n      error: new Error(\"Different number of variables: [\".concat(Array.from(aVars.keys()).join(', '), \"] vs [\").concat(Array.from(bVars.keys()).join(', '), \"]\"))\n    };\n  }\n  return Array.from(aVars.entries()).reduce(function (result, _a) {\n    var key = _a[0],\n      type = _a[1];\n    if (!result.success) {\n      return result;\n    }\n    var bType = bVars.get(key);\n    if (bType == null) {\n      return {\n        success: false,\n        error: new Error(\"Missing variable \".concat(key, \" in message\"))\n      };\n    }\n    if (bType !== type) {\n      return {\n        success: false,\n        error: new Error(\"Variable \".concat(key, \" has conflicting types: \").concat(_types__WEBPACK_IMPORTED_MODULE_0__.TYPE[type], \" vs \").concat(_types__WEBPACK_IMPORTED_MODULE_0__.TYPE[bType]))\n      };\n    }\n    return result;\n  }, {\n    success: true\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regex.generated */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\");\n/* harmony import */ var _formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/icu-skeleton-parser */ \"(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/index.js\");\n/* harmony import */ var _date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-time-pattern-generator */ \"(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\");\nvar _a;\n\n\n\n\n\n\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*\"));\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(\"\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*$\"));\nfunction createLocation(start, end) {\n  return {\n    start: start,\n    end: end\n  };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith && '_a'.startsWith('a', 1);\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function (n) {\n  return typeof n === 'number' && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 0x1fffffffffffff;\n};\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n  var re = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  /**\n   * legacy Edge or Xbox One browser\n   * Unicode flag support: supported\n   * Pattern_Syntax support: not supported\n   * See https://github.com/formatjs/formatjs/issues/2822\n   */\n  REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';\n} catch (_) {\n  REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith ?\n// Native\nfunction startsWith(s, search, position) {\n  return s.startsWith(search, position);\n} :\n// For IE11\nfunction startsWith(s, search, position) {\n  return s.slice(position, position + search.length) === search;\n};\nvar fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint :\n// IE11\nfunction fromCodePoint() {\n  var codePoints = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    codePoints[_i] = arguments[_i];\n  }\n  var elements = '';\n  var length = codePoints.length;\n  var i = 0;\n  var code;\n  while (length > i) {\n    code = codePoints[i++];\n    if (code > 0x10ffff) throw RangeError(code + ' is not a valid code point');\n    elements += code < 0x10000 ? String.fromCharCode(code) : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00);\n  }\n  return elements;\n};\nvar fromEntries =\n// native\nhasNativeFromEntries ? Object.fromEntries :\n// Ponyfill\nfunction fromEntries(entries) {\n  var obj = {};\n  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _a = entries_1[_i],\n      k = _a[0],\n      v = _a[1];\n    obj[k] = v;\n  }\n  return obj;\n};\nvar codePointAt = hasNativeCodePointAt ?\n// Native\nfunction codePointAt(s, index) {\n  return s.codePointAt(index);\n} :\n// IE 11\nfunction codePointAt(s, index) {\n  var size = s.length;\n  if (index < 0 || index >= size) {\n    return undefined;\n  }\n  var first = s.charCodeAt(index);\n  var second;\n  return first < 0xd800 || first > 0xdbff || index + 1 === size || (second = s.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? first : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;\n};\nvar trimStart = hasTrimStart ?\n// Native\nfunction trimStart(s) {\n  return s.trimStart();\n} :\n// Ponyfill\nfunction trimStart(s) {\n  return s.replace(SPACE_SEPARATOR_START_REGEX, '');\n};\nvar trimEnd = hasTrimEnd ?\n// Native\nfunction trimEnd(s) {\n  return s.trimEnd();\n} :\n// Ponyfill\nfunction trimEnd(s) {\n  return s.replace(SPACE_SEPARATOR_END_REGEX, '');\n};\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n  return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n  // Native\n  var IDENTIFIER_PREFIX_RE_1 = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var _a;\n    IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n    var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n    return (_a = match[1]) !== null && _a !== void 0 ? _a : '';\n  };\n} else {\n  // IE11\n  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n    var match = [];\n    while (true) {\n      var c = codePointAt(s, index);\n      if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n        break;\n      }\n      match.push(c);\n      index += c >= 0x10000 ? 2 : 1;\n    }\n    return fromCodePoint.apply(void 0, match);\n  };\n}\nvar Parser = /** @class */function () {\n  function Parser(message, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.message = message;\n    this.position = {\n      offset: 0,\n      line: 1,\n      column: 1\n    };\n    this.ignoreTag = !!options.ignoreTag;\n    this.locale = options.locale;\n    this.requiresOtherClause = !!options.requiresOtherClause;\n    this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n  }\n  Parser.prototype.parse = function () {\n    if (this.offset() !== 0) {\n      throw Error('parser can only be used once');\n    }\n    return this.parseMessage(0, '', false);\n  };\n  Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {\n    var elements = [];\n    while (!this.isEOF()) {\n      var char = this.char();\n      if (char === 123 /* `{` */) {\n        var result = this.parseArgument(nestingLevel, expectingCloseTag);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      } else if (char === 125 /* `}` */ && nestingLevel > 0) {\n        break;\n      } else if (char === 35 /* `#` */ && (parentArgType === 'plural' || parentArgType === 'selectordinal')) {\n        var position = this.clonePosition();\n        this.bump();\n        elements.push({\n          type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.pound,\n          location: createLocation(position, this.clonePosition())\n        });\n      } else if (char === 60 /* `<` */ && !this.ignoreTag && this.peek() === 47 // char code for '/'\n      ) {\n        if (expectingCloseTag) {\n          break;\n        } else {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n      } else if (char === 60 /* `<` */ && !this.ignoreTag && _isAlpha(this.peek() || 0)) {\n        var result = this.parseTag(nestingLevel, parentArgType);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      } else {\n        var result = this.parseLiteral(nestingLevel, parentArgType);\n        if (result.err) {\n          return result;\n        }\n        elements.push(result.val);\n      }\n    }\n    return {\n      val: elements,\n      err: null\n    };\n  };\n  /**\n   * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n   * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n   * are accepted:\n   *\n   * ```\n   * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n   * tagName ::= [a-z] (PENChar)*\n   * PENChar ::=\n   *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n   *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n   *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n   * ```\n   *\n   * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n   * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n   * since other tag-based engines like React allow it\n   */\n  Parser.prototype.parseTag = function (nestingLevel, parentArgType) {\n    var startPosition = this.clonePosition();\n    this.bump(); // `<`\n    var tagName = this.parseTagName();\n    this.bumpSpace();\n    if (this.bumpIf('/>')) {\n      // Self closing tag\n      return {\n        val: {\n          type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n          value: \"<\".concat(tagName, \"/>\"),\n          location: createLocation(startPosition, this.clonePosition())\n        },\n        err: null\n      };\n    } else if (this.bumpIf('>')) {\n      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n      if (childrenResult.err) {\n        return childrenResult;\n      }\n      var children = childrenResult.val;\n      // Expecting a close tag\n      var endTagStartPosition = this.clonePosition();\n      if (this.bumpIf('</')) {\n        if (this.isEOF() || !_isAlpha(this.char())) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n        var closingTagNameStartPosition = this.clonePosition();\n        var closingTagName = this.parseTagName();\n        if (tagName !== closingTagName) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (!this.bumpIf('>')) {\n          return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n        }\n        return {\n          val: {\n            type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.tag,\n            value: tagName,\n            children: children,\n            location: createLocation(startPosition, this.clonePosition())\n          },\n          err: null\n        };\n      } else {\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n      }\n    } else {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n    }\n  };\n  /**\n   * This method assumes that the caller has peeked ahead for the first tag character.\n   */\n  Parser.prototype.parseTagName = function () {\n    var startOffset = this.offset();\n    this.bump(); // the first tag name character\n    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {\n      this.bump();\n    }\n    return this.message.slice(startOffset, this.offset());\n  };\n  Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {\n    var start = this.clonePosition();\n    var value = '';\n    while (true) {\n      var parseQuoteResult = this.tryParseQuote(parentArgType);\n      if (parseQuoteResult) {\n        value += parseQuoteResult;\n        continue;\n      }\n      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n      if (parseUnquotedResult) {\n        value += parseUnquotedResult;\n        continue;\n      }\n      var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n      if (parseLeftAngleResult) {\n        value += parseLeftAngleResult;\n        continue;\n      }\n      break;\n    }\n    var location = createLocation(start, this.clonePosition());\n    return {\n      val: {\n        type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n        value: value,\n        location: location\n      },\n      err: null\n    };\n  };\n  Parser.prototype.tryParseLeftAngleBracket = function () {\n    if (!this.isEOF() && this.char() === 60 /* `<` */ && (this.ignoreTag ||\n    // If at the opening tag or closing tag position, bail.\n    !_isAlphaOrSlash(this.peek() || 0))) {\n      this.bump(); // `<`\n      return '<';\n    }\n    return null;\n  };\n  /**\n   * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n   * a character that requires quoting (that is, \"only where needed\"), and works the same in\n   * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n   */\n  Parser.prototype.tryParseQuote = function (parentArgType) {\n    if (this.isEOF() || this.char() !== 39 /* `'` */) {\n      return null;\n    }\n    // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n    // Check if is valid escaped character\n    switch (this.peek()) {\n      case 39 /* `'` */:\n        // double quote, should return as a single quote.\n        this.bump();\n        this.bump();\n        return \"'\";\n      // '{', '<', '>', '}'\n      case 123:\n      case 60:\n      case 62:\n      case 125:\n        break;\n      case 35:\n        // '#'\n        if (parentArgType === 'plural' || parentArgType === 'selectordinal') {\n          break;\n        }\n        return null;\n      default:\n        return null;\n    }\n    this.bump(); // apostrophe\n    var codePoints = [this.char()]; // escaped char\n    this.bump();\n    // read chars until the optional closing apostrophe is found\n    while (!this.isEOF()) {\n      var ch = this.char();\n      if (ch === 39 /* `'` */) {\n        if (this.peek() === 39 /* `'` */) {\n          codePoints.push(39);\n          // Bump one more time because we need to skip 2 characters.\n          this.bump();\n        } else {\n          // Optional closing apostrophe.\n          this.bump();\n          break;\n        }\n      } else {\n        codePoints.push(ch);\n      }\n      this.bump();\n    }\n    return fromCodePoint.apply(void 0, codePoints);\n  };\n  Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {\n    if (this.isEOF()) {\n      return null;\n    }\n    var ch = this.char();\n    if (ch === 60 /* `<` */ || ch === 123 /* `{` */ || ch === 35 /* `#` */ && (parentArgType === 'plural' || parentArgType === 'selectordinal') || ch === 125 /* `}` */ && nestingLevel > 0) {\n      return null;\n    } else {\n      this.bump();\n      return fromCodePoint(ch);\n    }\n  };\n  Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {\n    var openingBracePosition = this.clonePosition();\n    this.bump(); // `{`\n    this.bumpSpace();\n    if (this.isEOF()) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    if (this.char() === 125 /* `}` */) {\n      this.bump();\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    // argument name\n    var value = this.parseIdentifierIfPossible().value;\n    if (!value) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    this.bumpSpace();\n    if (this.isEOF()) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    switch (this.char()) {\n      // Simple argument: `{name}`\n      case 125 /* `}` */:\n        {\n          this.bump(); // `}`\n          return {\n            val: {\n              type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.argument,\n              // value does not include the opening and closing braces.\n              value: value,\n              location: createLocation(openingBracePosition, this.clonePosition())\n            },\n            err: null\n          };\n        }\n      // Argument with options: `{name, format, ...}`\n      case 44 /* `,` */:\n        {\n          this.bump(); // `,`\n          this.bumpSpace();\n          if (this.isEOF()) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n          }\n          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n        }\n      default:\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n    }\n  };\n  /**\n   * Advance the parser until the end of the identifier, if it is currently on\n   * an identifier character. Return an empty string otherwise.\n   */\n  Parser.prototype.parseIdentifierIfPossible = function () {\n    var startingPosition = this.clonePosition();\n    var startOffset = this.offset();\n    var value = matchIdentifierAtIndex(this.message, startOffset);\n    var endOffset = startOffset + value.length;\n    this.bumpTo(endOffset);\n    var endPosition = this.clonePosition();\n    var location = createLocation(startingPosition, endPosition);\n    return {\n      value: value,\n      location: location\n    };\n  };\n  Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {\n    var _a;\n    // Parse this range:\n    // {name, type, style}\n    //        ^---^\n    var typeStartPosition = this.clonePosition();\n    var argType = this.parseIdentifierIfPossible().value;\n    var typeEndPosition = this.clonePosition();\n    switch (argType) {\n      case '':\n        // Expecting a style string number, date, time, plural, selectordinal, or select.\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n      case 'number':\n      case 'date':\n      case 'time':\n        {\n          // Parse this range:\n          // {name, number, style}\n          //              ^-------^\n          this.bumpSpace();\n          var styleAndLocation = null;\n          if (this.bumpIf(',')) {\n            this.bumpSpace();\n            var styleStartPosition = this.clonePosition();\n            var result = this.parseSimpleArgStyleIfPossible();\n            if (result.err) {\n              return result;\n            }\n            var style = trimEnd(result.val);\n            if (style.length === 0) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n            styleAndLocation = {\n              style: style,\n              styleLocation: styleLocation\n            };\n          }\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n          var location_1 = createLocation(openingBracePosition, this.clonePosition());\n          // Extract style or skeleton\n          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {\n            // Skeleton starts with `::`.\n            var skeleton = trimStart(styleAndLocation.style.slice(2));\n            if (argType === 'number') {\n              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n              if (result.err) {\n                return result;\n              }\n              return {\n                val: {\n                  type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number,\n                  value: value,\n                  location: location_1,\n                  style: result.val\n                },\n                err: null\n              };\n            } else {\n              if (skeleton.length === 0) {\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n              }\n              var dateTimePattern = skeleton;\n              // Get \"best match\" pattern only if locale is passed, if not, let it\n              // pass as-is where `parseDateTimeSkeleton()` will throw an error\n              // for unsupported patterns.\n              if (this.locale) {\n                dateTimePattern = (0,_date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__.getBestPattern)(skeleton, this.locale);\n              }\n              var style = {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.dateTime,\n                pattern: dateTimePattern,\n                location: styleAndLocation.styleLocation,\n                parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseDateTimeSkeleton)(dateTimePattern) : {}\n              };\n              var type = argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time;\n              return {\n                val: {\n                  type: type,\n                  value: value,\n                  location: location_1,\n                  style: style\n                },\n                err: null\n              };\n            }\n          }\n          // Regular style or no style.\n          return {\n            val: {\n              type: argType === 'number' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number : argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time,\n              value: value,\n              location: location_1,\n              style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null\n            },\n            err: null\n          };\n        }\n      case 'plural':\n      case 'selectordinal':\n      case 'select':\n        {\n          // Parse this range:\n          // {name, plural, options}\n          //              ^---------^\n          var typeEndPosition_1 = this.clonePosition();\n          this.bumpSpace();\n          if (!this.bumpIf(',')) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, typeEndPosition_1)));\n          }\n          this.bumpSpace();\n          // Parse offset:\n          // {name, plural, offset:1, options}\n          //                ^-----^\n          //\n          // or the first option:\n          //\n          // {name, plural, one {...} other {...}}\n          //                ^--^\n          var identifierAndLocation = this.parseIdentifierIfPossible();\n          var pluralOffset = 0;\n          if (argType !== 'select' && identifierAndLocation.value === 'offset') {\n            if (!this.bumpIf(':')) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            this.bumpSpace();\n            var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n            if (result.err) {\n              return result;\n            }\n            // Parse another identifier for option parsing\n            this.bumpSpace();\n            identifierAndLocation = this.parseIdentifierIfPossible();\n            pluralOffset = result.val;\n          }\n          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n          if (optionsResult.err) {\n            return optionsResult;\n          }\n          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n          if (argCloseResult.err) {\n            return argCloseResult;\n          }\n          var location_2 = createLocation(openingBracePosition, this.clonePosition());\n          if (argType === 'select') {\n            return {\n              val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.select,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                location: location_2\n              },\n              err: null\n            };\n          } else {\n            return {\n              val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.plural,\n                value: value,\n                options: fromEntries(optionsResult.val),\n                offset: pluralOffset,\n                pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',\n                location: location_2\n              },\n              err: null\n            };\n          }\n        }\n      default:\n        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n    }\n  };\n  Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {\n    // Parse: {value, number, ::currency/GBP }\n    //\n    if (this.isEOF() || this.char() !== 125 /* `}` */) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n    }\n    this.bump(); // `}`\n    return {\n      val: true,\n      err: null\n    };\n  };\n  /**\n   * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n   */\n  Parser.prototype.parseSimpleArgStyleIfPossible = function () {\n    var nestedBraces = 0;\n    var startPosition = this.clonePosition();\n    while (!this.isEOF()) {\n      var ch = this.char();\n      switch (ch) {\n        case 39 /* `'` */:\n          {\n            // Treat apostrophe as quoting but include it in the style part.\n            // Find the end of the quoted literal text.\n            this.bump();\n            var apostrophePosition = this.clonePosition();\n            if (!this.bumpUntil(\"'\")) {\n              return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n            }\n            this.bump();\n            break;\n          }\n        case 123 /* `{` */:\n          {\n            nestedBraces += 1;\n            this.bump();\n            break;\n          }\n        case 125 /* `}` */:\n          {\n            if (nestedBraces > 0) {\n              nestedBraces -= 1;\n            } else {\n              return {\n                val: this.message.slice(startPosition.offset, this.offset()),\n                err: null\n              };\n            }\n            break;\n          }\n        default:\n          this.bump();\n          break;\n      }\n    }\n    return {\n      val: this.message.slice(startPosition.offset, this.offset()),\n      err: null\n    };\n  };\n  Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {\n    var tokens = [];\n    try {\n      tokens = (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeletonFromString)(skeleton);\n    } catch (e) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_NUMBER_SKELETON, location);\n    }\n    return {\n      val: {\n        type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.number,\n        tokens: tokens,\n        location: location,\n        parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeleton)(tokens) : {}\n      },\n      err: null\n    };\n  };\n  /**\n   * @param nesting_level The current nesting level of messages.\n   *     This can be positive when parsing message fragment in select or plural argument options.\n   * @param parent_arg_type The parent argument's type.\n   * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n   *     the argument. It is a by-product of a previous parsing attempt.\n   * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n   *     between a pair of opening and closing tags. The nested message will not parse beyond\n   *     the closing tag boundary.\n   */\n  Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n    var _a;\n    var hasOtherClause = false;\n    var options = [];\n    var parsedSelectors = new Set();\n    var selector = parsedFirstIdentifier.value,\n      selectorLocation = parsedFirstIdentifier.location;\n    // Parse:\n    // one {one apple}\n    // ^--^\n    while (true) {\n      if (selector.length === 0) {\n        var startPosition = this.clonePosition();\n        if (parentArgType !== 'select' && this.bumpIf('=')) {\n          // Try parse `={number}` selector\n          var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n          if (result.err) {\n            return result;\n          }\n          selectorLocation = createLocation(startPosition, this.clonePosition());\n          selector = this.message.slice(startPosition.offset, this.offset());\n        } else {\n          break;\n        }\n      }\n      // Duplicate selector clauses\n      if (parsedSelectors.has(selector)) {\n        return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n      }\n      if (selector === 'other') {\n        hasOtherClause = true;\n      }\n      // Parse:\n      // one {one apple}\n      //     ^----------^\n      this.bumpSpace();\n      var openingBracePosition = this.clonePosition();\n      if (!this.bumpIf('{')) {\n        return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n      }\n      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n      if (fragmentResult.err) {\n        return fragmentResult;\n      }\n      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n      if (argCloseResult.err) {\n        return argCloseResult;\n      }\n      options.push([selector, {\n        value: fragmentResult.val,\n        location: createLocation(openingBracePosition, this.clonePosition())\n      }]);\n      // Keep track of the existing selectors\n      parsedSelectors.add(selector);\n      // Prep next selector clause.\n      this.bumpSpace();\n      _a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location;\n    }\n    if (options.length === 0) {\n      return this.error(parentArgType === 'select' ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n    if (this.requiresOtherClause && !hasOtherClause) {\n      return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n    }\n    return {\n      val: options,\n      err: null\n    };\n  };\n  Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {\n    var sign = 1;\n    var startingPosition = this.clonePosition();\n    if (this.bumpIf('+')) {} else if (this.bumpIf('-')) {\n      sign = -1;\n    }\n    var hasDigits = false;\n    var decimal = 0;\n    while (!this.isEOF()) {\n      var ch = this.char();\n      if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {\n        hasDigits = true;\n        decimal = decimal * 10 + (ch - 48);\n        this.bump();\n      } else {\n        break;\n      }\n    }\n    var location = createLocation(startingPosition, this.clonePosition());\n    if (!hasDigits) {\n      return this.error(expectNumberError, location);\n    }\n    decimal *= sign;\n    if (!isSafeInteger(decimal)) {\n      return this.error(invalidNumberError, location);\n    }\n    return {\n      val: decimal,\n      err: null\n    };\n  };\n  Parser.prototype.offset = function () {\n    return this.position.offset;\n  };\n  Parser.prototype.isEOF = function () {\n    return this.offset() === this.message.length;\n  };\n  Parser.prototype.clonePosition = function () {\n    // This is much faster than `Object.assign` or spread.\n    return {\n      offset: this.position.offset,\n      line: this.position.line,\n      column: this.position.column\n    };\n  };\n  /**\n   * Return the code point at the current position of the parser.\n   * Throws if the index is out of bound.\n   */\n  Parser.prototype.char = function () {\n    var offset = this.position.offset;\n    if (offset >= this.message.length) {\n      throw Error('out of bound');\n    }\n    var code = codePointAt(this.message, offset);\n    if (code === undefined) {\n      throw Error(\"Offset \".concat(offset, \" is at invalid UTF-16 code unit boundary\"));\n    }\n    return code;\n  };\n  Parser.prototype.error = function (kind, location) {\n    return {\n      val: null,\n      err: {\n        kind: kind,\n        message: this.message,\n        location: location\n      }\n    };\n  };\n  /** Bump the parser to the next UTF-16 code unit. */\n  Parser.prototype.bump = function () {\n    if (this.isEOF()) {\n      return;\n    }\n    var code = this.char();\n    if (code === 10 /* '\\n' */) {\n      this.position.line += 1;\n      this.position.column = 1;\n      this.position.offset += 1;\n    } else {\n      this.position.column += 1;\n      // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n      this.position.offset += code < 0x10000 ? 1 : 2;\n    }\n  };\n  /**\n   * If the substring starting at the current position of the parser has\n   * the given prefix, then bump the parser to the character immediately\n   * following the prefix and return true. Otherwise, don't bump the parser\n   * and return false.\n   */\n  Parser.prototype.bumpIf = function (prefix) {\n    if (startsWith(this.message, prefix, this.offset())) {\n      for (var i = 0; i < prefix.length; i++) {\n        this.bump();\n      }\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Bump the parser until the pattern character is found and return `true`.\n   * Otherwise bump to the end of the file and return `false`.\n   */\n  Parser.prototype.bumpUntil = function (pattern) {\n    var currentOffset = this.offset();\n    var index = this.message.indexOf(pattern, currentOffset);\n    if (index >= 0) {\n      this.bumpTo(index);\n      return true;\n    } else {\n      this.bumpTo(this.message.length);\n      return false;\n    }\n  };\n  /**\n   * Bump the parser to the target offset.\n   * If target offset is beyond the end of the input, bump the parser to the end of the input.\n   */\n  Parser.prototype.bumpTo = function (targetOffset) {\n    if (this.offset() > targetOffset) {\n      throw Error(\"targetOffset \".concat(targetOffset, \" must be greater than or equal to the current offset \").concat(this.offset()));\n    }\n    targetOffset = Math.min(targetOffset, this.message.length);\n    while (true) {\n      var offset = this.offset();\n      if (offset === targetOffset) {\n        break;\n      }\n      if (offset > targetOffset) {\n        throw Error(\"targetOffset \".concat(targetOffset, \" is at invalid UTF-16 code unit boundary\"));\n      }\n      this.bump();\n      if (this.isEOF()) {\n        break;\n      }\n    }\n  };\n  /** advance the parser through all whitespace to the next non-whitespace code unit. */\n  Parser.prototype.bumpSpace = function () {\n    while (!this.isEOF() && _isWhiteSpace(this.char())) {\n      this.bump();\n    }\n  };\n  /**\n   * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n   * If the input has been exhausted, then this returns null.\n   */\n  Parser.prototype.peek = function () {\n    if (this.isEOF()) {\n      return null;\n    }\n    var code = this.char();\n    var offset = this.offset();\n    var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n    return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n  };\n  return Parser;\n}();\n\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */\nfunction _isAlpha(codepoint) {\n  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;\n}\nfunction _isAlphaOrSlash(codepoint) {\n  return _isAlpha(codepoint) || codepoint === 47; /* '/' */\n}\n/** See `parseTag` function docs. */\nfunction _isPotentialElementNameChar(c) {\n  return c === 45 /* '-' */ || c === 46 /* '.' */ || c >= 48 && c <= 57 /* 0..9 */ || c === 95 /* '_' */ || c >= 97 && c <= 122 /** a..z */ || c >= 65 && c <= 90 /* A..Z */ || c == 0xb7 || c >= 0xc0 && c <= 0xd6 || c >= 0xd8 && c <= 0xf6 || c >= 0xf8 && c <= 0x37d || c >= 0x37f && c <= 0x1fff || c >= 0x200c && c <= 0x200d || c >= 0x203f && c <= 0x2040 || c >= 0x2070 && c <= 0x218f || c >= 0x2c00 && c <= 0x2fef || c >= 0x3001 && c <= 0xd7ff || c >= 0xf900 && c <= 0xfdcf || c >= 0xfdf0 && c <= 0xfffd || c >= 0x10000 && c <= 0xeffff;\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isWhiteSpace(c) {\n  return c >= 0x0009 && c <= 0x000d || c === 0x0020 || c === 0x0085 || c >= 0x200e && c <= 0x200f || c === 0x2028 || c === 0x2029;\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isPatternSyntax(c) {\n  return c >= 0x0021 && c <= 0x0023 || c === 0x0024 || c >= 0x0025 && c <= 0x0027 || c === 0x0028 || c === 0x0029 || c === 0x002a || c === 0x002b || c === 0x002c || c === 0x002d || c >= 0x002e && c <= 0x002f || c >= 0x003a && c <= 0x003b || c >= 0x003c && c <= 0x003e || c >= 0x003f && c <= 0x0040 || c === 0x005b || c === 0x005c || c === 0x005d || c === 0x005e || c === 0x0060 || c === 0x007b || c === 0x007c || c === 0x007d || c === 0x007e || c === 0x00a1 || c >= 0x00a2 && c <= 0x00a5 || c === 0x00a6 || c === 0x00a7 || c === 0x00a9 || c === 0x00ab || c === 0x00ac || c === 0x00ae || c === 0x00b0 || c === 0x00b1 || c === 0x00b6 || c === 0x00bb || c === 0x00bf || c === 0x00d7 || c === 0x00f7 || c >= 0x2010 && c <= 0x2015 || c >= 0x2016 && c <= 0x2017 || c === 0x2018 || c === 0x2019 || c === 0x201a || c >= 0x201b && c <= 0x201c || c === 0x201d || c === 0x201e || c === 0x201f || c >= 0x2020 && c <= 0x2027 || c >= 0x2030 && c <= 0x2038 || c === 0x2039 || c === 0x203a || c >= 0x203b && c <= 0x203e || c >= 0x2041 && c <= 0x2043 || c === 0x2044 || c === 0x2045 || c === 0x2046 || c >= 0x2047 && c <= 0x2051 || c === 0x2052 || c === 0x2053 || c >= 0x2055 && c <= 0x205e || c >= 0x2190 && c <= 0x2194 || c >= 0x2195 && c <= 0x2199 || c >= 0x219a && c <= 0x219b || c >= 0x219c && c <= 0x219f || c === 0x21a0 || c >= 0x21a1 && c <= 0x21a2 || c === 0x21a3 || c >= 0x21a4 && c <= 0x21a5 || c === 0x21a6 || c >= 0x21a7 && c <= 0x21ad || c === 0x21ae || c >= 0x21af && c <= 0x21cd || c >= 0x21ce && c <= 0x21cf || c >= 0x21d0 && c <= 0x21d1 || c === 0x21d2 || c === 0x21d3 || c === 0x21d4 || c >= 0x21d5 && c <= 0x21f3 || c >= 0x21f4 && c <= 0x22ff || c >= 0x2300 && c <= 0x2307 || c === 0x2308 || c === 0x2309 || c === 0x230a || c === 0x230b || c >= 0x230c && c <= 0x231f || c >= 0x2320 && c <= 0x2321 || c >= 0x2322 && c <= 0x2328 || c === 0x2329 || c === 0x232a || c >= 0x232b && c <= 0x237b || c === 0x237c || c >= 0x237d && c <= 0x239a || c >= 0x239b && c <= 0x23b3 || c >= 0x23b4 && c <= 0x23db || c >= 0x23dc && c <= 0x23e1 || c >= 0x23e2 && c <= 0x2426 || c >= 0x2427 && c <= 0x243f || c >= 0x2440 && c <= 0x244a || c >= 0x244b && c <= 0x245f || c >= 0x2500 && c <= 0x25b6 || c === 0x25b7 || c >= 0x25b8 && c <= 0x25c0 || c === 0x25c1 || c >= 0x25c2 && c <= 0x25f7 || c >= 0x25f8 && c <= 0x25ff || c >= 0x2600 && c <= 0x266e || c === 0x266f || c >= 0x2670 && c <= 0x2767 || c === 0x2768 || c === 0x2769 || c === 0x276a || c === 0x276b || c === 0x276c || c === 0x276d || c === 0x276e || c === 0x276f || c === 0x2770 || c === 0x2771 || c === 0x2772 || c === 0x2773 || c === 0x2774 || c === 0x2775 || c >= 0x2794 && c <= 0x27bf || c >= 0x27c0 && c <= 0x27c4 || c === 0x27c5 || c === 0x27c6 || c >= 0x27c7 && c <= 0x27e5 || c === 0x27e6 || c === 0x27e7 || c === 0x27e8 || c === 0x27e9 || c === 0x27ea || c === 0x27eb || c === 0x27ec || c === 0x27ed || c === 0x27ee || c === 0x27ef || c >= 0x27f0 && c <= 0x27ff || c >= 0x2800 && c <= 0x28ff || c >= 0x2900 && c <= 0x2982 || c === 0x2983 || c === 0x2984 || c === 0x2985 || c === 0x2986 || c === 0x2987 || c === 0x2988 || c === 0x2989 || c === 0x298a || c === 0x298b || c === 0x298c || c === 0x298d || c === 0x298e || c === 0x298f || c === 0x2990 || c === 0x2991 || c === 0x2992 || c === 0x2993 || c === 0x2994 || c === 0x2995 || c === 0x2996 || c === 0x2997 || c === 0x2998 || c >= 0x2999 && c <= 0x29d7 || c === 0x29d8 || c === 0x29d9 || c === 0x29da || c === 0x29db || c >= 0x29dc && c <= 0x29fb || c === 0x29fc || c === 0x29fd || c >= 0x29fe && c <= 0x2aff || c >= 0x2b00 && c <= 0x2b2f || c >= 0x2b30 && c <= 0x2b44 || c >= 0x2b45 && c <= 0x2b46 || c >= 0x2b47 && c <= 0x2b4c || c >= 0x2b4d && c <= 0x2b73 || c >= 0x2b74 && c <= 0x2b75 || c >= 0x2b76 && c <= 0x2b95 || c === 0x2b96 || c >= 0x2b97 && c <= 0x2bff || c >= 0x2e00 && c <= 0x2e01 || c === 0x2e02 || c === 0x2e03 || c === 0x2e04 || c === 0x2e05 || c >= 0x2e06 && c <= 0x2e08 || c === 0x2e09 || c === 0x2e0a || c === 0x2e0b || c === 0x2e0c || c === 0x2e0d || c >= 0x2e0e && c <= 0x2e16 || c === 0x2e17 || c >= 0x2e18 && c <= 0x2e19 || c === 0x2e1a || c === 0x2e1b || c === 0x2e1c || c === 0x2e1d || c >= 0x2e1e && c <= 0x2e1f || c === 0x2e20 || c === 0x2e21 || c === 0x2e22 || c === 0x2e23 || c === 0x2e24 || c === 0x2e25 || c === 0x2e26 || c === 0x2e27 || c === 0x2e28 || c === 0x2e29 || c >= 0x2e2a && c <= 0x2e2e || c === 0x2e2f || c >= 0x2e30 && c <= 0x2e39 || c >= 0x2e3a && c <= 0x2e3b || c >= 0x2e3c && c <= 0x2e3f || c === 0x2e40 || c === 0x2e41 || c === 0x2e42 || c >= 0x2e43 && c <= 0x2e4f || c >= 0x2e50 && c <= 0x2e51 || c === 0x2e52 || c >= 0x2e53 && c <= 0x2e7f || c >= 0x3001 && c <= 0x3003 || c === 0x3008 || c === 0x3009 || c === 0x300a || c === 0x300b || c === 0x300c || c === 0x300d || c === 0x300e || c === 0x300f || c === 0x3010 || c === 0x3011 || c >= 0x3012 && c <= 0x3013 || c === 0x3014 || c === 0x3015 || c === 0x3016 || c === 0x3017 || c === 0x3018 || c === 0x3019 || c === 0x301a || c === 0x301b || c === 0x301c || c === 0x301d || c >= 0x301e && c <= 0x301f || c === 0x3020 || c === 0x3030 || c === 0xfd3e || c === 0xfd3f || c >= 0xfe45 && c <= 0xfe46;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPACE_SEPARATOR_REGEX: () => (/* binding */ SPACE_SEPARATOR_REGEX),\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL3JlZ2V4LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ08sSUFBSUEscUJBQXFCLEdBQUcsOENBQThDO0FBQzFFLElBQUlDLGlCQUFpQixHQUFHLHNDQUFzQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBRE1JTlxcT25lRHJpdmVcXERlc2t0b3BcXEltIGEgYmlyZGRkZGRkZFxcbm9kZV9tb2R1bGVzXFxAZm9ybWF0anNcXGljdS1tZXNzYWdlZm9ybWF0LXBhcnNlclxcbGliXFxyZWdleC5nZW5lcmF0ZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGdlbmVyYXRlZCBmcm9tIHJlZ2V4LWdlbi50c1xuZXhwb3J0IHZhciBTUEFDRV9TRVBBUkFUT1JfUkVHRVggPSAvWyBcXHhBMFxcdTE2ODBcXHUyMDAwLVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBdLztcbmV4cG9ydCB2YXIgV0hJVEVfU1BBQ0VfUkVHRVggPSAvW1xcdC1cXHIgXFx4ODVcXHUyMDBFXFx1MjAwRlxcdTIwMjhcXHUyMDI5XS87XG4iXSwibmFtZXMiOlsiU1BBQ0VfU0VQQVJBVE9SX1JFR0VYIiwiV0hJVEVfU1BBQ0VfUkVHRVgiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   timeData: () => (/* binding */ timeData)\n/* harmony export */ });\n// @generated from time-data-gen.ts\n// prettier-ignore  \nvar timeData = {\n  \"001\": [\"H\", \"h\"],\n  \"419\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"AC\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"AD\": [\"H\", \"hB\"],\n  \"AE\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"AF\": [\"H\", \"hb\", \"hB\", \"h\"],\n  \"AG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"AI\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"AL\": [\"h\", \"H\", \"hB\"],\n  \"AM\": [\"H\", \"hB\"],\n  \"AO\": [\"H\", \"hB\"],\n  \"AR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"AS\": [\"h\", \"H\"],\n  \"AT\": [\"H\", \"hB\"],\n  \"AU\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"AW\": [\"H\", \"hB\"],\n  \"AX\": [\"H\"],\n  \"AZ\": [\"H\", \"hB\", \"h\"],\n  \"BA\": [\"H\", \"hB\", \"h\"],\n  \"BB\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BD\": [\"h\", \"hB\", \"H\"],\n  \"BE\": [\"H\", \"hB\"],\n  \"BF\": [\"H\", \"hB\"],\n  \"BG\": [\"H\", \"hB\", \"h\"],\n  \"BH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"BI\": [\"H\", \"h\"],\n  \"BJ\": [\"H\", \"hB\"],\n  \"BL\": [\"H\", \"hB\"],\n  \"BM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BN\": [\"hb\", \"hB\", \"h\", \"H\"],\n  \"BO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"BQ\": [\"H\"],\n  \"BR\": [\"H\", \"hB\"],\n  \"BS\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"BT\": [\"h\", \"H\"],\n  \"BW\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"BY\": [\"H\", \"h\"],\n  \"BZ\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CA\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"CC\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CD\": [\"hB\", \"H\"],\n  \"CF\": [\"H\", \"h\", \"hB\"],\n  \"CG\": [\"H\", \"hB\"],\n  \"CH\": [\"H\", \"hB\", \"h\"],\n  \"CI\": [\"H\", \"hB\"],\n  \"CK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CL\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CM\": [\"H\", \"h\", \"hB\"],\n  \"CN\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"CO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CP\": [\"H\"],\n  \"CR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CU\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"CV\": [\"H\", \"hB\"],\n  \"CW\": [\"H\", \"hB\"],\n  \"CX\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"CY\": [\"h\", \"H\", \"hb\", \"hB\"],\n  \"CZ\": [\"H\"],\n  \"DE\": [\"H\", \"hB\"],\n  \"DG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"DJ\": [\"h\", \"H\"],\n  \"DK\": [\"H\"],\n  \"DM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"DO\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"DZ\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"EA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"EC\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"EE\": [\"H\", \"hB\"],\n  \"EG\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"EH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"ER\": [\"h\", \"H\"],\n  \"ES\": [\"H\", \"hB\", \"h\", \"hb\"],\n  \"ET\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"FI\": [\"H\"],\n  \"FJ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"FK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"FM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"FO\": [\"H\", \"h\"],\n  \"FR\": [\"H\", \"hB\"],\n  \"GA\": [\"H\", \"hB\"],\n  \"GB\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GD\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GE\": [\"H\", \"hB\", \"h\"],\n  \"GF\": [\"H\", \"hB\"],\n  \"GG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GH\": [\"h\", \"H\"],\n  \"GI\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"GL\": [\"H\", \"h\"],\n  \"GM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GN\": [\"H\", \"hB\"],\n  \"GP\": [\"H\", \"hB\"],\n  \"GQ\": [\"H\", \"hB\", \"h\", \"hb\"],\n  \"GR\": [\"h\", \"H\", \"hb\", \"hB\"],\n  \"GT\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"GU\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"GW\": [\"H\", \"hB\"],\n  \"GY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"HK\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"HN\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"HR\": [\"H\", \"hB\"],\n  \"HU\": [\"H\", \"h\"],\n  \"IC\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"ID\": [\"H\"],\n  \"IE\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IL\": [\"H\", \"hB\"],\n  \"IM\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IN\": [\"h\", \"H\"],\n  \"IO\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"IQ\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"IR\": [\"hB\", \"H\"],\n  \"IS\": [\"H\"],\n  \"IT\": [\"H\", \"hB\"],\n  \"JE\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"JM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"JO\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"JP\": [\"H\", \"K\", \"h\"],\n  \"KE\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"KG\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"KH\": [\"hB\", \"h\", \"H\", \"hb\"],\n  \"KI\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KM\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"KN\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KP\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"KR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"KW\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"KY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"KZ\": [\"H\", \"hB\"],\n  \"LA\": [\"H\", \"hb\", \"hB\", \"h\"],\n  \"LB\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"LC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"LI\": [\"H\", \"hB\", \"h\"],\n  \"LK\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"LR\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"LS\": [\"h\", \"H\"],\n  \"LT\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"LU\": [\"H\", \"h\", \"hB\"],\n  \"LV\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"LY\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"MC\": [\"H\", \"hB\"],\n  \"MD\": [\"H\", \"hB\"],\n  \"ME\": [\"H\", \"hB\", \"h\"],\n  \"MF\": [\"H\", \"hB\"],\n  \"MG\": [\"H\", \"h\"],\n  \"MH\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MK\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"ML\": [\"H\"],\n  \"MM\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"MN\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"MO\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MP\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MQ\": [\"H\", \"hB\"],\n  \"MR\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"MS\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"MT\": [\"H\", \"h\"],\n  \"MU\": [\"H\", \"h\"],\n  \"MV\": [\"H\", \"h\"],\n  \"MW\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"MX\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"MY\": [\"hb\", \"hB\", \"h\", \"H\"],\n  \"MZ\": [\"H\", \"hB\"],\n  \"NA\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"NC\": [\"H\", \"hB\"],\n  \"NE\": [\"H\"],\n  \"NF\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NG\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NI\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"NL\": [\"H\", \"hB\"],\n  \"NO\": [\"H\", \"h\"],\n  \"NP\": [\"H\", \"h\", \"hB\"],\n  \"NR\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NU\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"NZ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"OM\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PA\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PE\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PF\": [\"H\", \"h\", \"hB\"],\n  \"PG\": [\"h\", \"H\"],\n  \"PH\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PK\": [\"h\", \"hB\", \"H\"],\n  \"PL\": [\"H\", \"h\"],\n  \"PM\": [\"H\", \"hB\"],\n  \"PN\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"PR\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"PS\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"PT\": [\"H\", \"hB\"],\n  \"PW\": [\"h\", \"H\"],\n  \"PY\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"QA\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"RE\": [\"H\", \"hB\"],\n  \"RO\": [\"H\", \"hB\"],\n  \"RS\": [\"H\", \"hB\", \"h\"],\n  \"RU\": [\"H\"],\n  \"RW\": [\"H\", \"h\"],\n  \"SA\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SB\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SC\": [\"H\", \"h\", \"hB\"],\n  \"SD\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SE\": [\"H\"],\n  \"SG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SH\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"SI\": [\"H\", \"hB\"],\n  \"SJ\": [\"H\"],\n  \"SK\": [\"H\"],\n  \"SL\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"SM\": [\"H\", \"h\", \"hB\"],\n  \"SN\": [\"H\", \"h\", \"hB\"],\n  \"SO\": [\"h\", \"H\"],\n  \"SR\": [\"H\", \"hB\"],\n  \"SS\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"ST\": [\"H\", \"hB\"],\n  \"SV\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"SX\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"SY\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"SZ\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TA\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"TC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TD\": [\"h\", \"H\", \"hB\"],\n  \"TF\": [\"H\", \"h\", \"hB\"],\n  \"TG\": [\"H\", \"hB\"],\n  \"TH\": [\"H\", \"h\"],\n  \"TJ\": [\"H\", \"h\"],\n  \"TL\": [\"H\", \"hB\", \"hb\", \"h\"],\n  \"TM\": [\"H\", \"h\"],\n  \"TN\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"TO\": [\"h\", \"H\"],\n  \"TR\": [\"H\", \"hB\"],\n  \"TT\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"TW\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"TZ\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"UA\": [\"H\", \"hB\", \"h\"],\n  \"UG\": [\"hB\", \"hb\", \"H\", \"h\"],\n  \"UM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"US\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"UY\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"UZ\": [\"H\", \"hB\", \"h\"],\n  \"VA\": [\"H\", \"h\", \"hB\"],\n  \"VC\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VE\": [\"h\", \"H\", \"hB\", \"hb\"],\n  \"VG\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VI\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"VN\": [\"H\", \"h\"],\n  \"VU\": [\"h\", \"H\"],\n  \"WF\": [\"H\", \"hB\"],\n  \"WS\": [\"h\", \"H\"],\n  \"XK\": [\"H\", \"hB\", \"h\"],\n  \"YE\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"YT\": [\"H\", \"hB\"],\n  \"ZA\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"ZM\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"ZW\": [\"H\", \"h\"],\n  \"af-ZA\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"ar-001\": [\"h\", \"hB\", \"hb\", \"H\"],\n  \"ca-ES\": [\"H\", \"h\", \"hB\"],\n  \"en-001\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"en-HK\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"en-IL\": [\"H\", \"h\", \"hb\", \"hB\"],\n  \"en-MY\": [\"h\", \"hb\", \"H\", \"hB\"],\n  \"es-BR\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"es-ES\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"es-GQ\": [\"H\", \"h\", \"hB\", \"hb\"],\n  \"fr-CA\": [\"H\", \"h\", \"hB\"],\n  \"gl-ES\": [\"H\", \"h\", \"hB\"],\n  \"gu-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"hi-IN\": [\"hB\", \"h\", \"H\"],\n  \"it-CH\": [\"H\", \"h\", \"hB\"],\n  \"it-IT\": [\"H\", \"h\", \"hB\"],\n  \"kn-IN\": [\"hB\", \"h\", \"H\"],\n  \"ml-IN\": [\"hB\", \"h\", \"H\"],\n  \"mr-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"pa-IN\": [\"hB\", \"hb\", \"h\", \"H\"],\n  \"ta-IN\": [\"hB\", \"h\", \"hb\", \"H\"],\n  \"te-IN\": [\"hB\", \"h\", \"H\"],\n  \"zu-ZA\": [\"H\", \"hB\", \"hb\", \"h\"]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* binding */ SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* binding */ TYPE),\n/* harmony export */   createLiteralElement: () => (/* binding */ createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* binding */ createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* binding */ isArgumentElement),\n/* harmony export */   isDateElement: () => (/* binding */ isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* binding */ isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* binding */ isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* binding */ isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* binding */ isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* binding */ isPluralElement),\n/* harmony export */   isPoundElement: () => (/* binding */ isPoundElement),\n/* harmony export */   isSelectElement: () => (/* binding */ isSelectElement),\n/* harmony export */   isTagElement: () => (/* binding */ isTagElement),\n/* harmony export */   isTimeElement: () => (/* binding */ isTimeElement)\n/* harmony export */ });\nvar TYPE;\n(function (TYPE) {\n  /**\n   * Raw text\n   */\n  TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n  /**\n   * Variable w/o any format, e.g `var` in `this is a {var}`\n   */\n  TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n  /**\n   * Variable w/ number format\n   */\n  TYPE[TYPE[\"number\"] = 2] = \"number\";\n  /**\n   * Variable w/ date format\n   */\n  TYPE[TYPE[\"date\"] = 3] = \"date\";\n  /**\n   * Variable w/ time format\n   */\n  TYPE[TYPE[\"time\"] = 4] = \"time\";\n  /**\n   * Variable w/ select format\n   */\n  TYPE[TYPE[\"select\"] = 5] = \"select\";\n  /**\n   * Variable w/ plural format\n   */\n  TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n  /**\n   * Only possible within plural argument.\n   * This is the `#` symbol that will be substituted with the count.\n   */\n  TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n  /**\n   * XML-like tag\n   */\n  TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nvar SKELETON_TYPE;\n(function (SKELETON_TYPE) {\n  SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n  SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\nfunction isLiteralElement(el) {\n  return el.type === TYPE.literal;\n}\nfunction isArgumentElement(el) {\n  return el.type === TYPE.argument;\n}\nfunction isNumberElement(el) {\n  return el.type === TYPE.number;\n}\nfunction isDateElement(el) {\n  return el.type === TYPE.date;\n}\nfunction isTimeElement(el) {\n  return el.type === TYPE.time;\n}\nfunction isSelectElement(el) {\n  return el.type === TYPE.select;\n}\nfunction isPluralElement(el) {\n  return el.type === TYPE.plural;\n}\nfunction isPoundElement(el) {\n  return el.type === TYPE.pound;\n}\nfunction isTagElement(el) {\n  return el.type === TYPE.tag;\n}\nfunction isNumberSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);\n}\nfunction isDateTimeSkeleton(el) {\n  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);\n}\nfunction createLiteralElement(value) {\n  return {\n    type: TYPE.literal,\n    value: value\n  };\n}\nfunction createNumberElement(value, style) {\n  return {\n    type: TYPE.number,\n    value: value,\n    style: style\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFPLElBQUlBLElBQUk7QUFDZixDQUFDLFVBQVVBLElBQUksRUFBRTtFQUNiO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTO0VBQ3JDO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVO0VBQ3ZDO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQ25DO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO0VBQy9CO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO0VBQy9CO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQ25DO0FBQ0o7QUFDQTtFQUNJQSxJQUFJLENBQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQ25DO0FBQ0o7QUFDQTtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU87RUFDakM7QUFDSjtBQUNBO0VBQ0lBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUs7QUFDakMsQ0FBQyxFQUFFQSxJQUFJLEtBQUtBLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLElBQUlDLGFBQWE7QUFDeEIsQ0FBQyxVQUFVQSxhQUFhLEVBQUU7RUFDdEJBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDckRBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVU7QUFDN0QsQ0FBQyxFQUFFQSxhQUFhLEtBQUtBLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsRUFBRSxFQUFFO0VBQ2pDLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNLLE9BQU87QUFDbkM7QUFDTyxTQUFTQyxpQkFBaUJBLENBQUNILEVBQUUsRUFBRTtFQUNsQyxPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDTyxRQUFRO0FBQ3BDO0FBQ08sU0FBU0MsZUFBZUEsQ0FBQ0wsRUFBRSxFQUFFO0VBQ2hDLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNTLE1BQU07QUFDbEM7QUFDTyxTQUFTQyxhQUFhQSxDQUFDUCxFQUFFLEVBQUU7RUFDOUIsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ1csSUFBSTtBQUNoQztBQUNPLFNBQVNDLGFBQWFBLENBQUNULEVBQUUsRUFBRTtFQUM5QixPQUFPQSxFQUFFLENBQUNDLElBQUksS0FBS0osSUFBSSxDQUFDYSxJQUFJO0FBQ2hDO0FBQ08sU0FBU0MsZUFBZUEsQ0FBQ1gsRUFBRSxFQUFFO0VBQ2hDLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNlLE1BQU07QUFDbEM7QUFDTyxTQUFTQyxlQUFlQSxDQUFDYixFQUFFLEVBQUU7RUFDaEMsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ2lCLE1BQU07QUFDbEM7QUFDTyxTQUFTQyxjQUFjQSxDQUFDZixFQUFFLEVBQUU7RUFDL0IsT0FBT0EsRUFBRSxDQUFDQyxJQUFJLEtBQUtKLElBQUksQ0FBQ21CLEtBQUs7QUFDakM7QUFDTyxTQUFTQyxZQUFZQSxDQUFDakIsRUFBRSxFQUFFO0VBQzdCLE9BQU9BLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLSixJQUFJLENBQUNxQixHQUFHO0FBQy9CO0FBQ08sU0FBU0MsZ0JBQWdCQSxDQUFDbkIsRUFBRSxFQUFFO0VBQ2pDLE9BQU8sQ0FBQyxFQUFFQSxFQUFFLElBQUksT0FBT0EsRUFBRSxLQUFLLFFBQVEsSUFBSUEsRUFBRSxDQUFDQyxJQUFJLEtBQUtILGFBQWEsQ0FBQ1EsTUFBTSxDQUFDO0FBQy9FO0FBQ08sU0FBU2Msa0JBQWtCQSxDQUFDcEIsRUFBRSxFQUFFO0VBQ25DLE9BQU8sQ0FBQyxFQUFFQSxFQUFFLElBQUksT0FBT0EsRUFBRSxLQUFLLFFBQVEsSUFBSUEsRUFBRSxDQUFDQyxJQUFJLEtBQUtILGFBQWEsQ0FBQ3VCLFFBQVEsQ0FBQztBQUNqRjtBQUNPLFNBQVNDLG9CQUFvQkEsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3hDLE9BQU87SUFDSHRCLElBQUksRUFBRUosSUFBSSxDQUFDSyxPQUFPO0lBQ2xCcUIsS0FBSyxFQUFFQTtFQUNYLENBQUM7QUFDTDtBQUNPLFNBQVNDLG1CQUFtQkEsQ0FBQ0QsS0FBSyxFQUFFRSxLQUFLLEVBQUU7RUFDOUMsT0FBTztJQUNIeEIsSUFBSSxFQUFFSixJQUFJLENBQUNTLE1BQU07SUFDakJpQixLQUFLLEVBQUVBLEtBQUs7SUFDWkUsS0FBSyxFQUFFQTtFQUNYLENBQUM7QUFDTCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBRE1JTlxcT25lRHJpdmVcXERlc2t0b3BcXEltIGEgYmlyZGRkZGRkZFxcbm9kZV9tb2R1bGVzXFxAZm9ybWF0anNcXGljdS1tZXNzYWdlZm9ybWF0LXBhcnNlclxcbGliXFx0eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFRZUEU7XG4oZnVuY3Rpb24gKFRZUEUpIHtcbiAgICAvKipcbiAgICAgKiBSYXcgdGV4dFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImxpdGVyYWxcIl0gPSAwXSA9IFwibGl0ZXJhbFwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvbyBhbnkgZm9ybWF0LCBlLmcgYHZhcmAgaW4gYHRoaXMgaXMgYSB7dmFyfWBcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJhcmd1bWVudFwiXSA9IDFdID0gXCJhcmd1bWVudFwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIG51bWJlciBmb3JtYXRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJudW1iZXJcIl0gPSAyXSA9IFwibnVtYmVyXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gZGF0ZSBmb3JtYXRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJkYXRlXCJdID0gM10gPSBcImRhdGVcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyB0aW1lIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInRpbWVcIl0gPSA0XSA9IFwidGltZVwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIHNlbGVjdCBmb3JtYXRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJzZWxlY3RcIl0gPSA1XSA9IFwic2VsZWN0XCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gcGx1cmFsIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInBsdXJhbFwiXSA9IDZdID0gXCJwbHVyYWxcIjtcbiAgICAvKipcbiAgICAgKiBPbmx5IHBvc3NpYmxlIHdpdGhpbiBwbHVyYWwgYXJndW1lbnQuXG4gICAgICogVGhpcyBpcyB0aGUgYCNgIHN5bWJvbCB0aGF0IHdpbGwgYmUgc3Vic3RpdHV0ZWQgd2l0aCB0aGUgY291bnQuXG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wicG91bmRcIl0gPSA3XSA9IFwicG91bmRcIjtcbiAgICAvKipcbiAgICAgKiBYTUwtbGlrZSB0YWdcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJ0YWdcIl0gPSA4XSA9IFwidGFnXCI7XG59KShUWVBFIHx8IChUWVBFID0ge30pKTtcbmV4cG9ydCB2YXIgU0tFTEVUT05fVFlQRTtcbihmdW5jdGlvbiAoU0tFTEVUT05fVFlQRSkge1xuICAgIFNLRUxFVE9OX1RZUEVbU0tFTEVUT05fVFlQRVtcIm51bWJlclwiXSA9IDBdID0gXCJudW1iZXJcIjtcbiAgICBTS0VMRVRPTl9UWVBFW1NLRUxFVE9OX1RZUEVbXCJkYXRlVGltZVwiXSA9IDFdID0gXCJkYXRlVGltZVwiO1xufSkoU0tFTEVUT05fVFlQRSB8fCAoU0tFTEVUT05fVFlQRSA9IHt9KSk7XG4vKipcbiAqIFR5cGUgR3VhcmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xpdGVyYWxFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUubGl0ZXJhbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FyZ3VtZW50RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLmFyZ3VtZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyRWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLm51bWJlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUuZGF0ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUudGltZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NlbGVjdEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5zZWxlY3Q7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQbHVyYWxFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUucGx1cmFsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUG91bmRFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUucG91bmQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUYWdFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUudGFnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyU2tlbGV0b24oZWwpIHtcbiAgICByZXR1cm4gISEoZWwgJiYgdHlwZW9mIGVsID09PSAnb2JqZWN0JyAmJiBlbC50eXBlID09PSBTS0VMRVRPTl9UWVBFLm51bWJlcik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlVGltZVNrZWxldG9uKGVsKSB7XG4gICAgcmV0dXJuICEhKGVsICYmIHR5cGVvZiBlbCA9PT0gJ29iamVjdCcgJiYgZWwudHlwZSA9PT0gU0tFTEVUT05fVFlQRS5kYXRlVGltZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGl0ZXJhbEVsZW1lbnQodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFLmxpdGVyYWwsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU51bWJlckVsZW1lbnQodmFsdWUsIHN0eWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVFlQRS5udW1iZXIsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiVFlQRSIsIlNLRUxFVE9OX1RZUEUiLCJpc0xpdGVyYWxFbGVtZW50IiwiZWwiLCJ0eXBlIiwibGl0ZXJhbCIsImlzQXJndW1lbnRFbGVtZW50IiwiYXJndW1lbnQiLCJpc051bWJlckVsZW1lbnQiLCJudW1iZXIiLCJpc0RhdGVFbGVtZW50IiwiZGF0ZSIsImlzVGltZUVsZW1lbnQiLCJ0aW1lIiwiaXNTZWxlY3RFbGVtZW50Iiwic2VsZWN0IiwiaXNQbHVyYWxFbGVtZW50IiwicGx1cmFsIiwiaXNQb3VuZEVsZW1lbnQiLCJwb3VuZCIsImlzVGFnRWxlbWVudCIsInRhZyIsImlzTnVtYmVyU2tlbGV0b24iLCJpc0RhdGVUaW1lU2tlbGV0b24iLCJkYXRlVGltZSIsImNyZWF0ZUxpdGVyYWxFbGVtZW50IiwidmFsdWUiLCJjcmVhdGVOdW1iZXJFbGVtZW50Iiwic3R5bGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* binding */ parseDateTimeSkeleton)\n/* harmony export */ });\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nfunction parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n      case 'E':\n        result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n      case 'b': // am, pm, noon, midnight\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n      // Zone\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n      case 'O': // 1, 4: milliseconds in day short, long\n      case 'v': // 1, 4: generic non-location format\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n    }\n    return '';\n  });\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/index.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-skeleton-parser/lib/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* reexport safe */ _date_time__WEBPACK_IMPORTED_MODULE_0__.parseDateTimeSkeleton),\n/* harmony export */   parseNumberSkeleton: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var _date_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-time */ \"(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\");\n/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number */ \"(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3Utc2tlbGV0b24tcGFyc2VyL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBRE1JTlxcT25lRHJpdmVcXERlc2t0b3BcXEltIGEgYmlyZGRkZGRkZFxcbm9kZV9tb2R1bGVzXFxAZm9ybWF0anNcXGljdS1za2VsZXRvbi1wYXJzZXJcXGxpYlxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kYXRlLXRpbWUnO1xuZXhwb3J0ICogZnJvbSAnLi9udW1iZXInO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNumberSkeleton: () => (/* binding */ parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* binding */ parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/../../node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.generated */ \"(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\");\n\n\nfunction parseNumberSkeletonFromString(skeleton) {\n  if (skeleton.length === 0) {\n    throw new Error('Number skeleton cannot be empty');\n  }\n  // Parse the skeleton\n  var stringTokens = skeleton.split(_regex_generated__WEBPACK_IMPORTED_MODULE_0__.WHITE_SPACE_REGEX).filter(function (x) {\n    return x.length > 0;\n  });\n  var tokens = [];\n  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n    var stringToken = stringTokens_1[_i];\n    var stemAndOptions = stringToken.split('/');\n    if (stemAndOptions.length === 0) {\n      throw new Error('Invalid number skeleton');\n    }\n    var stem = stemAndOptions[0],\n      options = stemAndOptions.slice(1);\n    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n      var option = options_1[_a];\n      if (option.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n    }\n    tokens.push({\n      stem: stem,\n      options: options\n    });\n  }\n  return tokens;\n}\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  if (str[str.length - 1] === 'r') {\n    result.roundingPriority = 'morePrecision';\n  } else if (str[str.length - 1] === 's') {\n    result.roundingPriority = 'lessPrecision';\n  }\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    }\n    // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    }\n    // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    }\n    // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n    return '';\n  });\n  return result;\n}\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n    case 'sign-accounting':\n    case '()':\n      return {\n        currencySign: 'accounting'\n      };\n    case 'sign-always':\n    case '+!':\n      return {\n        signDisplay: 'always'\n      };\n    case 'sign-accounting-always':\n    case '()!':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n    case 'sign-except-zero':\n    case '+?':\n      return {\n        signDisplay: 'exceptZero'\n      };\n    case 'sign-accounting-except-zero':\n    case '()?':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n    case 'sign-never':\n    case '+_':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n  // Engineering\n  var result;\n  if (stem[0] === 'E' && stem[1] === 'E') {\n    result = {\n      notation: 'engineering'\n    };\n    stem = stem.slice(2);\n  } else if (stem[0] === 'E') {\n    result = {\n      notation: 'scientific'\n    };\n    stem = stem.slice(1);\n  }\n  if (result) {\n    var signDisplay = stem.slice(0, 2);\n    if (signDisplay === '+!') {\n      result.signDisplay = 'always';\n      stem = stem.slice(2);\n    } else if (signDisplay === '+?') {\n      result.signDisplay = 'exceptZero';\n      stem = stem.slice(2);\n    }\n    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n      throw new Error('Malformed concise eng/scientific notation');\n    }\n    result.minimumIntegerDigits = stem.length;\n  }\n  return result;\n}\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n  if (signOpts) {\n    return signOpts;\n  }\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nfunction parseNumberSkeleton(tokens) {\n  var result = {};\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    switch (token.stem) {\n      case 'percent':\n      case '%':\n        result.style = 'percent';\n        continue;\n      case '%x100':\n        result.style = 'percent';\n        result.scale = 100;\n        continue;\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n      case 'group-off':\n      case ',_':\n        result.useGrouping = false;\n        continue;\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n      case 'measure-unit':\n      case 'unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n      case 'compact-short':\n      case 'K':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n      case 'compact-long':\n      case 'KK':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n      case 'scientific':\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'engineering':\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n      case 'scale':\n        result.scale = parseFloat(token.options[0]);\n        continue;\n      case 'rounding-mode-floor':\n        result.roundingMode = 'floor';\n        continue;\n      case 'rounding-mode-ceiling':\n        result.roundingMode = 'ceil';\n        continue;\n      case 'rounding-mode-down':\n        result.roundingMode = 'trunc';\n        continue;\n      case 'rounding-mode-up':\n        result.roundingMode = 'expand';\n        continue;\n      case 'rounding-mode-half-even':\n        result.roundingMode = 'halfEven';\n        continue;\n      case 'rounding-mode-half-down':\n        result.roundingMode = 'halfTrunc';\n        continue;\n      case 'rounding-mode-half-up':\n        result.roundingMode = 'halfExpand';\n        continue;\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n      case 'integer-width':\n        if (token.options.length > 1) {\n          throw new RangeError('integer-width stems only accept a single optional option');\n        }\n        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n          if (g1) {\n            result.minimumIntegerDigits = g2.length;\n          } else if (g3 && g4) {\n            throw new Error('We currently do not support maximum integer digits');\n          } else if (g5) {\n            throw new Error('We currently do not support exact integer digits');\n          }\n          return '';\n        });\n        continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n      result.minimumIntegerDigits = token.stem.length;\n      continue;\n    }\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      // Precision\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n      // precision-integer case\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        }\n        // .### case\n        else if (g3 && g3[0] === '#') {\n          result.maximumFractionDigits = g3.length;\n        }\n        // .00## case\n        else if (g4 && g5) {\n          result.minimumFractionDigits = g4.length;\n          result.maximumFractionDigits = g4.length + g5.length;\n        } else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length;\n        }\n        return '';\n      });\n      var opt = token.options[0];\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n      if (opt === 'w') {\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n          trailingZeroDisplay: 'stripIfInteger'\n        });\n      } else if (opt) {\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(opt));\n      }\n      continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n    var signOpts = parseSign(token.stem);\n    if (signOpts) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), signOpts);\n    }\n    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n    if (conciseScientificAndEngineeringOpts) {\n      result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), conciseScientificAndEngineeringOpts);\n    }\n  }\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3Utc2tlbGV0b24tcGFyc2VyL2xpYi9yZWdleC5nZW5lcmF0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ08sSUFBSUEsaUJBQWlCLEdBQUcsdUNBQXVDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFETUlOXFxPbmVEcml2ZVxcRGVza3RvcFxcSW0gYSBiaXJkZGRkZGRkXFxub2RlX21vZHVsZXNcXEBmb3JtYXRqc1xcaWN1LXNrZWxldG9uLXBhcnNlclxcbGliXFxyZWdleC5nZW5lcmF0ZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGdlbmVyYXRlZCBmcm9tIHJlZ2V4LWdlbi50c1xuZXhwb3J0IHZhciBXSElURV9TUEFDRV9SRUdFWCA9IC9bXFx0LVxcciBcXHg4NVxcdTIwMEVcXHUyMDBGXFx1MjAyOFxcdTIwMjldL2k7XG4iXSwibmFtZXMiOlsiV0hJVEVfU1BBQ0VfUkVHRVgiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\n");

/***/ })

};
;